ARM GAS  /tmp/cc1T14q7.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"timetick.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.__WFI,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  22              		.type	__WFI, %function
  23              	__WFI:
  24              	.LFB5:
  25              		.file 1 "libchip/cmsis/core_cm3.h"
   1:libchip/cmsis/core_cm3.h **** /**************************************************************************//**
   2:libchip/cmsis/core_cm3.h ****  * @file     core_cm3.h
   3:libchip/cmsis/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:libchip/cmsis/core_cm3.h ****  * @version  V1.30
   5:libchip/cmsis/core_cm3.h ****  * @date     30. October 2009
   6:libchip/cmsis/core_cm3.h ****  *
   7:libchip/cmsis/core_cm3.h ****  * @note
   8:libchip/cmsis/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:libchip/cmsis/core_cm3.h ****  *
  10:libchip/cmsis/core_cm3.h ****  * @par
  11:libchip/cmsis/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:libchip/cmsis/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:libchip/cmsis/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:libchip/cmsis/core_cm3.h ****  *
  15:libchip/cmsis/core_cm3.h ****  * @par
  16:libchip/cmsis/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libchip/cmsis/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libchip/cmsis/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libchip/cmsis/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libchip/cmsis/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libchip/cmsis/core_cm3.h ****  *
  22:libchip/cmsis/core_cm3.h ****  ******************************************************************************/
  23:libchip/cmsis/core_cm3.h **** 
  24:libchip/cmsis/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:libchip/cmsis/core_cm3.h **** #define __CM3_CORE_H__
  26:libchip/cmsis/core_cm3.h **** 
  27:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:libchip/cmsis/core_cm3.h ****  *
  29:libchip/cmsis/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:libchip/cmsis/core_cm3.h ****  *   - Error 10: \n
  31:libchip/cmsis/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:libchip/cmsis/core_cm3.h ****  *     Error 10: Expecting ';'
ARM GAS  /tmp/cc1T14q7.s 			page 2


  33:libchip/cmsis/core_cm3.h ****  * .
  34:libchip/cmsis/core_cm3.h ****  *   - Error 530: \n
  35:libchip/cmsis/core_cm3.h ****  *     return(__regBasePri); \n
  36:libchip/cmsis/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:libchip/cmsis/core_cm3.h ****  * .
  38:libchip/cmsis/core_cm3.h ****  *   - Error 550: \n
  39:libchip/cmsis/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:libchip/cmsis/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:libchip/cmsis/core_cm3.h ****  * .
  42:libchip/cmsis/core_cm3.h ****  *   - Error 754: \n
  43:libchip/cmsis/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:libchip/cmsis/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:libchip/cmsis/core_cm3.h ****  * .
  46:libchip/cmsis/core_cm3.h ****  *   - Error 750: \n
  47:libchip/cmsis/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:libchip/cmsis/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:libchip/cmsis/core_cm3.h ****  * .
  50:libchip/cmsis/core_cm3.h ****  *   - Error 528: \n
  51:libchip/cmsis/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:libchip/cmsis/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:libchip/cmsis/core_cm3.h ****  * .
  54:libchip/cmsis/core_cm3.h ****  *   - Error 751: \n
  55:libchip/cmsis/core_cm3.h ****  *     } InterruptType_Type; \n
  56:libchip/cmsis/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:libchip/cmsis/core_cm3.h ****  * .
  58:libchip/cmsis/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:libchip/cmsis/core_cm3.h ****  *
  60:libchip/cmsis/core_cm3.h ****  */
  61:libchip/cmsis/core_cm3.h **** 
  62:libchip/cmsis/core_cm3.h **** /*lint -save */
  63:libchip/cmsis/core_cm3.h **** /*lint -e10  */
  64:libchip/cmsis/core_cm3.h **** /*lint -e530 */
  65:libchip/cmsis/core_cm3.h **** /*lint -e550 */
  66:libchip/cmsis/core_cm3.h **** /*lint -e754 */
  67:libchip/cmsis/core_cm3.h **** /*lint -e750 */
  68:libchip/cmsis/core_cm3.h **** /*lint -e528 */
  69:libchip/cmsis/core_cm3.h **** /*lint -e751 */
  70:libchip/cmsis/core_cm3.h **** 
  71:libchip/cmsis/core_cm3.h **** 
  72:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:libchip/cmsis/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:libchip/cmsis/core_cm3.h ****     - CMSIS version number
  75:libchip/cmsis/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:libchip/cmsis/core_cm3.h ****     - Cortex-M core peripheral base address
  77:libchip/cmsis/core_cm3.h ****   @{
  78:libchip/cmsis/core_cm3.h ****  */
  79:libchip/cmsis/core_cm3.h **** 
  80:libchip/cmsis/core_cm3.h **** #ifdef __cplusplus
  81:libchip/cmsis/core_cm3.h ****  extern "C" {
  82:libchip/cmsis/core_cm3.h **** #endif
  83:libchip/cmsis/core_cm3.h **** 
  84:libchip/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:libchip/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:libchip/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:libchip/cmsis/core_cm3.h **** 
  88:libchip/cmsis/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:libchip/cmsis/core_cm3.h **** 
ARM GAS  /tmp/cc1T14q7.s 			page 3


  90:libchip/cmsis/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:libchip/cmsis/core_cm3.h **** 
  92:libchip/cmsis/core_cm3.h **** #if defined (__ICCARM__)
  93:libchip/cmsis/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:libchip/cmsis/core_cm3.h **** #endif
  95:libchip/cmsis/core_cm3.h **** 
  96:libchip/cmsis/core_cm3.h **** 
  97:libchip/cmsis/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:libchip/cmsis/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:libchip/cmsis/core_cm3.h **** #endif
 100:libchip/cmsis/core_cm3.h **** 
 101:libchip/cmsis/core_cm3.h **** 
 102:libchip/cmsis/core_cm3.h **** 
 103:libchip/cmsis/core_cm3.h **** 
 104:libchip/cmsis/core_cm3.h **** /**
 105:libchip/cmsis/core_cm3.h ****  * IO definitions
 106:libchip/cmsis/core_cm3.h ****  *
 107:libchip/cmsis/core_cm3.h ****  * define access restrictions to peripheral registers
 108:libchip/cmsis/core_cm3.h ****  */
 109:libchip/cmsis/core_cm3.h **** 
 110:libchip/cmsis/core_cm3.h **** #ifdef __cplusplus
 111:libchip/cmsis/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:libchip/cmsis/core_cm3.h **** #else
 113:libchip/cmsis/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:libchip/cmsis/core_cm3.h **** #endif
 115:libchip/cmsis/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:libchip/cmsis/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:libchip/cmsis/core_cm3.h **** 
 118:libchip/cmsis/core_cm3.h **** 
 119:libchip/cmsis/core_cm3.h **** 
 120:libchip/cmsis/core_cm3.h **** /*******************************************************************************
 121:libchip/cmsis/core_cm3.h ****  *                 Register Abstraction
 122:libchip/cmsis/core_cm3.h ****  ******************************************************************************/
 123:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:libchip/cmsis/core_cm3.h ****  @{
 125:libchip/cmsis/core_cm3.h **** */
 126:libchip/cmsis/core_cm3.h **** 
 127:libchip/cmsis/core_cm3.h **** 
 128:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:libchip/cmsis/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:libchip/cmsis/core_cm3.h ****   @{
 131:libchip/cmsis/core_cm3.h ****  */
 132:libchip/cmsis/core_cm3.h **** typedef struct
 133:libchip/cmsis/core_cm3.h **** {
 134:libchip/cmsis/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED0[24];
 136:libchip/cmsis/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:libchip/cmsis/core_cm3.h ****        uint32_t RSERVED1[24];
 138:libchip/cmsis/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED2[24];
 140:libchip/cmsis/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED3[24];
 142:libchip/cmsis/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED4[56];
 144:libchip/cmsis/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED5[644];
 146:libchip/cmsis/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
ARM GAS  /tmp/cc1T14q7.s 			page 4


 147:libchip/cmsis/core_cm3.h **** }  NVIC_Type;
 148:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:libchip/cmsis/core_cm3.h **** 
 150:libchip/cmsis/core_cm3.h **** 
 151:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:libchip/cmsis/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:libchip/cmsis/core_cm3.h ****   @{
 154:libchip/cmsis/core_cm3.h ****  */
 155:libchip/cmsis/core_cm3.h **** typedef struct
 156:libchip/cmsis/core_cm3.h **** {
 157:libchip/cmsis/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:libchip/cmsis/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:libchip/cmsis/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:libchip/cmsis/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:libchip/cmsis/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:libchip/cmsis/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:libchip/cmsis/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:libchip/cmsis/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:libchip/cmsis/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:libchip/cmsis/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:libchip/cmsis/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:libchip/cmsis/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:libchip/cmsis/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:libchip/cmsis/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:libchip/cmsis/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:libchip/cmsis/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:libchip/cmsis/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:libchip/cmsis/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:libchip/cmsis/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:libchip/cmsis/core_cm3.h **** } SCB_Type;
 177:libchip/cmsis/core_cm3.h **** 
 178:libchip/cmsis/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:libchip/cmsis/core_cm3.h **** 
 182:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:libchip/cmsis/core_cm3.h **** 
 185:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:libchip/cmsis/core_cm3.h **** 
 188:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:libchip/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:libchip/cmsis/core_cm3.h **** 
 191:libchip/cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:libchip/cmsis/core_cm3.h **** 
 195:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:libchip/cmsis/core_cm3.h **** 
 198:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:libchip/cmsis/core_cm3.h **** 
 201:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:libchip/cmsis/core_cm3.h **** 
ARM GAS  /tmp/cc1T14q7.s 			page 5


 204:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:libchip/cmsis/core_cm3.h **** 
 207:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:libchip/cmsis/core_cm3.h **** 
 210:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:libchip/cmsis/core_cm3.h **** 
 213:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:libchip/cmsis/core_cm3.h **** 
 216:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:libchip/cmsis/core_cm3.h **** 
 219:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:libchip/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:libchip/cmsis/core_cm3.h **** 
 222:libchip/cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:libchip/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:libchip/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1ul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB VT
 225:libchip/cmsis/core_cm3.h **** 
 226:libchip/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:libchip/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:libchip/cmsis/core_cm3.h **** 
 229:libchip/cmsis/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:libchip/cmsis/core_cm3.h **** 
 233:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:libchip/cmsis/core_cm3.h **** 
 236:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:libchip/cmsis/core_cm3.h **** 
 239:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:libchip/cmsis/core_cm3.h **** 
 242:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:libchip/cmsis/core_cm3.h **** 
 245:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:libchip/cmsis/core_cm3.h **** 
 248:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:libchip/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:libchip/cmsis/core_cm3.h **** 
 251:libchip/cmsis/core_cm3.h **** /* SCB System Control Register Definitions */
 252:libchip/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:libchip/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:libchip/cmsis/core_cm3.h **** 
 255:libchip/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:libchip/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:libchip/cmsis/core_cm3.h **** 
 258:libchip/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:libchip/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:libchip/cmsis/core_cm3.h **** 
ARM GAS  /tmp/cc1T14q7.s 			page 6


 261:libchip/cmsis/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:libchip/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:libchip/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:libchip/cmsis/core_cm3.h **** 
 265:libchip/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:libchip/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:libchip/cmsis/core_cm3.h **** 
 268:libchip/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:libchip/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:libchip/cmsis/core_cm3.h **** 
 271:libchip/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:libchip/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:libchip/cmsis/core_cm3.h **** 
 274:libchip/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:libchip/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:libchip/cmsis/core_cm3.h **** 
 277:libchip/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:libchip/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:libchip/cmsis/core_cm3.h **** 
 280:libchip/cmsis/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:libchip/cmsis/core_cm3.h **** 
 284:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:libchip/cmsis/core_cm3.h **** 
 287:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:libchip/cmsis/core_cm3.h **** 
 290:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:libchip/cmsis/core_cm3.h **** 
 293:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:libchip/cmsis/core_cm3.h **** 
 296:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:libchip/cmsis/core_cm3.h **** 
 299:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:libchip/cmsis/core_cm3.h **** 
 302:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:libchip/cmsis/core_cm3.h **** 
 305:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:libchip/cmsis/core_cm3.h **** 
 308:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:libchip/cmsis/core_cm3.h **** 
 311:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:libchip/cmsis/core_cm3.h **** 
 314:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:libchip/cmsis/core_cm3.h **** 
 317:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
ARM GAS  /tmp/cc1T14q7.s 			page 7


 318:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:libchip/cmsis/core_cm3.h **** 
 320:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:libchip/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:libchip/cmsis/core_cm3.h **** 
 323:libchip/cmsis/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:libchip/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:libchip/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:libchip/cmsis/core_cm3.h **** 
 327:libchip/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:libchip/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:libchip/cmsis/core_cm3.h **** 
 330:libchip/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:libchip/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:libchip/cmsis/core_cm3.h **** 
 333:libchip/cmsis/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:libchip/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:libchip/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:libchip/cmsis/core_cm3.h **** 
 337:libchip/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:libchip/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:libchip/cmsis/core_cm3.h **** 
 340:libchip/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:libchip/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:libchip/cmsis/core_cm3.h **** 
 343:libchip/cmsis/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:libchip/cmsis/core_cm3.h **** 
 347:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:libchip/cmsis/core_cm3.h **** 
 350:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:libchip/cmsis/core_cm3.h **** 
 353:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:libchip/cmsis/core_cm3.h **** 
 356:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:libchip/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:libchip/cmsis/core_cm3.h **** 
 360:libchip/cmsis/core_cm3.h **** 
 361:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:libchip/cmsis/core_cm3.h ****   memory mapped structure for SysTick
 363:libchip/cmsis/core_cm3.h ****   @{
 364:libchip/cmsis/core_cm3.h ****  */
 365:libchip/cmsis/core_cm3.h **** typedef struct
 366:libchip/cmsis/core_cm3.h **** {
 367:libchip/cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:libchip/cmsis/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:libchip/cmsis/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:libchip/cmsis/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:libchip/cmsis/core_cm3.h **** } SysTick_Type;
 372:libchip/cmsis/core_cm3.h **** 
 373:libchip/cmsis/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
ARM GAS  /tmp/cc1T14q7.s 			page 8


 375:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:libchip/cmsis/core_cm3.h **** 
 377:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:libchip/cmsis/core_cm3.h **** 
 380:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:libchip/cmsis/core_cm3.h **** 
 383:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:libchip/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:libchip/cmsis/core_cm3.h **** 
 386:libchip/cmsis/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:libchip/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:libchip/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:libchip/cmsis/core_cm3.h **** 
 390:libchip/cmsis/core_cm3.h **** /* SysTick Current Register Definitions */
 391:libchip/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:libchip/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:libchip/cmsis/core_cm3.h **** 
 394:libchip/cmsis/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:libchip/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:libchip/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:libchip/cmsis/core_cm3.h **** 
 398:libchip/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:libchip/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:libchip/cmsis/core_cm3.h **** 
 401:libchip/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:libchip/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:libchip/cmsis/core_cm3.h **** 
 405:libchip/cmsis/core_cm3.h **** 
 406:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:libchip/cmsis/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:libchip/cmsis/core_cm3.h ****   @{
 409:libchip/cmsis/core_cm3.h ****  */
 410:libchip/cmsis/core_cm3.h **** typedef struct
 411:libchip/cmsis/core_cm3.h **** {
 412:libchip/cmsis/core_cm3.h ****   __O  union
 413:libchip/cmsis/core_cm3.h ****   {
 414:libchip/cmsis/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:libchip/cmsis/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:libchip/cmsis/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:libchip/cmsis/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED0[864];
 419:libchip/cmsis/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED1[15];
 421:libchip/cmsis/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED2[15];
 423:libchip/cmsis/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED3[29];
 425:libchip/cmsis/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:libchip/cmsis/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:libchip/cmsis/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED4[43];
 429:libchip/cmsis/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:libchip/cmsis/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED5[6];
ARM GAS  /tmp/cc1T14q7.s 			page 9


 432:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:libchip/cmsis/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:libchip/cmsis/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:libchip/cmsis/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:libchip/cmsis/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:libchip/cmsis/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:libchip/cmsis/core_cm3.h **** } ITM_Type;
 445:libchip/cmsis/core_cm3.h **** 
 446:libchip/cmsis/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:libchip/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:libchip/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:libchip/cmsis/core_cm3.h **** 
 450:libchip/cmsis/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:libchip/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:libchip/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:libchip/cmsis/core_cm3.h **** 
 454:libchip/cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:libchip/cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:libchip/cmsis/core_cm3.h **** 
 457:libchip/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:libchip/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:libchip/cmsis/core_cm3.h **** 
 460:libchip/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:libchip/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:libchip/cmsis/core_cm3.h **** 
 463:libchip/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:libchip/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:libchip/cmsis/core_cm3.h **** 
 466:libchip/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:libchip/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:libchip/cmsis/core_cm3.h **** 
 469:libchip/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:libchip/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:libchip/cmsis/core_cm3.h **** 
 472:libchip/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:libchip/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:libchip/cmsis/core_cm3.h **** 
 475:libchip/cmsis/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:libchip/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:libchip/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:libchip/cmsis/core_cm3.h **** 
 479:libchip/cmsis/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:libchip/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:libchip/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:libchip/cmsis/core_cm3.h **** 
 483:libchip/cmsis/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:libchip/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:libchip/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:libchip/cmsis/core_cm3.h **** 
 487:libchip/cmsis/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:libchip/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
ARM GAS  /tmp/cc1T14q7.s 			page 10


 489:libchip/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:libchip/cmsis/core_cm3.h **** 
 491:libchip/cmsis/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:libchip/cmsis/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:libchip/cmsis/core_cm3.h **** 
 494:libchip/cmsis/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:libchip/cmsis/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:libchip/cmsis/core_cm3.h **** 
 498:libchip/cmsis/core_cm3.h **** 
 499:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:libchip/cmsis/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:libchip/cmsis/core_cm3.h ****   @{
 502:libchip/cmsis/core_cm3.h ****  */
 503:libchip/cmsis/core_cm3.h **** typedef struct
 504:libchip/cmsis/core_cm3.h **** {
 505:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED0;
 506:libchip/cmsis/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:libchip/cmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:libchip/cmsis/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:libchip/cmsis/core_cm3.h **** #else
 510:libchip/cmsis/core_cm3.h ****        uint32_t RESERVED1;
 511:libchip/cmsis/core_cm3.h **** #endif
 512:libchip/cmsis/core_cm3.h **** } InterruptType_Type;
 513:libchip/cmsis/core_cm3.h **** 
 514:libchip/cmsis/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:libchip/cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:libchip/cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:libchip/cmsis/core_cm3.h **** 
 518:libchip/cmsis/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:libchip/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:libchip/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:libchip/cmsis/core_cm3.h **** 
 522:libchip/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:libchip/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:libchip/cmsis/core_cm3.h **** 
 525:libchip/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:libchip/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:libchip/cmsis/core_cm3.h **** 
 529:libchip/cmsis/core_cm3.h **** 
 530:libchip/cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:libchip/cmsis/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:libchip/cmsis/core_cm3.h ****   @{
 534:libchip/cmsis/core_cm3.h ****  */
 535:libchip/cmsis/core_cm3.h **** typedef struct
 536:libchip/cmsis/core_cm3.h **** {
 537:libchip/cmsis/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:libchip/cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:libchip/cmsis/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:libchip/cmsis/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:libchip/cmsis/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:libchip/cmsis/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:libchip/cmsis/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:libchip/cmsis/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:libchip/cmsis/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
ARM GAS  /tmp/cc1T14q7.s 			page 11


 546:libchip/cmsis/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:libchip/cmsis/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:libchip/cmsis/core_cm3.h **** } MPU_Type;
 549:libchip/cmsis/core_cm3.h **** 
 550:libchip/cmsis/core_cm3.h **** /* MPU Type Register */
 551:libchip/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:libchip/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:libchip/cmsis/core_cm3.h **** 
 554:libchip/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:libchip/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:libchip/cmsis/core_cm3.h **** 
 557:libchip/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:libchip/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:libchip/cmsis/core_cm3.h **** 
 560:libchip/cmsis/core_cm3.h **** /* MPU Control Register */
 561:libchip/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:libchip/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:libchip/cmsis/core_cm3.h **** 
 564:libchip/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:libchip/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:libchip/cmsis/core_cm3.h **** 
 567:libchip/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:libchip/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:libchip/cmsis/core_cm3.h **** 
 570:libchip/cmsis/core_cm3.h **** /* MPU Region Number Register */
 571:libchip/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:libchip/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:libchip/cmsis/core_cm3.h **** 
 574:libchip/cmsis/core_cm3.h **** /* MPU Region Base Address Register */
 575:libchip/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:libchip/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:libchip/cmsis/core_cm3.h **** 
 578:libchip/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:libchip/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:libchip/cmsis/core_cm3.h **** 
 581:libchip/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:libchip/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:libchip/cmsis/core_cm3.h **** 
 584:libchip/cmsis/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:libchip/cmsis/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:libchip/cmsis/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:libchip/cmsis/core_cm3.h **** 
 588:libchip/cmsis/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:libchip/cmsis/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:libchip/cmsis/core_cm3.h **** 
 591:libchip/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:libchip/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:libchip/cmsis/core_cm3.h **** 
 594:libchip/cmsis/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:libchip/cmsis/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:libchip/cmsis/core_cm3.h **** 
 597:libchip/cmsis/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:libchip/cmsis/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:libchip/cmsis/core_cm3.h **** 
 600:libchip/cmsis/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:libchip/cmsis/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:libchip/cmsis/core_cm3.h **** 
ARM GAS  /tmp/cc1T14q7.s 			page 12


 603:libchip/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:libchip/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:libchip/cmsis/core_cm3.h **** 
 606:libchip/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:libchip/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:libchip/cmsis/core_cm3.h **** 
 609:libchip/cmsis/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:libchip/cmsis/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:libchip/cmsis/core_cm3.h **** 
 612:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:libchip/cmsis/core_cm3.h **** #endif
 614:libchip/cmsis/core_cm3.h **** 
 615:libchip/cmsis/core_cm3.h **** 
 616:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:libchip/cmsis/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:libchip/cmsis/core_cm3.h ****   @{
 619:libchip/cmsis/core_cm3.h ****  */
 620:libchip/cmsis/core_cm3.h **** typedef struct
 621:libchip/cmsis/core_cm3.h **** {
 622:libchip/cmsis/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:libchip/cmsis/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:libchip/cmsis/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:libchip/cmsis/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:libchip/cmsis/core_cm3.h **** } CoreDebug_Type;
 627:libchip/cmsis/core_cm3.h **** 
 628:libchip/cmsis/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:libchip/cmsis/core_cm3.h **** 
 632:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:libchip/cmsis/core_cm3.h **** 
 635:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:libchip/cmsis/core_cm3.h **** 
 638:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:libchip/cmsis/core_cm3.h **** 
 641:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:libchip/cmsis/core_cm3.h **** 
 644:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:libchip/cmsis/core_cm3.h **** 
 647:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:libchip/cmsis/core_cm3.h **** 
 650:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:libchip/cmsis/core_cm3.h **** 
 653:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:libchip/cmsis/core_cm3.h **** 
 656:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:libchip/cmsis/core_cm3.h **** 
 659:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
ARM GAS  /tmp/cc1T14q7.s 			page 13


 660:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:libchip/cmsis/core_cm3.h **** 
 662:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:libchip/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:libchip/cmsis/core_cm3.h **** 
 665:libchip/cmsis/core_cm3.h **** /* Debug Core Register Selector Register */
 666:libchip/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:libchip/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:libchip/cmsis/core_cm3.h **** 
 669:libchip/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:libchip/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:libchip/cmsis/core_cm3.h **** 
 672:libchip/cmsis/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:libchip/cmsis/core_cm3.h **** 
 676:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:libchip/cmsis/core_cm3.h **** 
 679:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:libchip/cmsis/core_cm3.h **** 
 682:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:libchip/cmsis/core_cm3.h **** 
 685:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:libchip/cmsis/core_cm3.h **** 
 688:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:libchip/cmsis/core_cm3.h **** 
 691:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:libchip/cmsis/core_cm3.h **** 
 694:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:libchip/cmsis/core_cm3.h **** 
 697:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:libchip/cmsis/core_cm3.h **** 
 700:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:libchip/cmsis/core_cm3.h **** 
 703:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:libchip/cmsis/core_cm3.h **** 
 706:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:libchip/cmsis/core_cm3.h **** 
 709:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:libchip/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:libchip/cmsis/core_cm3.h **** 
 713:libchip/cmsis/core_cm3.h **** 
 714:libchip/cmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:libchip/cmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:libchip/cmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
ARM GAS  /tmp/cc1T14q7.s 			page 14


 717:libchip/cmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:libchip/cmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:libchip/cmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:libchip/cmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:libchip/cmsis/core_cm3.h **** 
 722:libchip/cmsis/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:libchip/cmsis/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:libchip/cmsis/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:libchip/cmsis/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:libchip/cmsis/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:libchip/cmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:libchip/cmsis/core_cm3.h **** 
 729:libchip/cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:libchip/cmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:libchip/cmsis/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:libchip/cmsis/core_cm3.h **** #endif
 733:libchip/cmsis/core_cm3.h **** 
 734:libchip/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:libchip/cmsis/core_cm3.h **** 
 736:libchip/cmsis/core_cm3.h **** 
 737:libchip/cmsis/core_cm3.h **** /*******************************************************************************
 738:libchip/cmsis/core_cm3.h ****  *                Hardware Abstraction Layer
 739:libchip/cmsis/core_cm3.h ****  ******************************************************************************/
 740:libchip/cmsis/core_cm3.h **** 
 741:libchip/cmsis/core_cm3.h **** #if defined ( __CC_ARM   )
 742:libchip/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:libchip/cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:libchip/cmsis/core_cm3.h **** 
 745:libchip/cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:libchip/cmsis/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:libchip/cmsis/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:libchip/cmsis/core_cm3.h **** 
 749:libchip/cmsis/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:libchip/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:libchip/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:libchip/cmsis/core_cm3.h **** 
 753:libchip/cmsis/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:libchip/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:libchip/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:libchip/cmsis/core_cm3.h **** 
 757:libchip/cmsis/core_cm3.h **** #endif
 758:libchip/cmsis/core_cm3.h **** 
 759:libchip/cmsis/core_cm3.h **** 
 760:libchip/cmsis/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:libchip/cmsis/core_cm3.h **** 
 762:libchip/cmsis/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:libchip/cmsis/core_cm3.h **** /* ARM armcc specific functions */
 764:libchip/cmsis/core_cm3.h **** 
 765:libchip/cmsis/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:libchip/cmsis/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:libchip/cmsis/core_cm3.h **** 
 768:libchip/cmsis/core_cm3.h **** #define __NOP                             __nop
 769:libchip/cmsis/core_cm3.h **** #define __WFI                             __wfi
 770:libchip/cmsis/core_cm3.h **** #define __WFE                             __wfe
 771:libchip/cmsis/core_cm3.h **** #define __SEV                             __sev
 772:libchip/cmsis/core_cm3.h **** #define __ISB()                           __isb(0)
 773:libchip/cmsis/core_cm3.h **** #define __DSB()                           __dsb(0)
ARM GAS  /tmp/cc1T14q7.s 			page 15


 774:libchip/cmsis/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:libchip/cmsis/core_cm3.h **** #define __REV                             __rev
 776:libchip/cmsis/core_cm3.h **** #define __RBIT                            __rbit
 777:libchip/cmsis/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:libchip/cmsis/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:libchip/cmsis/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:libchip/cmsis/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:libchip/cmsis/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:libchip/cmsis/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:libchip/cmsis/core_cm3.h **** 
 784:libchip/cmsis/core_cm3.h **** 
 785:libchip/cmsis/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:libchip/cmsis/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:libchip/cmsis/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:libchip/cmsis/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:libchip/cmsis/core_cm3.h **** 
 790:libchip/cmsis/core_cm3.h **** 
 791:libchip/cmsis/core_cm3.h **** /**
 792:libchip/cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:libchip/cmsis/core_cm3.h ****  *
 794:libchip/cmsis/core_cm3.h ****  * @return ProcessStackPointer
 795:libchip/cmsis/core_cm3.h ****  *
 796:libchip/cmsis/core_cm3.h ****  * Return the actual process stack pointer
 797:libchip/cmsis/core_cm3.h ****  */
 798:libchip/cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:libchip/cmsis/core_cm3.h **** 
 800:libchip/cmsis/core_cm3.h **** /**
 801:libchip/cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:libchip/cmsis/core_cm3.h ****  *
 803:libchip/cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:libchip/cmsis/core_cm3.h ****  *
 805:libchip/cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
 806:libchip/cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:libchip/cmsis/core_cm3.h ****  */
 808:libchip/cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:libchip/cmsis/core_cm3.h **** 
 810:libchip/cmsis/core_cm3.h **** /**
 811:libchip/cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:libchip/cmsis/core_cm3.h ****  *
 813:libchip/cmsis/core_cm3.h ****  * @return Main Stack Pointer
 814:libchip/cmsis/core_cm3.h ****  *
 815:libchip/cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:libchip/cmsis/core_cm3.h ****  * Cortex processor register
 817:libchip/cmsis/core_cm3.h ****  */
 818:libchip/cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:libchip/cmsis/core_cm3.h **** 
 820:libchip/cmsis/core_cm3.h **** /**
 821:libchip/cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:libchip/cmsis/core_cm3.h ****  *
 823:libchip/cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:libchip/cmsis/core_cm3.h ****  *
 825:libchip/cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
 826:libchip/cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:libchip/cmsis/core_cm3.h ****  */
 828:libchip/cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:libchip/cmsis/core_cm3.h **** 
 830:libchip/cmsis/core_cm3.h **** /**
ARM GAS  /tmp/cc1T14q7.s 			page 16


 831:libchip/cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:libchip/cmsis/core_cm3.h ****  *
 833:libchip/cmsis/core_cm3.h ****  * @param   value  value to reverse
 834:libchip/cmsis/core_cm3.h ****  * @return         reversed value
 835:libchip/cmsis/core_cm3.h ****  *
 836:libchip/cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:libchip/cmsis/core_cm3.h ****  */
 838:libchip/cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:libchip/cmsis/core_cm3.h **** 
 840:libchip/cmsis/core_cm3.h **** /**
 841:libchip/cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:libchip/cmsis/core_cm3.h ****  *
 843:libchip/cmsis/core_cm3.h ****  * @param   value  value to reverse
 844:libchip/cmsis/core_cm3.h ****  * @return         reversed value
 845:libchip/cmsis/core_cm3.h ****  *
 846:libchip/cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:libchip/cmsis/core_cm3.h ****  */
 848:libchip/cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:libchip/cmsis/core_cm3.h **** 
 850:libchip/cmsis/core_cm3.h **** 
 851:libchip/cmsis/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:libchip/cmsis/core_cm3.h **** 
 853:libchip/cmsis/core_cm3.h **** /**
 854:libchip/cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:libchip/cmsis/core_cm3.h ****  *
 856:libchip/cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:libchip/cmsis/core_cm3.h ****  */
 858:libchip/cmsis/core_cm3.h **** extern void __CLREX(void);
 859:libchip/cmsis/core_cm3.h **** 
 860:libchip/cmsis/core_cm3.h **** /**
 861:libchip/cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 862:libchip/cmsis/core_cm3.h ****  *
 863:libchip/cmsis/core_cm3.h ****  * @return BasePriority
 864:libchip/cmsis/core_cm3.h ****  *
 865:libchip/cmsis/core_cm3.h ****  * Return the content of the base priority register
 866:libchip/cmsis/core_cm3.h ****  */
 867:libchip/cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:libchip/cmsis/core_cm3.h **** 
 869:libchip/cmsis/core_cm3.h **** /**
 870:libchip/cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 871:libchip/cmsis/core_cm3.h ****  *
 872:libchip/cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 873:libchip/cmsis/core_cm3.h ****  *
 874:libchip/cmsis/core_cm3.h ****  * Set the base priority register
 875:libchip/cmsis/core_cm3.h ****  */
 876:libchip/cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:libchip/cmsis/core_cm3.h **** 
 878:libchip/cmsis/core_cm3.h **** /**
 879:libchip/cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:libchip/cmsis/core_cm3.h ****  *
 881:libchip/cmsis/core_cm3.h ****  * @return PriMask
 882:libchip/cmsis/core_cm3.h ****  *
 883:libchip/cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:libchip/cmsis/core_cm3.h ****  */
 885:libchip/cmsis/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:libchip/cmsis/core_cm3.h **** 
 887:libchip/cmsis/core_cm3.h **** /**
ARM GAS  /tmp/cc1T14q7.s 			page 17


 888:libchip/cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:libchip/cmsis/core_cm3.h ****  *
 890:libchip/cmsis/core_cm3.h ****  * @param   priMask  PriMask
 891:libchip/cmsis/core_cm3.h ****  *
 892:libchip/cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:libchip/cmsis/core_cm3.h ****  */
 894:libchip/cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:libchip/cmsis/core_cm3.h **** 
 896:libchip/cmsis/core_cm3.h **** /**
 897:libchip/cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:libchip/cmsis/core_cm3.h ****  *
 899:libchip/cmsis/core_cm3.h ****  * @return FaultMask
 900:libchip/cmsis/core_cm3.h ****  *
 901:libchip/cmsis/core_cm3.h ****  * Return the content of the fault mask register
 902:libchip/cmsis/core_cm3.h ****  */
 903:libchip/cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:libchip/cmsis/core_cm3.h **** 
 905:libchip/cmsis/core_cm3.h **** /**
 906:libchip/cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:libchip/cmsis/core_cm3.h ****  *
 908:libchip/cmsis/core_cm3.h ****  * @param  faultMask faultMask value
 909:libchip/cmsis/core_cm3.h ****  *
 910:libchip/cmsis/core_cm3.h ****  * Set the fault mask register
 911:libchip/cmsis/core_cm3.h ****  */
 912:libchip/cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:libchip/cmsis/core_cm3.h **** 
 914:libchip/cmsis/core_cm3.h **** /**
 915:libchip/cmsis/core_cm3.h ****  * @brief  Return the Control Register value
 916:libchip/cmsis/core_cm3.h ****  *
 917:libchip/cmsis/core_cm3.h ****  * @return Control value
 918:libchip/cmsis/core_cm3.h ****  *
 919:libchip/cmsis/core_cm3.h ****  * Return the content of the control register
 920:libchip/cmsis/core_cm3.h ****  */
 921:libchip/cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:libchip/cmsis/core_cm3.h **** 
 923:libchip/cmsis/core_cm3.h **** /**
 924:libchip/cmsis/core_cm3.h ****  * @brief  Set the Control Register value
 925:libchip/cmsis/core_cm3.h ****  *
 926:libchip/cmsis/core_cm3.h ****  * @param  control  Control value
 927:libchip/cmsis/core_cm3.h ****  *
 928:libchip/cmsis/core_cm3.h ****  * Set the control register
 929:libchip/cmsis/core_cm3.h ****  */
 930:libchip/cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:libchip/cmsis/core_cm3.h **** 
 932:libchip/cmsis/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:libchip/cmsis/core_cm3.h **** 
 934:libchip/cmsis/core_cm3.h **** /**
 935:libchip/cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:libchip/cmsis/core_cm3.h ****  *
 937:libchip/cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:libchip/cmsis/core_cm3.h ****  */
 939:libchip/cmsis/core_cm3.h **** #define __CLREX                           __clrex
 940:libchip/cmsis/core_cm3.h **** 
 941:libchip/cmsis/core_cm3.h **** /**
 942:libchip/cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 943:libchip/cmsis/core_cm3.h ****  *
 944:libchip/cmsis/core_cm3.h ****  * @return BasePriority
ARM GAS  /tmp/cc1T14q7.s 			page 18


 945:libchip/cmsis/core_cm3.h ****  *
 946:libchip/cmsis/core_cm3.h ****  * Return the content of the base priority register
 947:libchip/cmsis/core_cm3.h ****  */
 948:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:libchip/cmsis/core_cm3.h **** {
 950:libchip/cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:libchip/cmsis/core_cm3.h ****   return(__regBasePri);
 952:libchip/cmsis/core_cm3.h **** }
 953:libchip/cmsis/core_cm3.h **** 
 954:libchip/cmsis/core_cm3.h **** /**
 955:libchip/cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 956:libchip/cmsis/core_cm3.h ****  *
 957:libchip/cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 958:libchip/cmsis/core_cm3.h ****  *
 959:libchip/cmsis/core_cm3.h ****  * Set the base priority register
 960:libchip/cmsis/core_cm3.h ****  */
 961:libchip/cmsis/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:libchip/cmsis/core_cm3.h **** {
 963:libchip/cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:libchip/cmsis/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:libchip/cmsis/core_cm3.h **** }
 966:libchip/cmsis/core_cm3.h **** 
 967:libchip/cmsis/core_cm3.h **** /**
 968:libchip/cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:libchip/cmsis/core_cm3.h ****  *
 970:libchip/cmsis/core_cm3.h ****  * @return PriMask
 971:libchip/cmsis/core_cm3.h ****  *
 972:libchip/cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:libchip/cmsis/core_cm3.h ****  */
 974:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:libchip/cmsis/core_cm3.h **** {
 976:libchip/cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:libchip/cmsis/core_cm3.h ****   return(__regPriMask);
 978:libchip/cmsis/core_cm3.h **** }
 979:libchip/cmsis/core_cm3.h **** 
 980:libchip/cmsis/core_cm3.h **** /**
 981:libchip/cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:libchip/cmsis/core_cm3.h ****  *
 983:libchip/cmsis/core_cm3.h ****  * @param  priMask  PriMask
 984:libchip/cmsis/core_cm3.h ****  *
 985:libchip/cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:libchip/cmsis/core_cm3.h ****  */
 987:libchip/cmsis/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:libchip/cmsis/core_cm3.h **** {
 989:libchip/cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:libchip/cmsis/core_cm3.h ****   __regPriMask = (priMask);
 991:libchip/cmsis/core_cm3.h **** }
 992:libchip/cmsis/core_cm3.h **** 
 993:libchip/cmsis/core_cm3.h **** /**
 994:libchip/cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:libchip/cmsis/core_cm3.h ****  *
 996:libchip/cmsis/core_cm3.h ****  * @return FaultMask
 997:libchip/cmsis/core_cm3.h ****  *
 998:libchip/cmsis/core_cm3.h ****  * Return the content of the fault mask register
 999:libchip/cmsis/core_cm3.h ****  */
1000:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:libchip/cmsis/core_cm3.h **** {
ARM GAS  /tmp/cc1T14q7.s 			page 19


1002:libchip/cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:libchip/cmsis/core_cm3.h ****   return(__regFaultMask);
1004:libchip/cmsis/core_cm3.h **** }
1005:libchip/cmsis/core_cm3.h **** 
1006:libchip/cmsis/core_cm3.h **** /**
1007:libchip/cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:libchip/cmsis/core_cm3.h ****  *
1009:libchip/cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1010:libchip/cmsis/core_cm3.h ****  *
1011:libchip/cmsis/core_cm3.h ****  * Set the fault mask register
1012:libchip/cmsis/core_cm3.h ****  */
1013:libchip/cmsis/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:libchip/cmsis/core_cm3.h **** {
1015:libchip/cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:libchip/cmsis/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:libchip/cmsis/core_cm3.h **** }
1018:libchip/cmsis/core_cm3.h **** 
1019:libchip/cmsis/core_cm3.h **** /**
1020:libchip/cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1021:libchip/cmsis/core_cm3.h ****  *
1022:libchip/cmsis/core_cm3.h ****  * @return Control value
1023:libchip/cmsis/core_cm3.h ****  *
1024:libchip/cmsis/core_cm3.h ****  * Return the content of the control register
1025:libchip/cmsis/core_cm3.h ****  */
1026:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:libchip/cmsis/core_cm3.h **** {
1028:libchip/cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:libchip/cmsis/core_cm3.h ****   return(__regControl);
1030:libchip/cmsis/core_cm3.h **** }
1031:libchip/cmsis/core_cm3.h **** 
1032:libchip/cmsis/core_cm3.h **** /**
1033:libchip/cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1034:libchip/cmsis/core_cm3.h ****  *
1035:libchip/cmsis/core_cm3.h ****  * @param  control  Control value
1036:libchip/cmsis/core_cm3.h ****  *
1037:libchip/cmsis/core_cm3.h ****  * Set the control register
1038:libchip/cmsis/core_cm3.h ****  */
1039:libchip/cmsis/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:libchip/cmsis/core_cm3.h **** {
1041:libchip/cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:libchip/cmsis/core_cm3.h ****   __regControl = control;
1043:libchip/cmsis/core_cm3.h **** }
1044:libchip/cmsis/core_cm3.h **** 
1045:libchip/cmsis/core_cm3.h **** #endif /* __ARMCC_VERSION  */
1046:libchip/cmsis/core_cm3.h **** 
1047:libchip/cmsis/core_cm3.h **** 
1048:libchip/cmsis/core_cm3.h **** 
1049:libchip/cmsis/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:libchip/cmsis/core_cm3.h **** /* IAR iccarm specific functions */
1051:libchip/cmsis/core_cm3.h **** 
1052:libchip/cmsis/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:libchip/cmsis/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:libchip/cmsis/core_cm3.h **** 
1055:libchip/cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq( void )   { __ASM ("cpsie f"); }
1056:libchip/cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq( void )  { __ASM ("cpsid f"); }
1057:libchip/cmsis/core_cm3.h **** 
1058:libchip/cmsis/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
ARM GAS  /tmp/cc1T14q7.s 			page 20


1059:libchip/cmsis/core_cm3.h **** static __INLINE  void __WFI( void )               { __ASM ("wfi"); }
1060:libchip/cmsis/core_cm3.h **** static __INLINE  void __WFE( void )               { __ASM ("wfe"); }
1061:libchip/cmsis/core_cm3.h **** static __INLINE  void __SEV( void )               { __ASM ("sev"); }
1062:libchip/cmsis/core_cm3.h **** static __INLINE  void __CLREX( void )             { __ASM ("clrex"); }
1063:libchip/cmsis/core_cm3.h **** 
1064:libchip/cmsis/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:libchip/cmsis/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:libchip/cmsis/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:libchip/cmsis/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:libchip/cmsis/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:libchip/cmsis/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:libchip/cmsis/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:libchip/cmsis/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:libchip/cmsis/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:libchip/cmsis/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:libchip/cmsis/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:libchip/cmsis/core_cm3.h **** 
1076:libchip/cmsis/core_cm3.h **** 
1077:libchip/cmsis/core_cm3.h **** /**
1078:libchip/cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:libchip/cmsis/core_cm3.h ****  *
1080:libchip/cmsis/core_cm3.h ****  * @return ProcessStackPointer
1081:libchip/cmsis/core_cm3.h ****  *
1082:libchip/cmsis/core_cm3.h ****  * Return the actual process stack pointer
1083:libchip/cmsis/core_cm3.h ****  */
1084:libchip/cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:libchip/cmsis/core_cm3.h **** 
1086:libchip/cmsis/core_cm3.h **** /**
1087:libchip/cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:libchip/cmsis/core_cm3.h ****  *
1089:libchip/cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:libchip/cmsis/core_cm3.h ****  *
1091:libchip/cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1092:libchip/cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:libchip/cmsis/core_cm3.h ****  */
1094:libchip/cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:libchip/cmsis/core_cm3.h **** 
1096:libchip/cmsis/core_cm3.h **** /**
1097:libchip/cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:libchip/cmsis/core_cm3.h ****  *
1099:libchip/cmsis/core_cm3.h ****  * @return Main Stack Pointer
1100:libchip/cmsis/core_cm3.h ****  *
1101:libchip/cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:libchip/cmsis/core_cm3.h ****  * Cortex processor register
1103:libchip/cmsis/core_cm3.h ****  */
1104:libchip/cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:libchip/cmsis/core_cm3.h **** 
1106:libchip/cmsis/core_cm3.h **** /**
1107:libchip/cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:libchip/cmsis/core_cm3.h ****  *
1109:libchip/cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:libchip/cmsis/core_cm3.h ****  *
1111:libchip/cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1112:libchip/cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:libchip/cmsis/core_cm3.h ****  */
1114:libchip/cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:libchip/cmsis/core_cm3.h **** 
ARM GAS  /tmp/cc1T14q7.s 			page 21


1116:libchip/cmsis/core_cm3.h **** /**
1117:libchip/cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:libchip/cmsis/core_cm3.h ****  *
1119:libchip/cmsis/core_cm3.h ****  * @param  value  value to reverse
1120:libchip/cmsis/core_cm3.h ****  * @return        reversed value
1121:libchip/cmsis/core_cm3.h ****  *
1122:libchip/cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:libchip/cmsis/core_cm3.h ****  */
1124:libchip/cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:libchip/cmsis/core_cm3.h **** 
1126:libchip/cmsis/core_cm3.h **** /**
1127:libchip/cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1128:libchip/cmsis/core_cm3.h ****  *
1129:libchip/cmsis/core_cm3.h ****  * @param  value  value to reverse
1130:libchip/cmsis/core_cm3.h ****  * @return        reversed value
1131:libchip/cmsis/core_cm3.h ****  *
1132:libchip/cmsis/core_cm3.h ****  * Reverse bit order of value
1133:libchip/cmsis/core_cm3.h ****  */
1134:libchip/cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:libchip/cmsis/core_cm3.h **** 
1136:libchip/cmsis/core_cm3.h **** /**
1137:libchip/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:libchip/cmsis/core_cm3.h ****  *
1139:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1140:libchip/cmsis/core_cm3.h ****  * @return        value of (*address)
1141:libchip/cmsis/core_cm3.h ****  *
1142:libchip/cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:libchip/cmsis/core_cm3.h ****  */
1144:libchip/cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:libchip/cmsis/core_cm3.h **** 
1146:libchip/cmsis/core_cm3.h **** /**
1147:libchip/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:libchip/cmsis/core_cm3.h ****  *
1149:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1150:libchip/cmsis/core_cm3.h ****  * @return        value of (*address)
1151:libchip/cmsis/core_cm3.h ****  *
1152:libchip/cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:libchip/cmsis/core_cm3.h ****  */
1154:libchip/cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:libchip/cmsis/core_cm3.h **** 
1156:libchip/cmsis/core_cm3.h **** /**
1157:libchip/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:libchip/cmsis/core_cm3.h ****  *
1159:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1160:libchip/cmsis/core_cm3.h ****  * @return        value of (*address)
1161:libchip/cmsis/core_cm3.h ****  *
1162:libchip/cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:libchip/cmsis/core_cm3.h ****  */
1164:libchip/cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:libchip/cmsis/core_cm3.h **** 
1166:libchip/cmsis/core_cm3.h **** /**
1167:libchip/cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:libchip/cmsis/core_cm3.h ****  *
1169:libchip/cmsis/core_cm3.h ****  * @param  value  value to store
1170:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1171:libchip/cmsis/core_cm3.h ****  * @return        successful / failed
1172:libchip/cmsis/core_cm3.h ****  *
ARM GAS  /tmp/cc1T14q7.s 			page 22


1173:libchip/cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:libchip/cmsis/core_cm3.h ****  */
1175:libchip/cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:libchip/cmsis/core_cm3.h **** 
1177:libchip/cmsis/core_cm3.h **** /**
1178:libchip/cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:libchip/cmsis/core_cm3.h ****  *
1180:libchip/cmsis/core_cm3.h ****  * @param  value  value to store
1181:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1182:libchip/cmsis/core_cm3.h ****  * @return        successful / failed
1183:libchip/cmsis/core_cm3.h ****  *
1184:libchip/cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:libchip/cmsis/core_cm3.h ****  */
1186:libchip/cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:libchip/cmsis/core_cm3.h **** 
1188:libchip/cmsis/core_cm3.h **** /**
1189:libchip/cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:libchip/cmsis/core_cm3.h ****  *
1191:libchip/cmsis/core_cm3.h ****  * @param  value  value to store
1192:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1193:libchip/cmsis/core_cm3.h ****  * @return        successful / failed
1194:libchip/cmsis/core_cm3.h ****  *
1195:libchip/cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:libchip/cmsis/core_cm3.h ****  */
1197:libchip/cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:libchip/cmsis/core_cm3.h **** 
1199:libchip/cmsis/core_cm3.h **** 
1200:libchip/cmsis/core_cm3.h **** 
1201:libchip/cmsis/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:libchip/cmsis/core_cm3.h **** /* GNU gcc specific functions */
1203:libchip/cmsis/core_cm3.h **** 
1204:libchip/cmsis/core_cm3.h **** static __INLINE void __enable_irq(void)               { __ASM volatile ("cpsie i"); }
1205:libchip/cmsis/core_cm3.h **** static __INLINE void __disable_irq(void)              { __ASM volatile ("cpsid i"); }
1206:libchip/cmsis/core_cm3.h **** 
1207:libchip/cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq(void)         { __ASM volatile ("cpsie f"); }
1208:libchip/cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq(void)        { __ASM volatile ("cpsid f"); }
1209:libchip/cmsis/core_cm3.h **** 
1210:libchip/cmsis/core_cm3.h **** static __INLINE void __NOP(void)                      { __ASM volatile ("nop"); }
1211:libchip/cmsis/core_cm3.h **** static __INLINE void __WFI(void)                      { __ASM volatile ("wfi"); }
  26              		.loc 1 1211 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
  38              		.loc 1 1211 0
  39              	@ 1211 "libchip/cmsis/core_cm3.h" 1
  40 0004 30BF     		wfi
  41              	@ 0 "" 2
  42              		.thumb
  43 0006 BD46     		mov	sp, r7
ARM GAS  /tmp/cc1T14q7.s 			page 23


  44 0008 80BC     		pop	{r7}
  45 000a 7047     		bx	lr
  46              		.cfi_endproc
  47              	.LFE5:
  48              		.size	__WFI, .-__WFI
  49              		.section	.text.NVIC_SetPriority,"ax",%progbits
  50              		.align	2
  51              		.thumb
  52              		.thumb_func
  53              		.type	NVIC_SetPriority, %function
  54              	NVIC_SetPriority:
  55              	.LFB20:
1212:libchip/cmsis/core_cm3.h **** static __INLINE void __WFE(void)                      { __ASM volatile ("wfe"); }
1213:libchip/cmsis/core_cm3.h **** static __INLINE void __SEV(void)                      { __ASM volatile ("sev"); }
1214:libchip/cmsis/core_cm3.h **** static __INLINE void __ISB(void)                      { __ASM volatile ("isb"); }
1215:libchip/cmsis/core_cm3.h **** static __INLINE void __DSB(void)                      { __ASM volatile ("dsb"); }
1216:libchip/cmsis/core_cm3.h **** static __INLINE void __DMB(void)                      { __ASM volatile ("dmb"); }
1217:libchip/cmsis/core_cm3.h **** static __INLINE void __CLREX(void)                    { __ASM volatile ("clrex"); }
1218:libchip/cmsis/core_cm3.h **** 
1219:libchip/cmsis/core_cm3.h **** 
1220:libchip/cmsis/core_cm3.h **** /**
1221:libchip/cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:libchip/cmsis/core_cm3.h ****  *
1223:libchip/cmsis/core_cm3.h ****  * @return ProcessStackPointer
1224:libchip/cmsis/core_cm3.h ****  *
1225:libchip/cmsis/core_cm3.h ****  * Return the actual process stack pointer
1226:libchip/cmsis/core_cm3.h ****  */
1227:libchip/cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:libchip/cmsis/core_cm3.h **** 
1229:libchip/cmsis/core_cm3.h **** /**
1230:libchip/cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:libchip/cmsis/core_cm3.h ****  *
1232:libchip/cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:libchip/cmsis/core_cm3.h ****  *
1234:libchip/cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1235:libchip/cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:libchip/cmsis/core_cm3.h ****  */
1237:libchip/cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:libchip/cmsis/core_cm3.h **** 
1239:libchip/cmsis/core_cm3.h **** /**
1240:libchip/cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:libchip/cmsis/core_cm3.h ****  *
1242:libchip/cmsis/core_cm3.h ****  * @return Main Stack Pointer
1243:libchip/cmsis/core_cm3.h ****  *
1244:libchip/cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:libchip/cmsis/core_cm3.h ****  * Cortex processor register
1246:libchip/cmsis/core_cm3.h ****  */
1247:libchip/cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:libchip/cmsis/core_cm3.h **** 
1249:libchip/cmsis/core_cm3.h **** /**
1250:libchip/cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:libchip/cmsis/core_cm3.h ****  *
1252:libchip/cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:libchip/cmsis/core_cm3.h ****  *
1254:libchip/cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1255:libchip/cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:libchip/cmsis/core_cm3.h ****  */
ARM GAS  /tmp/cc1T14q7.s 			page 24


1257:libchip/cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:libchip/cmsis/core_cm3.h **** 
1259:libchip/cmsis/core_cm3.h **** /**
1260:libchip/cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
1261:libchip/cmsis/core_cm3.h ****  *
1262:libchip/cmsis/core_cm3.h ****  * @return BasePriority
1263:libchip/cmsis/core_cm3.h ****  *
1264:libchip/cmsis/core_cm3.h ****  * Return the content of the base priority register
1265:libchip/cmsis/core_cm3.h ****  */
1266:libchip/cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:libchip/cmsis/core_cm3.h **** 
1268:libchip/cmsis/core_cm3.h **** /**
1269:libchip/cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
1270:libchip/cmsis/core_cm3.h ****  *
1271:libchip/cmsis/core_cm3.h ****  * @param  basePri  BasePriority
1272:libchip/cmsis/core_cm3.h ****  *
1273:libchip/cmsis/core_cm3.h ****  * Set the base priority register
1274:libchip/cmsis/core_cm3.h ****  */
1275:libchip/cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:libchip/cmsis/core_cm3.h **** 
1277:libchip/cmsis/core_cm3.h **** /**
1278:libchip/cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:libchip/cmsis/core_cm3.h ****  *
1280:libchip/cmsis/core_cm3.h ****  * @return PriMask
1281:libchip/cmsis/core_cm3.h ****  *
1282:libchip/cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:libchip/cmsis/core_cm3.h ****  */
1284:libchip/cmsis/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:libchip/cmsis/core_cm3.h **** 
1286:libchip/cmsis/core_cm3.h **** /**
1287:libchip/cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:libchip/cmsis/core_cm3.h ****  *
1289:libchip/cmsis/core_cm3.h ****  * @param  priMask  PriMask
1290:libchip/cmsis/core_cm3.h ****  *
1291:libchip/cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:libchip/cmsis/core_cm3.h ****  */
1293:libchip/cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:libchip/cmsis/core_cm3.h **** 
1295:libchip/cmsis/core_cm3.h **** /**
1296:libchip/cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:libchip/cmsis/core_cm3.h ****  *
1298:libchip/cmsis/core_cm3.h ****  * @return FaultMask
1299:libchip/cmsis/core_cm3.h ****  *
1300:libchip/cmsis/core_cm3.h ****  * Return the content of the fault mask register
1301:libchip/cmsis/core_cm3.h ****  */
1302:libchip/cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:libchip/cmsis/core_cm3.h **** 
1304:libchip/cmsis/core_cm3.h **** /**
1305:libchip/cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:libchip/cmsis/core_cm3.h ****  *
1307:libchip/cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1308:libchip/cmsis/core_cm3.h ****  *
1309:libchip/cmsis/core_cm3.h ****  * Set the fault mask register
1310:libchip/cmsis/core_cm3.h ****  */
1311:libchip/cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:libchip/cmsis/core_cm3.h **** 
1313:libchip/cmsis/core_cm3.h **** /**
ARM GAS  /tmp/cc1T14q7.s 			page 25


1314:libchip/cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1315:libchip/cmsis/core_cm3.h **** *
1316:libchip/cmsis/core_cm3.h **** *  @return Control value
1317:libchip/cmsis/core_cm3.h ****  *
1318:libchip/cmsis/core_cm3.h ****  * Return the content of the control register
1319:libchip/cmsis/core_cm3.h ****  */
1320:libchip/cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:libchip/cmsis/core_cm3.h **** 
1322:libchip/cmsis/core_cm3.h **** /**
1323:libchip/cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1324:libchip/cmsis/core_cm3.h ****  *
1325:libchip/cmsis/core_cm3.h ****  * @param  control  Control value
1326:libchip/cmsis/core_cm3.h ****  *
1327:libchip/cmsis/core_cm3.h ****  * Set the control register
1328:libchip/cmsis/core_cm3.h ****  */
1329:libchip/cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:libchip/cmsis/core_cm3.h **** 
1331:libchip/cmsis/core_cm3.h **** /**
1332:libchip/cmsis/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:libchip/cmsis/core_cm3.h ****  *
1334:libchip/cmsis/core_cm3.h ****  * @param  value  value to reverse
1335:libchip/cmsis/core_cm3.h ****  * @return        reversed value
1336:libchip/cmsis/core_cm3.h ****  *
1337:libchip/cmsis/core_cm3.h ****  * Reverse byte order in integer value
1338:libchip/cmsis/core_cm3.h ****  */
1339:libchip/cmsis/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:libchip/cmsis/core_cm3.h **** 
1341:libchip/cmsis/core_cm3.h **** /**
1342:libchip/cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:libchip/cmsis/core_cm3.h ****  *
1344:libchip/cmsis/core_cm3.h ****  * @param  value  value to reverse
1345:libchip/cmsis/core_cm3.h ****  * @return        reversed value
1346:libchip/cmsis/core_cm3.h ****  *
1347:libchip/cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:libchip/cmsis/core_cm3.h ****  */
1349:libchip/cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:libchip/cmsis/core_cm3.h **** 
1351:libchip/cmsis/core_cm3.h **** /**
1352:libchip/cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:libchip/cmsis/core_cm3.h ****  *
1354:libchip/cmsis/core_cm3.h ****  * @param  value  value to reverse
1355:libchip/cmsis/core_cm3.h ****  * @return        reversed value
1356:libchip/cmsis/core_cm3.h ****  *
1357:libchip/cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:libchip/cmsis/core_cm3.h ****  */
1359:libchip/cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:libchip/cmsis/core_cm3.h **** 
1361:libchip/cmsis/core_cm3.h **** /**
1362:libchip/cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1363:libchip/cmsis/core_cm3.h ****  *
1364:libchip/cmsis/core_cm3.h ****  * @param  value  value to reverse
1365:libchip/cmsis/core_cm3.h ****  * @return        reversed value
1366:libchip/cmsis/core_cm3.h ****  *
1367:libchip/cmsis/core_cm3.h ****  * Reverse bit order of value
1368:libchip/cmsis/core_cm3.h ****  */
1369:libchip/cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:libchip/cmsis/core_cm3.h **** 
ARM GAS  /tmp/cc1T14q7.s 			page 26


1371:libchip/cmsis/core_cm3.h **** /**
1372:libchip/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:libchip/cmsis/core_cm3.h ****  *
1374:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1375:libchip/cmsis/core_cm3.h ****  * @return        value of (*address)
1376:libchip/cmsis/core_cm3.h ****  *
1377:libchip/cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:libchip/cmsis/core_cm3.h ****  */
1379:libchip/cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:libchip/cmsis/core_cm3.h **** 
1381:libchip/cmsis/core_cm3.h **** /**
1382:libchip/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:libchip/cmsis/core_cm3.h ****  *
1384:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1385:libchip/cmsis/core_cm3.h ****  * @return        value of (*address)
1386:libchip/cmsis/core_cm3.h ****  *
1387:libchip/cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:libchip/cmsis/core_cm3.h ****  */
1389:libchip/cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:libchip/cmsis/core_cm3.h **** 
1391:libchip/cmsis/core_cm3.h **** /**
1392:libchip/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:libchip/cmsis/core_cm3.h ****  *
1394:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1395:libchip/cmsis/core_cm3.h ****  * @return        value of (*address)
1396:libchip/cmsis/core_cm3.h ****  *
1397:libchip/cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:libchip/cmsis/core_cm3.h ****  */
1399:libchip/cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:libchip/cmsis/core_cm3.h **** 
1401:libchip/cmsis/core_cm3.h **** /**
1402:libchip/cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:libchip/cmsis/core_cm3.h ****  *
1404:libchip/cmsis/core_cm3.h ****  * @param  value  value to store
1405:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1406:libchip/cmsis/core_cm3.h ****  * @return        successful / failed
1407:libchip/cmsis/core_cm3.h ****  *
1408:libchip/cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:libchip/cmsis/core_cm3.h ****  */
1410:libchip/cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:libchip/cmsis/core_cm3.h **** 
1412:libchip/cmsis/core_cm3.h **** /**
1413:libchip/cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:libchip/cmsis/core_cm3.h ****  *
1415:libchip/cmsis/core_cm3.h ****  * @param  value  value to store
1416:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1417:libchip/cmsis/core_cm3.h ****  * @return        successful / failed
1418:libchip/cmsis/core_cm3.h ****  *
1419:libchip/cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:libchip/cmsis/core_cm3.h ****  */
1421:libchip/cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:libchip/cmsis/core_cm3.h **** 
1423:libchip/cmsis/core_cm3.h **** /**
1424:libchip/cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:libchip/cmsis/core_cm3.h ****  *
1426:libchip/cmsis/core_cm3.h ****  * @param  value  value to store
1427:libchip/cmsis/core_cm3.h ****  * @param  *addr  address pointer
ARM GAS  /tmp/cc1T14q7.s 			page 27


1428:libchip/cmsis/core_cm3.h ****  * @return        successful / failed
1429:libchip/cmsis/core_cm3.h ****  *
1430:libchip/cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:libchip/cmsis/core_cm3.h ****  */
1432:libchip/cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:libchip/cmsis/core_cm3.h **** 
1434:libchip/cmsis/core_cm3.h **** 
1435:libchip/cmsis/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:libchip/cmsis/core_cm3.h **** /* TASKING carm specific functions */
1437:libchip/cmsis/core_cm3.h **** 
1438:libchip/cmsis/core_cm3.h **** /*
1439:libchip/cmsis/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:libchip/cmsis/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:libchip/cmsis/core_cm3.h ****  * Including the CMSIS ones.
1442:libchip/cmsis/core_cm3.h ****  */
1443:libchip/cmsis/core_cm3.h **** 
1444:libchip/cmsis/core_cm3.h **** #endif
1445:libchip/cmsis/core_cm3.h **** 
1446:libchip/cmsis/core_cm3.h **** 
1447:libchip/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:libchip/cmsis/core_cm3.h ****   Core  Function Interface containing:
1449:libchip/cmsis/core_cm3.h ****   - Core NVIC Functions
1450:libchip/cmsis/core_cm3.h ****   - Core SysTick Functions
1451:libchip/cmsis/core_cm3.h ****   - Core Reset Functions
1452:libchip/cmsis/core_cm3.h **** */
1453:libchip/cmsis/core_cm3.h **** /*@{*/
1454:libchip/cmsis/core_cm3.h **** 
1455:libchip/cmsis/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:libchip/cmsis/core_cm3.h **** 
1457:libchip/cmsis/core_cm3.h **** /**
1458:libchip/cmsis/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:libchip/cmsis/core_cm3.h ****  *
1460:libchip/cmsis/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:libchip/cmsis/core_cm3.h ****  *
1462:libchip/cmsis/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:libchip/cmsis/core_cm3.h ****  * The parameter priority_grouping is assigned to the field
1464:libchip/cmsis/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:libchip/cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:libchip/cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:libchip/cmsis/core_cm3.h ****  */
1468:libchip/cmsis/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:libchip/cmsis/core_cm3.h **** {
1470:libchip/cmsis/core_cm3.h ****   uint32_t reg_value;
1471:libchip/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:libchip/cmsis/core_cm3.h **** 
1473:libchip/cmsis/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:libchip/cmsis/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:libchip/cmsis/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:libchip/cmsis/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1477:libchip/cmsis/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:libchip/cmsis/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:libchip/cmsis/core_cm3.h **** }
1480:libchip/cmsis/core_cm3.h **** 
1481:libchip/cmsis/core_cm3.h **** /**
1482:libchip/cmsis/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:libchip/cmsis/core_cm3.h ****  *
1484:libchip/cmsis/core_cm3.h ****  * @return priority grouping field
ARM GAS  /tmp/cc1T14q7.s 			page 28


1485:libchip/cmsis/core_cm3.h ****  *
1486:libchip/cmsis/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:libchip/cmsis/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:libchip/cmsis/core_cm3.h ****  */
1489:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:libchip/cmsis/core_cm3.h **** {
1491:libchip/cmsis/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:libchip/cmsis/core_cm3.h **** }
1493:libchip/cmsis/core_cm3.h **** 
1494:libchip/cmsis/core_cm3.h **** /**
1495:libchip/cmsis/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:libchip/cmsis/core_cm3.h ****  *
1497:libchip/cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:libchip/cmsis/core_cm3.h ****  *
1499:libchip/cmsis/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:libchip/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:libchip/cmsis/core_cm3.h ****  */
1502:libchip/cmsis/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:libchip/cmsis/core_cm3.h **** {
1504:libchip/cmsis/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:libchip/cmsis/core_cm3.h **** }
1506:libchip/cmsis/core_cm3.h **** 
1507:libchip/cmsis/core_cm3.h **** /**
1508:libchip/cmsis/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:libchip/cmsis/core_cm3.h ****  *
1510:libchip/cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:libchip/cmsis/core_cm3.h ****  *
1512:libchip/cmsis/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:libchip/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:libchip/cmsis/core_cm3.h ****  */
1515:libchip/cmsis/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:libchip/cmsis/core_cm3.h **** {
1517:libchip/cmsis/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:libchip/cmsis/core_cm3.h **** }
1519:libchip/cmsis/core_cm3.h **** 
1520:libchip/cmsis/core_cm3.h **** /**
1521:libchip/cmsis/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:libchip/cmsis/core_cm3.h ****  *
1523:libchip/cmsis/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:libchip/cmsis/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:libchip/cmsis/core_cm3.h ****  *
1526:libchip/cmsis/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending,
1527:libchip/cmsis/core_cm3.h ****  * otherwise it returns 0
1528:libchip/cmsis/core_cm3.h ****  */
1529:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:libchip/cmsis/core_cm3.h **** {
1531:libchip/cmsis/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:libchip/cmsis/core_cm3.h **** }
1533:libchip/cmsis/core_cm3.h **** 
1534:libchip/cmsis/core_cm3.h **** /**
1535:libchip/cmsis/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:libchip/cmsis/core_cm3.h ****  *
1537:libchip/cmsis/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:libchip/cmsis/core_cm3.h ****  *
1539:libchip/cmsis/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:libchip/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:libchip/cmsis/core_cm3.h ****  */
ARM GAS  /tmp/cc1T14q7.s 			page 29


1542:libchip/cmsis/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:libchip/cmsis/core_cm3.h **** {
1544:libchip/cmsis/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:libchip/cmsis/core_cm3.h **** }
1546:libchip/cmsis/core_cm3.h **** 
1547:libchip/cmsis/core_cm3.h **** /**
1548:libchip/cmsis/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:libchip/cmsis/core_cm3.h ****  *
1550:libchip/cmsis/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:libchip/cmsis/core_cm3.h ****  *
1552:libchip/cmsis/core_cm3.h ****  * Clear the pending bit for the specified interrupt.
1553:libchip/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:libchip/cmsis/core_cm3.h ****  */
1555:libchip/cmsis/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:libchip/cmsis/core_cm3.h **** {
1557:libchip/cmsis/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:libchip/cmsis/core_cm3.h **** }
1559:libchip/cmsis/core_cm3.h **** 
1560:libchip/cmsis/core_cm3.h **** /**
1561:libchip/cmsis/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:libchip/cmsis/core_cm3.h ****  *
1563:libchip/cmsis/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:libchip/cmsis/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:libchip/cmsis/core_cm3.h ****  *
1566:libchip/cmsis/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active,
1567:libchip/cmsis/core_cm3.h ****  * otherwise it returns 0.
1568:libchip/cmsis/core_cm3.h ****  */
1569:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:libchip/cmsis/core_cm3.h **** {
1571:libchip/cmsis/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:libchip/cmsis/core_cm3.h **** }
1573:libchip/cmsis/core_cm3.h **** 
1574:libchip/cmsis/core_cm3.h **** /**
1575:libchip/cmsis/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:libchip/cmsis/core_cm3.h ****  *
1577:libchip/cmsis/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:libchip/cmsis/core_cm3.h ****  * @param  priority  The priority to set
1579:libchip/cmsis/core_cm3.h ****  *
1580:libchip/cmsis/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt
1581:libchip/cmsis/core_cm3.h ****  * number can be positive to specify an external (device specific)
1582:libchip/cmsis/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:libchip/cmsis/core_cm3.h ****  *
1584:libchip/cmsis/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:libchip/cmsis/core_cm3.h ****  */
1586:libchip/cmsis/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:libchip/cmsis/core_cm3.h **** {
  56              		.loc 1 1587 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 8
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              	.LCFI2:
  63              		.cfi_def_cfa_offset 4
  64              		.cfi_offset 7, -4
  65 0002 83B0     		sub	sp, sp, #12
  66              	.LCFI3:
ARM GAS  /tmp/cc1T14q7.s 			page 30


  67              		.cfi_def_cfa_offset 16
  68 0004 00AF     		add	r7, sp, #0
  69              	.LCFI4:
  70              		.cfi_def_cfa_register 7
  71 0006 0346     		mov	r3, r0
  72 0008 3960     		str	r1, [r7, #0]
  73 000a FB71     		strb	r3, [r7, #7]
1588:libchip/cmsis/core_cm3.h ****   if(IRQn < 0) {
  74              		.loc 1 1588 0
  75 000c 97F90730 		ldrsb	r3, [r7, #7]
  76 0010 002B     		cmp	r3, #0
  77 0012 10DA     		bge	.L3
1589:libchip/cmsis/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  78              		.loc 1 1589 0
  79 0014 4FF46D43 		mov	r3, #60672
  80 0018 CEF20003 		movt	r3, 57344
  81 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  82 001e 02F00F02 		and	r2, r2, #15
  83 0022 A2F10401 		sub	r1, r2, #4
  84 0026 3A68     		ldr	r2, [r7, #0]
  85 0028 D2B2     		uxtb	r2, r2
  86 002a 4FEA0212 		lsl	r2, r2, #4
  87 002e D2B2     		uxtb	r2, r2
  88 0030 5B18     		adds	r3, r3, r1
  89 0032 1A76     		strb	r2, [r3, #24]
  90 0034 0DE0     		b	.L2
  91              	.L3:
1590:libchip/cmsis/core_cm3.h ****   else {
1591:libchip/cmsis/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  92              		.loc 1 1591 0
  93 0036 4FF46143 		mov	r3, #57600
  94 003a CEF20003 		movt	r3, 57344
  95 003e 97F90710 		ldrsb	r1, [r7, #7]
  96 0042 3A68     		ldr	r2, [r7, #0]
  97 0044 D2B2     		uxtb	r2, r2
  98 0046 4FEA0212 		lsl	r2, r2, #4
  99 004a D2B2     		uxtb	r2, r2
 100 004c 5B18     		adds	r3, r3, r1
 101 004e 83F80023 		strb	r2, [r3, #768]
 102              	.L2:
1592:libchip/cmsis/core_cm3.h **** }
 103              		.loc 1 1592 0
 104 0052 07F10C07 		add	r7, r7, #12
 105 0056 BD46     		mov	sp, r7
 106 0058 80BC     		pop	{r7}
 107 005a 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE20:
 110              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 111              		.section	.text.SysTick_Config,"ax",%progbits
 112              		.align	2
 113              		.thumb
 114              		.thumb_func
 115              		.type	SysTick_Config, %function
 116              	SysTick_Config:
 117              	.LFB24:
1593:libchip/cmsis/core_cm3.h **** 
ARM GAS  /tmp/cc1T14q7.s 			page 31


1594:libchip/cmsis/core_cm3.h **** /**
1595:libchip/cmsis/core_cm3.h ****  * @brief  Read the priority for an interrupt
1596:libchip/cmsis/core_cm3.h ****  *
1597:libchip/cmsis/core_cm3.h ****  * @param  IRQn      The number of the interrupt for get priority
1598:libchip/cmsis/core_cm3.h ****  * @return           The priority for the interrupt
1599:libchip/cmsis/core_cm3.h ****  *
1600:libchip/cmsis/core_cm3.h ****  * Read the priority for the specified interrupt. The interrupt
1601:libchip/cmsis/core_cm3.h ****  * number can be positive to specify an external (device specific)
1602:libchip/cmsis/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1603:libchip/cmsis/core_cm3.h ****  *
1604:libchip/cmsis/core_cm3.h ****  * The returned priority value is automatically aligned to the implemented
1605:libchip/cmsis/core_cm3.h ****  * priority bits of the microcontroller.
1606:libchip/cmsis/core_cm3.h ****  *
1607:libchip/cmsis/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1608:libchip/cmsis/core_cm3.h ****  */
1609:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1610:libchip/cmsis/core_cm3.h **** {
1611:libchip/cmsis/core_cm3.h **** 
1612:libchip/cmsis/core_cm3.h ****   if(IRQn < 0) {
1613:libchip/cmsis/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1614:libchip/cmsis/core_cm3.h ****   else {
1615:libchip/cmsis/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1616:libchip/cmsis/core_cm3.h **** }
1617:libchip/cmsis/core_cm3.h **** 
1618:libchip/cmsis/core_cm3.h **** 
1619:libchip/cmsis/core_cm3.h **** /**
1620:libchip/cmsis/core_cm3.h ****  * @brief  Encode the priority for an interrupt
1621:libchip/cmsis/core_cm3.h ****  *
1622:libchip/cmsis/core_cm3.h ****  * @param  PriorityGroup    The used priority group
1623:libchip/cmsis/core_cm3.h ****  * @param  PreemptPriority  The preemptive priority value (starting from 0)
1624:libchip/cmsis/core_cm3.h ****  * @param  SubPriority      The sub priority value (starting from 0)
1625:libchip/cmsis/core_cm3.h ****  * @return                  The encoded priority for the interrupt
1626:libchip/cmsis/core_cm3.h ****  *
1627:libchip/cmsis/core_cm3.h ****  * Encode the priority for an interrupt with the given priority group,
1628:libchip/cmsis/core_cm3.h ****  * preemptive priority value and sub priority value.
1629:libchip/cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1630:libchip/cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1631:libchip/cmsis/core_cm3.h ****  *
1632:libchip/cmsis/core_cm3.h ****  * The returned priority value can be used for NVIC_SetPriority(...) function
1633:libchip/cmsis/core_cm3.h ****  */
1634:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1635:libchip/cmsis/core_cm3.h **** {
1636:libchip/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1637:libchip/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1638:libchip/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1639:libchip/cmsis/core_cm3.h **** 
1640:libchip/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1641:libchip/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1642:libchip/cmsis/core_cm3.h **** 
1643:libchip/cmsis/core_cm3.h ****   return (
1644:libchip/cmsis/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1645:libchip/cmsis/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1646:libchip/cmsis/core_cm3.h ****          );
1647:libchip/cmsis/core_cm3.h **** }
1648:libchip/cmsis/core_cm3.h **** 
1649:libchip/cmsis/core_cm3.h **** 
1650:libchip/cmsis/core_cm3.h **** /**
ARM GAS  /tmp/cc1T14q7.s 			page 32


1651:libchip/cmsis/core_cm3.h ****  * @brief  Decode the priority of an interrupt
1652:libchip/cmsis/core_cm3.h ****  *
1653:libchip/cmsis/core_cm3.h ****  * @param  Priority           The priority for the interrupt
1654:libchip/cmsis/core_cm3.h ****  * @param  PriorityGroup      The used priority group
1655:libchip/cmsis/core_cm3.h ****  * @param  pPreemptPriority   The preemptive priority value (starting from 0)
1656:libchip/cmsis/core_cm3.h ****  * @param  pSubPriority       The sub priority value (starting from 0)
1657:libchip/cmsis/core_cm3.h ****  *
1658:libchip/cmsis/core_cm3.h ****  * Decode an interrupt priority value with the given priority group to
1659:libchip/cmsis/core_cm3.h ****  * preemptive priority value and sub priority value.
1660:libchip/cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1661:libchip/cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1662:libchip/cmsis/core_cm3.h ****  *
1663:libchip/cmsis/core_cm3.h ****  * The priority value can be retrieved with NVIC_GetPriority(...) function
1664:libchip/cmsis/core_cm3.h ****  */
1665:libchip/cmsis/core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1666:libchip/cmsis/core_cm3.h **** {
1667:libchip/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1668:libchip/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1669:libchip/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1670:libchip/cmsis/core_cm3.h **** 
1671:libchip/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1672:libchip/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1673:libchip/cmsis/core_cm3.h **** 
1674:libchip/cmsis/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1675:libchip/cmsis/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1676:libchip/cmsis/core_cm3.h **** }
1677:libchip/cmsis/core_cm3.h **** 
1678:libchip/cmsis/core_cm3.h **** 
1679:libchip/cmsis/core_cm3.h **** 
1680:libchip/cmsis/core_cm3.h **** /* ##################################    SysTick function  ########################################
1681:libchip/cmsis/core_cm3.h **** 
1682:libchip/cmsis/core_cm3.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
1683:libchip/cmsis/core_cm3.h **** 
1684:libchip/cmsis/core_cm3.h **** /**
1685:libchip/cmsis/core_cm3.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
1686:libchip/cmsis/core_cm3.h ****  *
1687:libchip/cmsis/core_cm3.h ****  * @param   ticks   number of ticks between two interrupts
1688:libchip/cmsis/core_cm3.h ****  * @return  1 = failed, 0 = successful
1689:libchip/cmsis/core_cm3.h ****  *
1690:libchip/cmsis/core_cm3.h ****  * Initialise the system tick timer and its interrupt and start the
1691:libchip/cmsis/core_cm3.h ****  * system tick timer / counter in free running mode to generate
1692:libchip/cmsis/core_cm3.h ****  * periodical interrupts.
1693:libchip/cmsis/core_cm3.h ****  */
1694:libchip/cmsis/core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1695:libchip/cmsis/core_cm3.h **** {
 118              		.loc 1 1695 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 8
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              	.LCFI5:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 14, -4
 126              		.cfi_offset 7, -8
 127 0002 82B0     		sub	sp, sp, #8
 128              	.LCFI6:
 129              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc1T14q7.s 			page 33


 130 0004 00AF     		add	r7, sp, #0
 131              	.LCFI7:
 132              		.cfi_def_cfa_register 7
 133 0006 7860     		str	r0, [r7, #4]
1696:libchip/cmsis/core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 134              		.loc 1 1696 0
 135 0008 7A68     		ldr	r2, [r7, #4]
 136 000a 6FF07F43 		mvn	r3, #-16777216
 137 000e 9A42     		cmp	r2, r3
 138 0010 02D9     		bls	.L6
 139              		.loc 1 1696 0 is_stmt 0 discriminator 1
 140 0012 4FF00103 		mov	r3, #1
 141 0016 1FE0     		b	.L7
 142              	.L6:
1697:libchip/cmsis/core_cm3.h **** 
1698:libchip/cmsis/core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 143              		.loc 1 1698 0 is_stmt 1
 144 0018 4EF21003 		movw	r3, #57360
 145 001c CEF20003 		movt	r3, 57344
 146 0020 7A68     		ldr	r2, [r7, #4]
 147 0022 22F07F42 		bic	r2, r2, #-16777216
 148 0026 02F1FF32 		add	r2, r2, #-1
 149 002a 5A60     		str	r2, [r3, #4]
1699:libchip/cmsis/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 150              		.loc 1 1699 0
 151 002c 4FF0FF30 		mov	r0, #-1
 152 0030 4FF00F01 		mov	r1, #15
 153 0034 FFF7FEFF 		bl	NVIC_SetPriority
1700:libchip/cmsis/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 154              		.loc 1 1700 0
 155 0038 4EF21003 		movw	r3, #57360
 156 003c CEF20003 		movt	r3, 57344
 157 0040 4FF00002 		mov	r2, #0
 158 0044 9A60     		str	r2, [r3, #8]
1701:libchip/cmsis/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 159              		.loc 1 1701 0
 160 0046 4EF21003 		movw	r3, #57360
 161 004a CEF20003 		movt	r3, 57344
 162 004e 4FF00702 		mov	r2, #7
 163 0052 1A60     		str	r2, [r3, #0]
1702:libchip/cmsis/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1703:libchip/cmsis/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1704:libchip/cmsis/core_cm3.h ****   return (0);                                                  /* Function successful */
 164              		.loc 1 1704 0
 165 0054 4FF00003 		mov	r3, #0
 166              	.L7:
1705:libchip/cmsis/core_cm3.h **** }
 167              		.loc 1 1705 0
 168 0058 1846     		mov	r0, r3
 169 005a 07F10807 		add	r7, r7, #8
 170 005e BD46     		mov	sp, r7
 171 0060 80BD     		pop	{r7, pc}
 172              		.cfi_endproc
 173              	.LFE24:
 174              		.size	SysTick_Config, .-SysTick_Config
 175 0062 00BF     		.bss
 176              		.align	2
ARM GAS  /tmp/cc1T14q7.s 			page 34


 177              	_dwTickCount:
 178 0000 00000000 		.space	4
 179              		.section	.text.SysTick_Handler,"ax",%progbits
 180              		.align	2
 181              		.global	SysTick_Handler
 182              		.thumb
 183              		.thumb_func
 184              		.type	SysTick_Handler, %function
 185              	SysTick_Handler:
 186              	.LFB35:
 187              		.file 2 "board/timetick.c"
   1:board/timetick.c **** /* ----------------------------------------------------------------------------
   2:board/timetick.c ****  *         ATMEL Microcontroller Software Support
   3:board/timetick.c ****  * ----------------------------------------------------------------------------
   4:board/timetick.c ****  * Copyright (c) 2009, Atmel Corporation
   5:board/timetick.c ****  *
   6:board/timetick.c ****  * All rights reserved.
   7:board/timetick.c ****  *
   8:board/timetick.c ****  * Redistribution and use in source and binary forms, with or without
   9:board/timetick.c ****  * modification, are permitted provided that the following conditions are met:
  10:board/timetick.c ****  *
  11:board/timetick.c ****  * - Redistributions of source code must retain the above copyright notice,
  12:board/timetick.c ****  * this list of conditions and the disclaimer below.
  13:board/timetick.c ****  *
  14:board/timetick.c ****  * Atmel's name may not be used to endorse or promote products derived from
  15:board/timetick.c ****  * this software without specific prior written permission.
  16:board/timetick.c ****  *
  17:board/timetick.c ****  * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
  18:board/timetick.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  19:board/timetick.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  20:board/timetick.c ****  * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:board/timetick.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  22:board/timetick.c ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  23:board/timetick.c ****  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  24:board/timetick.c ****  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  25:board/timetick.c ****  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  26:board/timetick.c ****  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:board/timetick.c ****  * ----------------------------------------------------------------------------
  28:board/timetick.c ****  */
  29:board/timetick.c **** 
  30:board/timetick.c **** /**
  31:board/timetick.c ****  *  \file
  32:board/timetick.c ****  *  Implement simple system tick usage.
  33:board/timetick.c ****  */
  34:board/timetick.c **** 
  35:board/timetick.c **** /*----------------------------------------------------------------------------
  36:board/timetick.c ****  *         Headers
  37:board/timetick.c ****  *----------------------------------------------------------------------------*/
  38:board/timetick.c **** 
  39:board/timetick.c **** #include "board.h"
  40:board/timetick.c **** 
  41:board/timetick.c **** /*----------------------------------------------------------------------------
  42:board/timetick.c ****  *         Local variables
  43:board/timetick.c ****  *----------------------------------------------------------------------------*/
  44:board/timetick.c **** 
  45:board/timetick.c **** /** Tick Counter united by ms */
  46:board/timetick.c **** static volatile uint32_t _dwTickCount=0 ;
ARM GAS  /tmp/cc1T14q7.s 			page 35


  47:board/timetick.c **** 
  48:board/timetick.c **** /*----------------------------------------------------------------------------
  49:board/timetick.c ****  *         Exported Functions
  50:board/timetick.c ****  *----------------------------------------------------------------------------*/
  51:board/timetick.c **** 
  52:board/timetick.c **** /**
  53:board/timetick.c ****  *  \brief Handler for Sytem Tick interrupt.
  54:board/timetick.c ****  */
  55:board/timetick.c **** extern void SysTick_Handler( void )
  56:board/timetick.c **** {
 188              		.loc 2 56 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              	.LCFI8:
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 14, -4
 196              		.cfi_offset 7, -8
 197 0002 00AF     		add	r7, sp, #0
 198              	.LCFI9:
 199              		.cfi_def_cfa_register 7
  57:board/timetick.c ****     _dwTickCount++;
 200              		.loc 2 57 0
 201 0004 40F20003 		movw	r3, #:lower16:_dwTickCount
 202 0008 C0F20003 		movt	r3, #:upper16:_dwTickCount
 203 000c 1B68     		ldr	r3, [r3, #0]
 204 000e 03F10102 		add	r2, r3, #1
 205 0012 40F20003 		movw	r3, #:lower16:_dwTickCount
 206 0016 C0F20003 		movt	r3, #:upper16:_dwTickCount
 207 001a 1A60     		str	r2, [r3, #0]
  58:board/timetick.c **** 	blinkhandler(_dwTickCount);
 208              		.loc 2 58 0
 209 001c 40F20003 		movw	r3, #:lower16:_dwTickCount
 210 0020 C0F20003 		movt	r3, #:upper16:_dwTickCount
 211 0024 1B68     		ldr	r3, [r3, #0]
 212 0026 1846     		mov	r0, r3
 213 0028 FFF7FEFF 		bl	blinkhandler
  59:board/timetick.c **** }
 214              		.loc 2 59 0
 215 002c 80BD     		pop	{r7, pc}
 216              		.cfi_endproc
 217              	.LFE35:
 218              		.size	SysTick_Handler, .-SysTick_Handler
 219 002e 00BF     		.section	.text.TimeTick_Configure,"ax",%progbits
 220              		.align	2
 221              		.global	TimeTick_Configure
 222              		.thumb
 223              		.thumb_func
 224              		.type	TimeTick_Configure, %function
 225              	TimeTick_Configure:
 226              	.LFB36:
  60:board/timetick.c **** 
  61:board/timetick.c **** /**
  62:board/timetick.c ****  *  \brief Configures the SAM3 SysTick & reset tickCount.
  63:board/timetick.c ****  *  Systick interrupt handler will generates 1ms interrupt and increase a
  64:board/timetick.c ****  *  tickCount.
ARM GAS  /tmp/cc1T14q7.s 			page 36


  65:board/timetick.c ****  *  \param new_mck  Current master clock.
  66:board/timetick.c ****  */
  67:board/timetick.c **** extern uint32_t TimeTick_Configure( uint32_t new_mck )
  68:board/timetick.c **** {
 227              		.loc 2 68 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 8
 230              		@ frame_needed = 1, uses_anonymous_args = 0
 231 0000 80B5     		push	{r7, lr}
 232              	.LCFI10:
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 14, -4
 235              		.cfi_offset 7, -8
 236 0002 82B0     		sub	sp, sp, #8
 237              	.LCFI11:
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              	.LCFI12:
 241              		.cfi_def_cfa_register 7
 242 0006 7860     		str	r0, [r7, #4]
  69:board/timetick.c ****     _dwTickCount = 0 ;
 243              		.loc 2 69 0
 244 0008 40F20003 		movw	r3, #:lower16:_dwTickCount
 245 000c C0F20003 		movt	r3, #:upper16:_dwTickCount
 246 0010 4FF00002 		mov	r2, #0
 247 0014 1A60     		str	r2, [r3, #0]
  70:board/timetick.c ****     return SysTick_Config( new_mck/1000 ) ;
 248              		.loc 2 70 0
 249 0016 7A68     		ldr	r2, [r7, #4]
 250 0018 44F6D353 		movw	r3, #19923
 251 001c C1F26203 		movt	r3, 4194
 252 0020 A3FB0213 		umull	r1, r3, r3, r2
 253 0024 4FEA9313 		lsr	r3, r3, #6
 254 0028 1846     		mov	r0, r3
 255 002a FFF7FEFF 		bl	SysTick_Config
 256 002e 0346     		mov	r3, r0
  71:board/timetick.c **** }
 257              		.loc 2 71 0
 258 0030 1846     		mov	r0, r3
 259 0032 07F10807 		add	r7, r7, #8
 260 0036 BD46     		mov	sp, r7
 261 0038 80BD     		pop	{r7, pc}
 262              		.cfi_endproc
 263              	.LFE36:
 264              		.size	TimeTick_Configure, .-TimeTick_Configure
 265 003a 00BF     		.section	.text.GetTickCount,"ax",%progbits
 266              		.align	2
 267              		.global	GetTickCount
 268              		.thumb
 269              		.thumb_func
 270              		.type	GetTickCount, %function
 271              	GetTickCount:
 272              	.LFB37:
  72:board/timetick.c **** 
  73:board/timetick.c **** /**
  74:board/timetick.c ****  *  \brief Get current Tick Count, in ms.
  75:board/timetick.c ****  */
ARM GAS  /tmp/cc1T14q7.s 			page 37


  76:board/timetick.c **** extern uint32_t GetTickCount( void )
  77:board/timetick.c **** {
 273              		.loc 2 77 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0000 80B4     		push	{r7}
 279              	.LCFI13:
 280              		.cfi_def_cfa_offset 4
 281              		.cfi_offset 7, -4
 282 0002 00AF     		add	r7, sp, #0
 283              	.LCFI14:
 284              		.cfi_def_cfa_register 7
  78:board/timetick.c ****     return _dwTickCount ;
 285              		.loc 2 78 0
 286 0004 40F20003 		movw	r3, #:lower16:_dwTickCount
 287 0008 C0F20003 		movt	r3, #:upper16:_dwTickCount
 288 000c 1B68     		ldr	r3, [r3, #0]
  79:board/timetick.c **** }
 289              		.loc 2 79 0
 290 000e 1846     		mov	r0, r3
 291 0010 BD46     		mov	sp, r7
 292 0012 80BC     		pop	{r7}
 293 0014 7047     		bx	lr
 294              		.cfi_endproc
 295              	.LFE37:
 296              		.size	GetTickCount, .-GetTickCount
 297 0016 00BF     		.section	.text.Wait,"ax",%progbits
 298              		.align	2
 299              		.global	Wait
 300              		.thumb
 301              		.thumb_func
 302              		.type	Wait, %function
 303              	Wait:
 304              	.LFB38:
  80:board/timetick.c **** 
  81:board/timetick.c **** /**
  82:board/timetick.c ****  *  \brief Sync Wait for several ms
  83:board/timetick.c ****  */
  84:board/timetick.c **** extern void Wait( volatile uint32_t dwMs )
  85:board/timetick.c **** {
 305              		.loc 2 85 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 16
 308              		@ frame_needed = 1, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 310 0000 80B4     		push	{r7}
 311              	.LCFI15:
 312              		.cfi_def_cfa_offset 4
 313              		.cfi_offset 7, -4
 314 0002 85B0     		sub	sp, sp, #20
 315              	.LCFI16:
 316              		.cfi_def_cfa_offset 24
 317 0004 00AF     		add	r7, sp, #0
 318              	.LCFI17:
 319              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc1T14q7.s 			page 38


 320 0006 7860     		str	r0, [r7, #4]
  86:board/timetick.c ****     uint32_t dwStart ;
  87:board/timetick.c ****     uint32_t dwCurrent ;
  88:board/timetick.c **** 
  89:board/timetick.c ****     dwStart = _dwTickCount ;
 321              		.loc 2 89 0
 322 0008 40F20003 		movw	r3, #:lower16:_dwTickCount
 323 000c C0F20003 		movt	r3, #:upper16:_dwTickCount
 324 0010 1B68     		ldr	r3, [r3, #0]
 325 0012 FB60     		str	r3, [r7, #12]
 326              	.L12:
  90:board/timetick.c ****     do
  91:board/timetick.c ****     {
  92:board/timetick.c ****         dwCurrent = _dwTickCount ;
 327              		.loc 2 92 0 discriminator 1
 328 0014 40F20003 		movw	r3, #:lower16:_dwTickCount
 329 0018 C0F20003 		movt	r3, #:upper16:_dwTickCount
 330 001c 1B68     		ldr	r3, [r3, #0]
 331 001e BB60     		str	r3, [r7, #8]
  93:board/timetick.c ****     } while ( dwCurrent - dwStart < dwMs ) ;
 332              		.loc 2 93 0 discriminator 1
 333 0020 BA68     		ldr	r2, [r7, #8]
 334 0022 FB68     		ldr	r3, [r7, #12]
 335 0024 D21A     		subs	r2, r2, r3
 336 0026 7B68     		ldr	r3, [r7, #4]
 337 0028 9A42     		cmp	r2, r3
 338 002a F3D3     		bcc	.L12
  94:board/timetick.c **** }
 339              		.loc 2 94 0
 340 002c 07F11407 		add	r7, r7, #20
 341 0030 BD46     		mov	sp, r7
 342 0032 80BC     		pop	{r7}
 343 0034 7047     		bx	lr
 344              		.cfi_endproc
 345              	.LFE38:
 346              		.size	Wait, .-Wait
 347 0036 00BF     		.section	.text.Sleep,"ax",%progbits
 348              		.align	2
 349              		.global	Sleep
 350              		.thumb
 351              		.thumb_func
 352              		.type	Sleep, %function
 353              	Sleep:
 354              	.LFB39:
  95:board/timetick.c **** 
  96:board/timetick.c **** /**
  97:board/timetick.c ****  *  \brief Sync Sleep for several ms
  98:board/timetick.c ****  */
  99:board/timetick.c **** extern void Sleep( volatile uint32_t dwMs )
 100:board/timetick.c **** {
 355              		.loc 2 100 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 16
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0000 80B5     		push	{r7, lr}
 360              	.LCFI18:
 361              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc1T14q7.s 			page 39


 362              		.cfi_offset 14, -4
 363              		.cfi_offset 7, -8
 364 0002 84B0     		sub	sp, sp, #16
 365              	.LCFI19:
 366              		.cfi_def_cfa_offset 24
 367 0004 00AF     		add	r7, sp, #0
 368              	.LCFI20:
 369              		.cfi_def_cfa_register 7
 370 0006 7860     		str	r0, [r7, #4]
 101:board/timetick.c ****     uint32_t dwStart ;
 102:board/timetick.c ****     uint32_t dwCurrent ;
 103:board/timetick.c **** 
 104:board/timetick.c ****     dwStart = _dwTickCount ;
 371              		.loc 2 104 0
 372 0008 40F20003 		movw	r3, #:lower16:_dwTickCount
 373 000c C0F20003 		movt	r3, #:upper16:_dwTickCount
 374 0010 1B68     		ldr	r3, [r3, #0]
 375 0012 FB60     		str	r3, [r7, #12]
 376              	.L16:
 105:board/timetick.c **** 
 106:board/timetick.c ****     do
 107:board/timetick.c ****     {
 108:board/timetick.c ****         dwCurrent = _dwTickCount ;
 377              		.loc 2 108 0
 378 0014 40F20003 		movw	r3, #:lower16:_dwTickCount
 379 0018 C0F20003 		movt	r3, #:upper16:_dwTickCount
 380 001c 1B68     		ldr	r3, [r3, #0]
 381 001e BB60     		str	r3, [r7, #8]
 109:board/timetick.c **** 
 110:board/timetick.c ****         if ( dwCurrent - dwStart > dwMs )
 382              		.loc 2 110 0
 383 0020 BA68     		ldr	r2, [r7, #8]
 384 0022 FB68     		ldr	r3, [r7, #12]
 385 0024 D21A     		subs	r2, r2, r3
 386 0026 7B68     		ldr	r3, [r7, #4]
 387 0028 9A42     		cmp	r2, r3
 388 002a 02D8     		bhi	.L18
 389              	.L14:
 111:board/timetick.c ****         {
 112:board/timetick.c ****             break ;
 113:board/timetick.c ****         }
 114:board/timetick.c **** 
 115:board/timetick.c ****         __WFI() ;
 390              		.loc 2 115 0
 391 002c FFF7FEFF 		bl	__WFI
 116:board/timetick.c ****     } while( 1 ) ;
 392              		.loc 2 116 0
 393 0030 F0E7     		b	.L16
 394              	.L18:
 112:board/timetick.c ****             break ;
 395              		.loc 2 112 0
 396 0032 00BF     		nop
 397              	.L17:
 117:board/timetick.c **** }
 398              		.loc 2 117 0
 399 0034 07F11007 		add	r7, r7, #16
 400 0038 BD46     		mov	sp, r7
ARM GAS  /tmp/cc1T14q7.s 			page 40


 401 003a 80BD     		pop	{r7, pc}
 402              		.cfi_endproc
 403              	.LFE39:
 404              		.size	Sleep, .-Sleep
 405              		.text
 406              	.Letext0:
 407              		.file 3 "/usr/local/Sourcery/bin/../lib/gcc/arm-none-eabi/4.6.1/../../../../arm-none-eabi/include/
 408              		.file 4 "libchip/include/SAM3S.h"
 409              		.section	.debug_info,"",%progbits
 410              	.Ldebug_info0:
 411 0000 45060000 		.4byte	0x645
 412 0004 0200     		.2byte	0x2
 413 0006 00000000 		.4byte	.Ldebug_abbrev0
 414 000a 04       		.byte	0x4
 415 000b 01       		.uleb128 0x1
 416 000c C7020000 		.4byte	.LASF95
 417 0010 01       		.byte	0x1
 418 0011 BD010000 		.4byte	.LASF96
 419 0015 E1030000 		.4byte	.LASF97
 420 0019 00000000 		.4byte	0
 421 001d 00000000 		.4byte	0
 422 0021 00000000 		.4byte	.Ldebug_ranges0+0
 423 0025 00000000 		.4byte	.Ldebug_line0
 424 0029 02       		.uleb128 0x2
 425 002a 01       		.byte	0x1
 426 002b 06       		.byte	0x6
 427 002c 00010000 		.4byte	.LASF0
 428 0030 03       		.uleb128 0x3
 429 0031 AE000000 		.4byte	.LASF5
 430 0035 03       		.byte	0x3
 431 0036 2A       		.byte	0x2a
 432 0037 3B000000 		.4byte	0x3b
 433 003b 02       		.uleb128 0x2
 434 003c 01       		.byte	0x1
 435 003d 08       		.byte	0x8
 436 003e AF010000 		.4byte	.LASF1
 437 0042 02       		.uleb128 0x2
 438 0043 02       		.byte	0x2
 439 0044 05       		.byte	0x5
 440 0045 3A000000 		.4byte	.LASF2
 441 0049 02       		.uleb128 0x2
 442 004a 02       		.byte	0x2
 443 004b 07       		.byte	0x7
 444 004c 75020000 		.4byte	.LASF3
 445 0050 02       		.uleb128 0x2
 446 0051 04       		.byte	0x4
 447 0052 05       		.byte	0x5
 448 0053 76010000 		.4byte	.LASF4
 449 0057 03       		.uleb128 0x3
 450 0058 A1010000 		.4byte	.LASF6
 451 005c 03       		.byte	0x3
 452 005d 50       		.byte	0x50
 453 005e 62000000 		.4byte	0x62
 454 0062 02       		.uleb128 0x2
 455 0063 04       		.byte	0x4
 456 0064 07       		.byte	0x7
 457 0065 3C030000 		.4byte	.LASF7
ARM GAS  /tmp/cc1T14q7.s 			page 41


 458 0069 02       		.uleb128 0x2
 459 006a 08       		.byte	0x8
 460 006b 05       		.byte	0x5
 461 006c 3C010000 		.4byte	.LASF8
 462 0070 02       		.uleb128 0x2
 463 0071 08       		.byte	0x8
 464 0072 07       		.byte	0x7
 465 0073 FB010000 		.4byte	.LASF9
 466 0077 04       		.uleb128 0x4
 467 0078 04       		.byte	0x4
 468 0079 05       		.byte	0x5
 469 007a 696E7400 		.ascii	"int\000"
 470 007e 02       		.uleb128 0x2
 471 007f 04       		.byte	0x4
 472 0080 07       		.byte	0x7
 473 0081 21020000 		.4byte	.LASF10
 474 0085 05       		.uleb128 0x5
 475 0086 8A000000 		.4byte	0x8a
 476 008a 06       		.uleb128 0x6
 477 008b 57000000 		.4byte	0x57
 478 008f 06       		.uleb128 0x6
 479 0090 57000000 		.4byte	0x57
 480 0094 07       		.uleb128 0x7
 481 0095 66000000 		.4byte	.LASF84
 482 0099 01       		.byte	0x1
 483 009a 04       		.byte	0x4
 484 009b 49       		.byte	0x49
 485 009c 91010000 		.4byte	0x191
 486 00a0 08       		.uleb128 0x8
 487 00a1 6D030000 		.4byte	.LASF11
 488 00a5 72       		.sleb128 -14
 489 00a6 08       		.uleb128 0x8
 490 00a7 4E030000 		.4byte	.LASF12
 491 00ab 74       		.sleb128 -12
 492 00ac 08       		.uleb128 0x8
 493 00ad 2E020000 		.4byte	.LASF13
 494 00b1 75       		.sleb128 -11
 495 00b2 08       		.uleb128 0x8
 496 00b3 CF000000 		.4byte	.LASF14
 497 00b7 76       		.sleb128 -10
 498 00b8 08       		.uleb128 0x8
 499 00b9 4A020000 		.4byte	.LASF15
 500 00bd 7B       		.sleb128 -5
 501 00be 08       		.uleb128 0x8
 502 00bf 54000000 		.4byte	.LASF16
 503 00c3 7C       		.sleb128 -4
 504 00c4 08       		.uleb128 0x8
 505 00c5 6A010000 		.4byte	.LASF17
 506 00c9 7E       		.sleb128 -2
 507 00ca 08       		.uleb128 0x8
 508 00cb 0B000000 		.4byte	.LASF18
 509 00cf 7F       		.sleb128 -1
 510 00d0 08       		.uleb128 0x8
 511 00d1 21000000 		.4byte	.LASF19
 512 00d5 00       		.sleb128 0
 513 00d6 08       		.uleb128 0x8
 514 00d7 E2010000 		.4byte	.LASF20
ARM GAS  /tmp/cc1T14q7.s 			page 42


 515 00db 01       		.sleb128 1
 516 00dc 08       		.uleb128 0x8
 517 00dd 64030000 		.4byte	.LASF21
 518 00e1 02       		.sleb128 2
 519 00e2 08       		.uleb128 0x8
 520 00e3 6B000000 		.4byte	.LASF22
 521 00e7 03       		.sleb128 3
 522 00e8 08       		.uleb128 0x8
 523 00e9 E0020000 		.4byte	.LASF23
 524 00ed 04       		.sleb128 4
 525 00ee 08       		.uleb128 0x8
 526 00ef 3C020000 		.4byte	.LASF24
 527 00f3 05       		.sleb128 5
 528 00f4 08       		.uleb128 0x8
 529 00f5 F7020000 		.4byte	.LASF25
 530 00f9 06       		.sleb128 6
 531 00fa 08       		.uleb128 0x8
 532 00fb 10040000 		.4byte	.LASF26
 533 00ff 08       		.sleb128 8
 534 0100 08       		.uleb128 0x8
 535 0101 8D010000 		.4byte	.LASF27
 536 0105 09       		.sleb128 9
 537 0106 08       		.uleb128 0x8
 538 0107 33010000 		.4byte	.LASF28
 539 010b 0A       		.sleb128 10
 540 010c 08       		.uleb128 0x8
 541 010d F1010000 		.4byte	.LASF29
 542 0111 0B       		.sleb128 11
 543 0112 08       		.uleb128 0x8
 544 0113 88020000 		.4byte	.LASF30
 545 0117 0C       		.sleb128 12
 546 0118 08       		.uleb128 0x8
 547 0119 E7000000 		.4byte	.LASF31
 548 011d 0D       		.sleb128 13
 549 011e 08       		.uleb128 0x8
 550 011f 0C010000 		.4byte	.LASF32
 551 0123 0E       		.sleb128 14
 552 0124 08       		.uleb128 0x8
 553 0125 4A010000 		.4byte	.LASF33
 554 0129 0F       		.sleb128 15
 555 012a 08       		.uleb128 0x8
 556 012b BF000000 		.4byte	.LASF34
 557 012f 12       		.sleb128 18
 558 0130 08       		.uleb128 0x8
 559 0131 A4000000 		.4byte	.LASF35
 560 0135 13       		.sleb128 19
 561 0136 08       		.uleb128 0x8
 562 0137 4A000000 		.4byte	.LASF36
 563 013b 14       		.sleb128 20
 564 013c 08       		.uleb128 0x8
 565 013d 7F010000 		.4byte	.LASF37
 566 0141 15       		.sleb128 21
 567 0142 08       		.uleb128 0x8
 568 0143 31000000 		.4byte	.LASF38
 569 0147 16       		.sleb128 22
 570 0148 08       		.uleb128 0x8
 571 0149 AD030000 		.4byte	.LASF39
ARM GAS  /tmp/cc1T14q7.s 			page 43


 572 014d 17       		.sleb128 23
 573 014e 08       		.uleb128 0x8
 574 014f E9020000 		.4byte	.LASF40
 575 0153 18       		.sleb128 24
 576 0154 08       		.uleb128 0x8
 577 0155 A4030000 		.4byte	.LASF41
 578 0159 19       		.sleb128 25
 579 015a 08       		.uleb128 0x8
 580 015b CB030000 		.4byte	.LASF42
 581 015f 1A       		.sleb128 26
 582 0160 08       		.uleb128 0x8
 583 0161 5C010000 		.4byte	.LASF43
 584 0165 1B       		.sleb128 27
 585 0166 08       		.uleb128 0x8
 586 0167 96030000 		.4byte	.LASF44
 587 016b 1C       		.sleb128 28
 588 016c 08       		.uleb128 0x8
 589 016d 98010000 		.4byte	.LASF45
 590 0171 1D       		.sleb128 29
 591 0172 08       		.uleb128 0x8
 592 0173 56020000 		.4byte	.LASF46
 593 0177 1E       		.sleb128 30
 594 0178 08       		.uleb128 0x8
 595 0179 AF020000 		.4byte	.LASF47
 596 017d 1F       		.sleb128 31
 597 017e 08       		.uleb128 0x8
 598 017f 74000000 		.4byte	.LASF48
 599 0183 20       		.sleb128 32
 600 0184 08       		.uleb128 0x8
 601 0185 8A000000 		.4byte	.LASF49
 602 0189 21       		.sleb128 33
 603 018a 08       		.uleb128 0x8
 604 018b 18020000 		.4byte	.LASF50
 605 018f 22       		.sleb128 34
 606 0190 00       		.byte	0
 607 0191 03       		.uleb128 0x3
 608 0192 CE010000 		.4byte	.LASF51
 609 0196 04       		.byte	0x4
 610 0197 76       		.byte	0x76
 611 0198 94000000 		.4byte	0x94
 612 019c 09       		.uleb128 0x9
 613 019d 040E     		.2byte	0xe04
 614 019f 01       		.byte	0x1
 615 01a0 84       		.byte	0x84
 616 01a1 66020000 		.4byte	0x266
 617 01a5 0A       		.uleb128 0xa
 618 01a6 00030000 		.4byte	.LASF52
 619 01aa 01       		.byte	0x1
 620 01ab 86       		.byte	0x86
 621 01ac 76020000 		.4byte	0x276
 622 01b0 02       		.byte	0x2
 623 01b1 23       		.byte	0x23
 624 01b2 00       		.uleb128 0
 625 01b3 0A       		.uleb128 0xa
 626 01b4 0A030000 		.4byte	.LASF53
 627 01b8 01       		.byte	0x1
 628 01b9 87       		.byte	0x87
ARM GAS  /tmp/cc1T14q7.s 			page 44


 629 01ba 7B020000 		.4byte	0x27b
 630 01be 02       		.byte	0x2
 631 01bf 23       		.byte	0x23
 632 01c0 20       		.uleb128 0x20
 633 01c1 0A       		.uleb128 0xa
 634 01c2 45020000 		.4byte	.LASF54
 635 01c6 01       		.byte	0x1
 636 01c7 88       		.byte	0x88
 637 01c8 8B020000 		.4byte	0x28b
 638 01cc 03       		.byte	0x3
 639 01cd 23       		.byte	0x23
 640 01ce 8001     		.uleb128 0x80
 641 01d0 0A       		.uleb128 0xa
 642 01d1 2A010000 		.4byte	.LASF55
 643 01d5 01       		.byte	0x1
 644 01d6 89       		.byte	0x89
 645 01d7 7B020000 		.4byte	0x27b
 646 01db 03       		.byte	0x3
 647 01dc 23       		.byte	0x23
 648 01dd A001     		.uleb128 0xa0
 649 01df 0A       		.uleb128 0xa
 650 01e0 BD020000 		.4byte	.LASF56
 651 01e4 01       		.byte	0x1
 652 01e5 8A       		.byte	0x8a
 653 01e6 90020000 		.4byte	0x290
 654 01ea 03       		.byte	0x3
 655 01eb 23       		.byte	0x23
 656 01ec 8002     		.uleb128 0x100
 657 01ee 0A       		.uleb128 0xa
 658 01ef 14030000 		.4byte	.LASF57
 659 01f3 01       		.byte	0x1
 660 01f4 8B       		.byte	0x8b
 661 01f5 7B020000 		.4byte	0x27b
 662 01f9 03       		.byte	0x3
 663 01fa 23       		.byte	0x23
 664 01fb A002     		.uleb128 0x120
 665 01fd 0A       		.uleb128 0xa
 666 01fe EC010000 		.4byte	.LASF58
 667 0202 01       		.byte	0x1
 668 0203 8C       		.byte	0x8c
 669 0204 95020000 		.4byte	0x295
 670 0208 03       		.byte	0x3
 671 0209 23       		.byte	0x23
 672 020a 8003     		.uleb128 0x180
 673 020c 0A       		.uleb128 0xa
 674 020d 1E030000 		.4byte	.LASF59
 675 0211 01       		.byte	0x1
 676 0212 8D       		.byte	0x8d
 677 0213 7B020000 		.4byte	0x27b
 678 0217 03       		.byte	0x3
 679 0218 23       		.byte	0x23
 680 0219 A003     		.uleb128 0x1a0
 681 021b 0A       		.uleb128 0xa
 682 021c 06000000 		.4byte	.LASF60
 683 0220 01       		.byte	0x1
 684 0221 8E       		.byte	0x8e
 685 0222 9A020000 		.4byte	0x29a
ARM GAS  /tmp/cc1T14q7.s 			page 45


 686 0226 03       		.byte	0x3
 687 0227 23       		.byte	0x23
 688 0228 8004     		.uleb128 0x200
 689 022a 0A       		.uleb128 0xa
 690 022b 28030000 		.4byte	.LASF61
 691 022f 01       		.byte	0x1
 692 0230 8F       		.byte	0x8f
 693 0231 9F020000 		.4byte	0x29f
 694 0235 03       		.byte	0x3
 695 0236 23       		.byte	0x23
 696 0237 A004     		.uleb128 0x220
 697 0239 0B       		.uleb128 0xb
 698 023a 495000   		.ascii	"IP\000"
 699 023d 01       		.byte	0x1
 700 023e 90       		.byte	0x90
 701 023f BF020000 		.4byte	0x2bf
 702 0243 03       		.byte	0x3
 703 0244 23       		.byte	0x23
 704 0245 8006     		.uleb128 0x300
 705 0247 0A       		.uleb128 0xa
 706 0248 32030000 		.4byte	.LASF62
 707 024c 01       		.byte	0x1
 708 024d 91       		.byte	0x91
 709 024e C4020000 		.4byte	0x2c4
 710 0252 03       		.byte	0x3
 711 0253 23       		.byte	0x23
 712 0254 F007     		.uleb128 0x3f0
 713 0256 0A       		.uleb128 0xa
 714 0257 CA000000 		.4byte	.LASF63
 715 025b 01       		.byte	0x1
 716 025c 92       		.byte	0x92
 717 025d 8F000000 		.4byte	0x8f
 718 0261 03       		.byte	0x3
 719 0262 23       		.byte	0x23
 720 0263 801C     		.uleb128 0xe00
 721 0265 00       		.byte	0
 722 0266 0C       		.uleb128 0xc
 723 0267 57000000 		.4byte	0x57
 724 026b 76020000 		.4byte	0x276
 725 026f 0D       		.uleb128 0xd
 726 0270 7E000000 		.4byte	0x7e
 727 0274 07       		.byte	0x7
 728 0275 00       		.byte	0
 729 0276 06       		.uleb128 0x6
 730 0277 66020000 		.4byte	0x266
 731 027b 0C       		.uleb128 0xc
 732 027c 57000000 		.4byte	0x57
 733 0280 8B020000 		.4byte	0x28b
 734 0284 0D       		.uleb128 0xd
 735 0285 7E000000 		.4byte	0x7e
 736 0289 17       		.byte	0x17
 737 028a 00       		.byte	0
 738 028b 06       		.uleb128 0x6
 739 028c 66020000 		.4byte	0x266
 740 0290 06       		.uleb128 0x6
 741 0291 66020000 		.4byte	0x266
 742 0295 06       		.uleb128 0x6
ARM GAS  /tmp/cc1T14q7.s 			page 46


 743 0296 66020000 		.4byte	0x266
 744 029a 06       		.uleb128 0x6
 745 029b 66020000 		.4byte	0x266
 746 029f 0C       		.uleb128 0xc
 747 02a0 57000000 		.4byte	0x57
 748 02a4 AF020000 		.4byte	0x2af
 749 02a8 0D       		.uleb128 0xd
 750 02a9 7E000000 		.4byte	0x7e
 751 02ad 37       		.byte	0x37
 752 02ae 00       		.byte	0
 753 02af 0C       		.uleb128 0xc
 754 02b0 30000000 		.4byte	0x30
 755 02b4 BF020000 		.4byte	0x2bf
 756 02b8 0D       		.uleb128 0xd
 757 02b9 7E000000 		.4byte	0x7e
 758 02bd EF       		.byte	0xef
 759 02be 00       		.byte	0
 760 02bf 06       		.uleb128 0x6
 761 02c0 AF020000 		.4byte	0x2af
 762 02c4 0C       		.uleb128 0xc
 763 02c5 57000000 		.4byte	0x57
 764 02c9 D5020000 		.4byte	0x2d5
 765 02cd 0E       		.uleb128 0xe
 766 02ce 7E000000 		.4byte	0x7e
 767 02d2 8302     		.2byte	0x283
 768 02d4 00       		.byte	0
 769 02d5 03       		.uleb128 0x3
 770 02d6 D8010000 		.4byte	.LASF64
 771 02da 01       		.byte	0x1
 772 02db 93       		.byte	0x93
 773 02dc 9C010000 		.4byte	0x19c
 774 02e0 0F       		.uleb128 0xf
 775 02e1 74       		.byte	0x74
 776 02e2 01       		.byte	0x1
 777 02e3 9B       		.byte	0x9b
 778 02e4 F3030000 		.4byte	0x3f3
 779 02e8 0A       		.uleb128 0xa
 780 02e9 7F000000 		.4byte	.LASF65
 781 02ed 01       		.byte	0x1
 782 02ee 9D       		.byte	0x9d
 783 02ef 85000000 		.4byte	0x85
 784 02f3 02       		.byte	0x2
 785 02f4 23       		.byte	0x23
 786 02f5 00       		.uleb128 0
 787 02f6 0A       		.uleb128 0xa
 788 02f7 25010000 		.4byte	.LASF66
 789 02fb 01       		.byte	0x1
 790 02fc 9E       		.byte	0x9e
 791 02fd 8F000000 		.4byte	0x8f
 792 0301 02       		.byte	0x2
 793 0302 23       		.byte	0x23
 794 0303 04       		.uleb128 0x4
 795 0304 0A       		.uleb128 0xa
 796 0305 AA020000 		.4byte	.LASF67
 797 0309 01       		.byte	0x1
 798 030a 9F       		.byte	0x9f
 799 030b 8F000000 		.4byte	0x8f
ARM GAS  /tmp/cc1T14q7.s 			page 47


 800 030f 02       		.byte	0x2
 801 0310 23       		.byte	0x23
 802 0311 08       		.uleb128 0x8
 803 0312 0A       		.uleb128 0xa
 804 0313 1B040000 		.4byte	.LASF68
 805 0317 01       		.byte	0x1
 806 0318 A0       		.byte	0xa0
 807 0319 8F000000 		.4byte	0x8f
 808 031d 02       		.byte	0x2
 809 031e 23       		.byte	0x23
 810 031f 0C       		.uleb128 0xc
 811 0320 0B       		.uleb128 0xb
 812 0321 53435200 		.ascii	"SCR\000"
 813 0325 01       		.byte	0x1
 814 0326 A1       		.byte	0xa1
 815 0327 8F000000 		.4byte	0x8f
 816 032b 02       		.byte	0x2
 817 032c 23       		.byte	0x23
 818 032d 10       		.uleb128 0x10
 819 032e 0B       		.uleb128 0xb
 820 032f 43435200 		.ascii	"CCR\000"
 821 0333 01       		.byte	0x1
 822 0334 A2       		.byte	0xa2
 823 0335 8F000000 		.4byte	0x8f
 824 0339 02       		.byte	0x2
 825 033a 23       		.byte	0x23
 826 033b 14       		.uleb128 0x14
 827 033c 0B       		.uleb128 0xb
 828 033d 53485000 		.ascii	"SHP\000"
 829 0341 01       		.byte	0x1
 830 0342 A3       		.byte	0xa3
 831 0343 03040000 		.4byte	0x403
 832 0347 02       		.byte	0x2
 833 0348 23       		.byte	0x23
 834 0349 18       		.uleb128 0x18
 835 034a 0A       		.uleb128 0xa
 836 034b 12020000 		.4byte	.LASF69
 837 034f 01       		.byte	0x1
 838 0350 A4       		.byte	0xa4
 839 0351 8F000000 		.4byte	0x8f
 840 0355 02       		.byte	0x2
 841 0356 23       		.byte	0x23
 842 0357 24       		.uleb128 0x24
 843 0358 0A       		.uleb128 0xa
 844 0359 88010000 		.4byte	.LASF70
 845 035d 01       		.byte	0x1
 846 035e A5       		.byte	0xa5
 847 035f 8F000000 		.4byte	0x8f
 848 0363 02       		.byte	0x2
 849 0364 23       		.byte	0x23
 850 0365 28       		.uleb128 0x28
 851 0366 0A       		.uleb128 0xa
 852 0367 F2020000 		.4byte	.LASF71
 853 036b 01       		.byte	0x1
 854 036c A6       		.byte	0xa6
 855 036d 8F000000 		.4byte	0x8f
 856 0371 02       		.byte	0x2
ARM GAS  /tmp/cc1T14q7.s 			page 48


 857 0372 23       		.byte	0x23
 858 0373 2C       		.uleb128 0x2c
 859 0374 0A       		.uleb128 0xa
 860 0375 C2020000 		.4byte	.LASF72
 861 0379 01       		.byte	0x1
 862 037a A7       		.byte	0xa7
 863 037b 8F000000 		.4byte	0x8f
 864 037f 02       		.byte	0x2
 865 0380 23       		.byte	0x23
 866 0381 30       		.uleb128 0x30
 867 0382 0A       		.uleb128 0xa
 868 0383 2B000000 		.4byte	.LASF73
 869 0387 01       		.byte	0x1
 870 0388 A8       		.byte	0xa8
 871 0389 8F000000 		.4byte	0x8f
 872 038d 02       		.byte	0x2
 873 038e 23       		.byte	0x23
 874 038f 34       		.uleb128 0x34
 875 0390 0A       		.uleb128 0xa
 876 0391 65010000 		.4byte	.LASF74
 877 0395 01       		.byte	0x1
 878 0396 A9       		.byte	0xa9
 879 0397 8F000000 		.4byte	0x8f
 880 039b 02       		.byte	0x2
 881 039c 23       		.byte	0x23
 882 039d 38       		.uleb128 0x38
 883 039e 0A       		.uleb128 0xa
 884 039f BC030000 		.4byte	.LASF75
 885 03a3 01       		.byte	0x1
 886 03a4 AA       		.byte	0xaa
 887 03a5 8F000000 		.4byte	0x8f
 888 03a9 02       		.byte	0x2
 889 03aa 23       		.byte	0x23
 890 03ab 3C       		.uleb128 0x3c
 891 03ac 0B       		.uleb128 0xb
 892 03ad 50465200 		.ascii	"PFR\000"
 893 03b1 01       		.byte	0x1
 894 03b2 AB       		.byte	0xab
 895 03b3 18040000 		.4byte	0x418
 896 03b7 02       		.byte	0x2
 897 03b8 23       		.byte	0x23
 898 03b9 40       		.uleb128 0x40
 899 03ba 0B       		.uleb128 0xb
 900 03bb 44465200 		.ascii	"DFR\000"
 901 03bf 01       		.byte	0x1
 902 03c0 AC       		.byte	0xac
 903 03c1 85000000 		.4byte	0x85
 904 03c5 02       		.byte	0x2
 905 03c6 23       		.byte	0x23
 906 03c7 48       		.uleb128 0x48
 907 03c8 0B       		.uleb128 0xb
 908 03c9 41445200 		.ascii	"ADR\000"
 909 03cd 01       		.byte	0x1
 910 03ce AD       		.byte	0xad
 911 03cf 85000000 		.4byte	0x85
 912 03d3 02       		.byte	0x2
 913 03d4 23       		.byte	0x23
ARM GAS  /tmp/cc1T14q7.s 			page 49


 914 03d5 4C       		.uleb128 0x4c
 915 03d6 0A       		.uleb128 0xa
 916 03d7 05030000 		.4byte	.LASF76
 917 03db 01       		.byte	0x1
 918 03dc AE       		.byte	0xae
 919 03dd 32040000 		.4byte	0x432
 920 03e1 02       		.byte	0x2
 921 03e2 23       		.byte	0x23
 922 03e3 50       		.uleb128 0x50
 923 03e4 0A       		.uleb128 0xa
 924 03e5 B8020000 		.4byte	.LASF77
 925 03e9 01       		.byte	0x1
 926 03ea AF       		.byte	0xaf
 927 03eb 4C040000 		.4byte	0x44c
 928 03ef 02       		.byte	0x2
 929 03f0 23       		.byte	0x23
 930 03f1 60       		.uleb128 0x60
 931 03f2 00       		.byte	0
 932 03f3 0C       		.uleb128 0xc
 933 03f4 30000000 		.4byte	0x30
 934 03f8 03040000 		.4byte	0x403
 935 03fc 0D       		.uleb128 0xd
 936 03fd 7E000000 		.4byte	0x7e
 937 0401 0B       		.byte	0xb
 938 0402 00       		.byte	0
 939 0403 06       		.uleb128 0x6
 940 0404 F3030000 		.4byte	0x3f3
 941 0408 0C       		.uleb128 0xc
 942 0409 57000000 		.4byte	0x57
 943 040d 18040000 		.4byte	0x418
 944 0411 0D       		.uleb128 0xd
 945 0412 7E000000 		.4byte	0x7e
 946 0416 01       		.byte	0x1
 947 0417 00       		.byte	0
 948 0418 05       		.uleb128 0x5
 949 0419 1D040000 		.4byte	0x41d
 950 041d 06       		.uleb128 0x6
 951 041e 08040000 		.4byte	0x408
 952 0422 0C       		.uleb128 0xc
 953 0423 57000000 		.4byte	0x57
 954 0427 32040000 		.4byte	0x432
 955 042b 0D       		.uleb128 0xd
 956 042c 7E000000 		.4byte	0x7e
 957 0430 03       		.byte	0x3
 958 0431 00       		.byte	0
 959 0432 05       		.uleb128 0x5
 960 0433 37040000 		.4byte	0x437
 961 0437 06       		.uleb128 0x6
 962 0438 22040000 		.4byte	0x422
 963 043c 0C       		.uleb128 0xc
 964 043d 57000000 		.4byte	0x57
 965 0441 4C040000 		.4byte	0x44c
 966 0445 0D       		.uleb128 0xd
 967 0446 7E000000 		.4byte	0x7e
 968 044a 04       		.byte	0x4
 969 044b 00       		.byte	0
 970 044c 05       		.uleb128 0x5
ARM GAS  /tmp/cc1T14q7.s 			page 50


 971 044d 51040000 		.4byte	0x451
 972 0451 06       		.uleb128 0x6
 973 0452 3C040000 		.4byte	0x43c
 974 0456 03       		.uleb128 0x3
 975 0457 B6000000 		.4byte	.LASF78
 976 045b 01       		.byte	0x1
 977 045c B0       		.byte	0xb0
 978 045d E0020000 		.4byte	0x2e0
 979 0461 10       		.uleb128 0x10
 980 0462 10       		.byte	0x10
 981 0463 01       		.byte	0x1
 982 0464 6D01     		.2byte	0x16d
 983 0466 A7040000 		.4byte	0x4a7
 984 046a 11       		.uleb128 0x11
 985 046b 85000000 		.4byte	.LASF79
 986 046f 01       		.byte	0x1
 987 0470 6F01     		.2byte	0x16f
 988 0472 8F000000 		.4byte	0x8f
 989 0476 02       		.byte	0x2
 990 0477 23       		.byte	0x23
 991 0478 00       		.uleb128 0
 992 0479 11       		.uleb128 0x11
 993 047a 9F030000 		.4byte	.LASF80
 994 047e 01       		.byte	0x1
 995 047f 7001     		.2byte	0x170
 996 0481 8F000000 		.4byte	0x8f
 997 0485 02       		.byte	0x2
 998 0486 23       		.byte	0x23
 999 0487 04       		.uleb128 0x4
 1000 0488 12       		.uleb128 0x12
 1001 0489 56414C00 		.ascii	"VAL\000"
 1002 048d 01       		.byte	0x1
 1003 048e 7101     		.2byte	0x171
 1004 0490 8F000000 		.4byte	0x8f
 1005 0494 02       		.byte	0x2
 1006 0495 23       		.byte	0x23
 1007 0496 08       		.uleb128 0x8
 1008 0497 11       		.uleb128 0x11
 1009 0498 56010000 		.4byte	.LASF81
 1010 049c 01       		.byte	0x1
 1011 049d 7201     		.2byte	0x172
 1012 049f 85000000 		.4byte	0x85
 1013 04a3 02       		.byte	0x2
 1014 04a4 23       		.byte	0x23
 1015 04a5 0C       		.uleb128 0xc
 1016 04a6 00       		.byte	0
 1017 04a7 13       		.uleb128 0x13
 1018 04a8 68020000 		.4byte	.LASF82
 1019 04ac 01       		.byte	0x1
 1020 04ad 7301     		.2byte	0x173
 1021 04af 61040000 		.4byte	0x461
 1022 04b3 02       		.uleb128 0x2
 1023 04b4 01       		.byte	0x1
 1024 04b5 08       		.byte	0x8
 1025 04b6 A5020000 		.4byte	.LASF83
 1026 04ba 14       		.uleb128 0x14
 1027 04bb B6030000 		.4byte	.LASF98
ARM GAS  /tmp/cc1T14q7.s 			page 51


 1028 04bf 01       		.byte	0x1
 1029 04c0 BB04     		.2byte	0x4bb
 1030 04c2 01       		.byte	0x1
 1031 04c3 00000000 		.4byte	.LFB5
 1032 04c7 0C000000 		.4byte	.LFE5
 1033 04cb 00000000 		.4byte	.LLST0
 1034 04cf 15       		.uleb128 0x15
 1035 04d0 93000000 		.4byte	.LASF99
 1036 04d4 01       		.byte	0x1
 1037 04d5 3206     		.2byte	0x632
 1038 04d7 01       		.byte	0x1
 1039 04d8 00000000 		.4byte	.LFB20
 1040 04dc 5C000000 		.4byte	.LFE20
 1041 04e0 2C000000 		.4byte	.LLST1
 1042 04e4 07050000 		.4byte	0x507
 1043 04e8 16       		.uleb128 0x16
 1044 04e9 66000000 		.4byte	.LASF84
 1045 04ed 01       		.byte	0x1
 1046 04ee 3206     		.2byte	0x632
 1047 04f0 91010000 		.4byte	0x191
 1048 04f4 02       		.byte	0x2
 1049 04f5 91       		.byte	0x91
 1050 04f6 77       		.sleb128 -9
 1051 04f7 16       		.uleb128 0x16
 1052 04f8 18000000 		.4byte	.LASF85
 1053 04fc 01       		.byte	0x1
 1054 04fd 3206     		.2byte	0x632
 1055 04ff 57000000 		.4byte	0x57
 1056 0503 02       		.byte	0x2
 1057 0504 91       		.byte	0x91
 1058 0505 70       		.sleb128 -16
 1059 0506 00       		.byte	0
 1060 0507 17       		.uleb128 0x17
 1061 0508 F1000000 		.4byte	.LASF100
 1062 050c 01       		.byte	0x1
 1063 050d 9E06     		.2byte	0x69e
 1064 050f 01       		.byte	0x1
 1065 0510 57000000 		.4byte	0x57
 1066 0514 00000000 		.4byte	.LFB24
 1067 0518 62000000 		.4byte	.LFE24
 1068 051c 64000000 		.4byte	.LLST2
 1069 0520 34050000 		.4byte	0x534
 1070 0524 16       		.uleb128 0x16
 1071 0525 00000000 		.4byte	.LASF86
 1072 0529 01       		.byte	0x1
 1073 052a 9E06     		.2byte	0x69e
 1074 052c 57000000 		.4byte	0x57
 1075 0530 02       		.byte	0x2
 1076 0531 91       		.byte	0x91
 1077 0532 74       		.sleb128 -12
 1078 0533 00       		.byte	0
 1079 0534 18       		.uleb128 0x18
 1080 0535 01       		.byte	0x1
 1081 0536 81030000 		.4byte	.LASF101
 1082 053a 02       		.byte	0x2
 1083 053b 37       		.byte	0x37
 1084 053c 01       		.byte	0x1
ARM GAS  /tmp/cc1T14q7.s 			page 52


 1085 053d 00000000 		.4byte	.LFB35
 1086 0541 2E000000 		.4byte	.LFE35
 1087 0545 9C000000 		.4byte	.LLST3
 1088 0549 19       		.uleb128 0x19
 1089 054a 01       		.byte	0x1
 1090 054b 92020000 		.4byte	.LASF102
 1091 054f 02       		.byte	0x2
 1092 0550 43       		.byte	0x43
 1093 0551 01       		.byte	0x1
 1094 0552 57000000 		.4byte	0x57
 1095 0556 00000000 		.4byte	.LFB36
 1096 055a 3A000000 		.4byte	.LFE36
 1097 055e C8000000 		.4byte	.LLST4
 1098 0562 75050000 		.4byte	0x575
 1099 0566 1A       		.uleb128 0x1a
 1100 0567 60020000 		.4byte	.LASF87
 1101 056b 02       		.byte	0x2
 1102 056c 43       		.byte	0x43
 1103 056d 57000000 		.4byte	0x57
 1104 0571 02       		.byte	0x2
 1105 0572 91       		.byte	0x91
 1106 0573 74       		.sleb128 -12
 1107 0574 00       		.byte	0
 1108 0575 1B       		.uleb128 0x1b
 1109 0576 01       		.byte	0x1
 1110 0577 D3020000 		.4byte	.LASF103
 1111 057b 02       		.byte	0x2
 1112 057c 4C       		.byte	0x4c
 1113 057d 01       		.byte	0x1
 1114 057e 57000000 		.4byte	0x57
 1115 0582 00000000 		.4byte	.LFB37
 1116 0586 16000000 		.4byte	.LFE37
 1117 058a 00010000 		.4byte	.LLST5
 1118 058e 1C       		.uleb128 0x1c
 1119 058f 01       		.byte	0x1
 1120 0590 AA010000 		.4byte	.LASF91
 1121 0594 02       		.byte	0x2
 1122 0595 54       		.byte	0x54
 1123 0596 01       		.byte	0x1
 1124 0597 00000000 		.4byte	.LFB38
 1125 059b 36000000 		.4byte	.LFE38
 1126 059f 2C010000 		.4byte	.LLST6
 1127 05a3 D2050000 		.4byte	0x5d2
 1128 05a7 1A       		.uleb128 0x1a
 1129 05a8 91030000 		.4byte	.LASF88
 1130 05ac 02       		.byte	0x2
 1131 05ad 54       		.byte	0x54
 1132 05ae 8F000000 		.4byte	0x8f
 1133 05b2 02       		.byte	0x2
 1134 05b3 91       		.byte	0x91
 1135 05b4 6C       		.sleb128 -20
 1136 05b5 1D       		.uleb128 0x1d
 1137 05b6 DF000000 		.4byte	.LASF89
 1138 05ba 02       		.byte	0x2
 1139 05bb 56       		.byte	0x56
 1140 05bc 57000000 		.4byte	0x57
 1141 05c0 02       		.byte	0x2
ARM GAS  /tmp/cc1T14q7.s 			page 53


 1142 05c1 91       		.byte	0x91
 1143 05c2 74       		.sleb128 -12
 1144 05c3 1D       		.uleb128 0x1d
 1145 05c4 C1030000 		.4byte	.LASF90
 1146 05c8 02       		.byte	0x2
 1147 05c9 57       		.byte	0x57
 1148 05ca 57000000 		.4byte	0x57
 1149 05ce 02       		.byte	0x2
 1150 05cf 91       		.byte	0x91
 1151 05d0 70       		.sleb128 -16
 1152 05d1 00       		.byte	0
 1153 05d2 1C       		.uleb128 0x1c
 1154 05d3 01       		.byte	0x1
 1155 05d4 44000000 		.4byte	.LASF92
 1156 05d8 02       		.byte	0x2
 1157 05d9 63       		.byte	0x63
 1158 05da 01       		.byte	0x1
 1159 05db 00000000 		.4byte	.LFB39
 1160 05df 3C000000 		.4byte	.LFE39
 1161 05e3 64010000 		.4byte	.LLST7
 1162 05e7 16060000 		.4byte	0x616
 1163 05eb 1A       		.uleb128 0x1a
 1164 05ec 91030000 		.4byte	.LASF88
 1165 05f0 02       		.byte	0x2
 1166 05f1 63       		.byte	0x63
 1167 05f2 8F000000 		.4byte	0x8f
 1168 05f6 02       		.byte	0x2
 1169 05f7 91       		.byte	0x91
 1170 05f8 6C       		.sleb128 -20
 1171 05f9 1D       		.uleb128 0x1d
 1172 05fa DF000000 		.4byte	.LASF89
 1173 05fe 02       		.byte	0x2
 1174 05ff 65       		.byte	0x65
 1175 0600 57000000 		.4byte	0x57
 1176 0604 02       		.byte	0x2
 1177 0605 91       		.byte	0x91
 1178 0606 74       		.sleb128 -12
 1179 0607 1D       		.uleb128 0x1d
 1180 0608 C1030000 		.4byte	.LASF90
 1181 060c 02       		.byte	0x2
 1182 060d 66       		.byte	0x66
 1183 060e 57000000 		.4byte	0x57
 1184 0612 02       		.byte	0x2
 1185 0613 91       		.byte	0x91
 1186 0614 70       		.sleb128 -16
 1187 0615 00       		.byte	0
 1188 0616 1E       		.uleb128 0x1e
 1189 0617 D4030000 		.4byte	.LASF94
 1190 061b 01       		.byte	0x1
 1191 061c CE06     		.2byte	0x6ce
 1192 061e 24060000 		.4byte	0x624
 1193 0622 01       		.byte	0x1
 1194 0623 01       		.byte	0x1
 1195 0624 06       		.uleb128 0x6
 1196 0625 77000000 		.4byte	0x77
 1197 0629 1D       		.uleb128 0x1d
 1198 062a 18010000 		.4byte	.LASF93
ARM GAS  /tmp/cc1T14q7.s 			page 54


 1199 062e 02       		.byte	0x2
 1200 062f 2E       		.byte	0x2e
 1201 0630 8F000000 		.4byte	0x8f
 1202 0634 05       		.byte	0x5
 1203 0635 03       		.byte	0x3
 1204 0636 00000000 		.4byte	_dwTickCount
 1205 063a 1E       		.uleb128 0x1e
 1206 063b D4030000 		.4byte	.LASF94
 1207 063f 01       		.byte	0x1
 1208 0640 CE06     		.2byte	0x6ce
 1209 0642 24060000 		.4byte	0x624
 1210 0646 01       		.byte	0x1
 1211 0647 01       		.byte	0x1
 1212 0648 00       		.byte	0
 1213              		.section	.debug_abbrev,"",%progbits
 1214              	.Ldebug_abbrev0:
 1215 0000 01       		.uleb128 0x1
 1216 0001 11       		.uleb128 0x11
 1217 0002 01       		.byte	0x1
 1218 0003 25       		.uleb128 0x25
 1219 0004 0E       		.uleb128 0xe
 1220 0005 13       		.uleb128 0x13
 1221 0006 0B       		.uleb128 0xb
 1222 0007 03       		.uleb128 0x3
 1223 0008 0E       		.uleb128 0xe
 1224 0009 1B       		.uleb128 0x1b
 1225 000a 0E       		.uleb128 0xe
 1226 000b 11       		.uleb128 0x11
 1227 000c 01       		.uleb128 0x1
 1228 000d 52       		.uleb128 0x52
 1229 000e 01       		.uleb128 0x1
 1230 000f 55       		.uleb128 0x55
 1231 0010 06       		.uleb128 0x6
 1232 0011 10       		.uleb128 0x10
 1233 0012 06       		.uleb128 0x6
 1234 0013 00       		.byte	0
 1235 0014 00       		.byte	0
 1236 0015 02       		.uleb128 0x2
 1237 0016 24       		.uleb128 0x24
 1238 0017 00       		.byte	0
 1239 0018 0B       		.uleb128 0xb
 1240 0019 0B       		.uleb128 0xb
 1241 001a 3E       		.uleb128 0x3e
 1242 001b 0B       		.uleb128 0xb
 1243 001c 03       		.uleb128 0x3
 1244 001d 0E       		.uleb128 0xe
 1245 001e 00       		.byte	0
 1246 001f 00       		.byte	0
 1247 0020 03       		.uleb128 0x3
 1248 0021 16       		.uleb128 0x16
 1249 0022 00       		.byte	0
 1250 0023 03       		.uleb128 0x3
 1251 0024 0E       		.uleb128 0xe
 1252 0025 3A       		.uleb128 0x3a
 1253 0026 0B       		.uleb128 0xb
 1254 0027 3B       		.uleb128 0x3b
 1255 0028 0B       		.uleb128 0xb
ARM GAS  /tmp/cc1T14q7.s 			page 55


 1256 0029 49       		.uleb128 0x49
 1257 002a 13       		.uleb128 0x13
 1258 002b 00       		.byte	0
 1259 002c 00       		.byte	0
 1260 002d 04       		.uleb128 0x4
 1261 002e 24       		.uleb128 0x24
 1262 002f 00       		.byte	0
 1263 0030 0B       		.uleb128 0xb
 1264 0031 0B       		.uleb128 0xb
 1265 0032 3E       		.uleb128 0x3e
 1266 0033 0B       		.uleb128 0xb
 1267 0034 03       		.uleb128 0x3
 1268 0035 08       		.uleb128 0x8
 1269 0036 00       		.byte	0
 1270 0037 00       		.byte	0
 1271 0038 05       		.uleb128 0x5
 1272 0039 26       		.uleb128 0x26
 1273 003a 00       		.byte	0
 1274 003b 49       		.uleb128 0x49
 1275 003c 13       		.uleb128 0x13
 1276 003d 00       		.byte	0
 1277 003e 00       		.byte	0
 1278 003f 06       		.uleb128 0x6
 1279 0040 35       		.uleb128 0x35
 1280 0041 00       		.byte	0
 1281 0042 49       		.uleb128 0x49
 1282 0043 13       		.uleb128 0x13
 1283 0044 00       		.byte	0
 1284 0045 00       		.byte	0
 1285 0046 07       		.uleb128 0x7
 1286 0047 04       		.uleb128 0x4
 1287 0048 01       		.byte	0x1
 1288 0049 03       		.uleb128 0x3
 1289 004a 0E       		.uleb128 0xe
 1290 004b 0B       		.uleb128 0xb
 1291 004c 0B       		.uleb128 0xb
 1292 004d 3A       		.uleb128 0x3a
 1293 004e 0B       		.uleb128 0xb
 1294 004f 3B       		.uleb128 0x3b
 1295 0050 0B       		.uleb128 0xb
 1296 0051 01       		.uleb128 0x1
 1297 0052 13       		.uleb128 0x13
 1298 0053 00       		.byte	0
 1299 0054 00       		.byte	0
 1300 0055 08       		.uleb128 0x8
 1301 0056 28       		.uleb128 0x28
 1302 0057 00       		.byte	0
 1303 0058 03       		.uleb128 0x3
 1304 0059 0E       		.uleb128 0xe
 1305 005a 1C       		.uleb128 0x1c
 1306 005b 0D       		.uleb128 0xd
 1307 005c 00       		.byte	0
 1308 005d 00       		.byte	0
 1309 005e 09       		.uleb128 0x9
 1310 005f 13       		.uleb128 0x13
 1311 0060 01       		.byte	0x1
 1312 0061 0B       		.uleb128 0xb
ARM GAS  /tmp/cc1T14q7.s 			page 56


 1313 0062 05       		.uleb128 0x5
 1314 0063 3A       		.uleb128 0x3a
 1315 0064 0B       		.uleb128 0xb
 1316 0065 3B       		.uleb128 0x3b
 1317 0066 0B       		.uleb128 0xb
 1318 0067 01       		.uleb128 0x1
 1319 0068 13       		.uleb128 0x13
 1320 0069 00       		.byte	0
 1321 006a 00       		.byte	0
 1322 006b 0A       		.uleb128 0xa
 1323 006c 0D       		.uleb128 0xd
 1324 006d 00       		.byte	0
 1325 006e 03       		.uleb128 0x3
 1326 006f 0E       		.uleb128 0xe
 1327 0070 3A       		.uleb128 0x3a
 1328 0071 0B       		.uleb128 0xb
 1329 0072 3B       		.uleb128 0x3b
 1330 0073 0B       		.uleb128 0xb
 1331 0074 49       		.uleb128 0x49
 1332 0075 13       		.uleb128 0x13
 1333 0076 38       		.uleb128 0x38
 1334 0077 0A       		.uleb128 0xa
 1335 0078 00       		.byte	0
 1336 0079 00       		.byte	0
 1337 007a 0B       		.uleb128 0xb
 1338 007b 0D       		.uleb128 0xd
 1339 007c 00       		.byte	0
 1340 007d 03       		.uleb128 0x3
 1341 007e 08       		.uleb128 0x8
 1342 007f 3A       		.uleb128 0x3a
 1343 0080 0B       		.uleb128 0xb
 1344 0081 3B       		.uleb128 0x3b
 1345 0082 0B       		.uleb128 0xb
 1346 0083 49       		.uleb128 0x49
 1347 0084 13       		.uleb128 0x13
 1348 0085 38       		.uleb128 0x38
 1349 0086 0A       		.uleb128 0xa
 1350 0087 00       		.byte	0
 1351 0088 00       		.byte	0
 1352 0089 0C       		.uleb128 0xc
 1353 008a 01       		.uleb128 0x1
 1354 008b 01       		.byte	0x1
 1355 008c 49       		.uleb128 0x49
 1356 008d 13       		.uleb128 0x13
 1357 008e 01       		.uleb128 0x1
 1358 008f 13       		.uleb128 0x13
 1359 0090 00       		.byte	0
 1360 0091 00       		.byte	0
 1361 0092 0D       		.uleb128 0xd
 1362 0093 21       		.uleb128 0x21
 1363 0094 00       		.byte	0
 1364 0095 49       		.uleb128 0x49
 1365 0096 13       		.uleb128 0x13
 1366 0097 2F       		.uleb128 0x2f
 1367 0098 0B       		.uleb128 0xb
 1368 0099 00       		.byte	0
 1369 009a 00       		.byte	0
ARM GAS  /tmp/cc1T14q7.s 			page 57


 1370 009b 0E       		.uleb128 0xe
 1371 009c 21       		.uleb128 0x21
 1372 009d 00       		.byte	0
 1373 009e 49       		.uleb128 0x49
 1374 009f 13       		.uleb128 0x13
 1375 00a0 2F       		.uleb128 0x2f
 1376 00a1 05       		.uleb128 0x5
 1377 00a2 00       		.byte	0
 1378 00a3 00       		.byte	0
 1379 00a4 0F       		.uleb128 0xf
 1380 00a5 13       		.uleb128 0x13
 1381 00a6 01       		.byte	0x1
 1382 00a7 0B       		.uleb128 0xb
 1383 00a8 0B       		.uleb128 0xb
 1384 00a9 3A       		.uleb128 0x3a
 1385 00aa 0B       		.uleb128 0xb
 1386 00ab 3B       		.uleb128 0x3b
 1387 00ac 0B       		.uleb128 0xb
 1388 00ad 01       		.uleb128 0x1
 1389 00ae 13       		.uleb128 0x13
 1390 00af 00       		.byte	0
 1391 00b0 00       		.byte	0
 1392 00b1 10       		.uleb128 0x10
 1393 00b2 13       		.uleb128 0x13
 1394 00b3 01       		.byte	0x1
 1395 00b4 0B       		.uleb128 0xb
 1396 00b5 0B       		.uleb128 0xb
 1397 00b6 3A       		.uleb128 0x3a
 1398 00b7 0B       		.uleb128 0xb
 1399 00b8 3B       		.uleb128 0x3b
 1400 00b9 05       		.uleb128 0x5
 1401 00ba 01       		.uleb128 0x1
 1402 00bb 13       		.uleb128 0x13
 1403 00bc 00       		.byte	0
 1404 00bd 00       		.byte	0
 1405 00be 11       		.uleb128 0x11
 1406 00bf 0D       		.uleb128 0xd
 1407 00c0 00       		.byte	0
 1408 00c1 03       		.uleb128 0x3
 1409 00c2 0E       		.uleb128 0xe
 1410 00c3 3A       		.uleb128 0x3a
 1411 00c4 0B       		.uleb128 0xb
 1412 00c5 3B       		.uleb128 0x3b
 1413 00c6 05       		.uleb128 0x5
 1414 00c7 49       		.uleb128 0x49
 1415 00c8 13       		.uleb128 0x13
 1416 00c9 38       		.uleb128 0x38
 1417 00ca 0A       		.uleb128 0xa
 1418 00cb 00       		.byte	0
 1419 00cc 00       		.byte	0
 1420 00cd 12       		.uleb128 0x12
 1421 00ce 0D       		.uleb128 0xd
 1422 00cf 00       		.byte	0
 1423 00d0 03       		.uleb128 0x3
 1424 00d1 08       		.uleb128 0x8
 1425 00d2 3A       		.uleb128 0x3a
 1426 00d3 0B       		.uleb128 0xb
ARM GAS  /tmp/cc1T14q7.s 			page 58


 1427 00d4 3B       		.uleb128 0x3b
 1428 00d5 05       		.uleb128 0x5
 1429 00d6 49       		.uleb128 0x49
 1430 00d7 13       		.uleb128 0x13
 1431 00d8 38       		.uleb128 0x38
 1432 00d9 0A       		.uleb128 0xa
 1433 00da 00       		.byte	0
 1434 00db 00       		.byte	0
 1435 00dc 13       		.uleb128 0x13
 1436 00dd 16       		.uleb128 0x16
 1437 00de 00       		.byte	0
 1438 00df 03       		.uleb128 0x3
 1439 00e0 0E       		.uleb128 0xe
 1440 00e1 3A       		.uleb128 0x3a
 1441 00e2 0B       		.uleb128 0xb
 1442 00e3 3B       		.uleb128 0x3b
 1443 00e4 05       		.uleb128 0x5
 1444 00e5 49       		.uleb128 0x49
 1445 00e6 13       		.uleb128 0x13
 1446 00e7 00       		.byte	0
 1447 00e8 00       		.byte	0
 1448 00e9 14       		.uleb128 0x14
 1449 00ea 2E       		.uleb128 0x2e
 1450 00eb 00       		.byte	0
 1451 00ec 03       		.uleb128 0x3
 1452 00ed 0E       		.uleb128 0xe
 1453 00ee 3A       		.uleb128 0x3a
 1454 00ef 0B       		.uleb128 0xb
 1455 00f0 3B       		.uleb128 0x3b
 1456 00f1 05       		.uleb128 0x5
 1457 00f2 27       		.uleb128 0x27
 1458 00f3 0C       		.uleb128 0xc
 1459 00f4 11       		.uleb128 0x11
 1460 00f5 01       		.uleb128 0x1
 1461 00f6 12       		.uleb128 0x12
 1462 00f7 01       		.uleb128 0x1
 1463 00f8 40       		.uleb128 0x40
 1464 00f9 06       		.uleb128 0x6
 1465 00fa 00       		.byte	0
 1466 00fb 00       		.byte	0
 1467 00fc 15       		.uleb128 0x15
 1468 00fd 2E       		.uleb128 0x2e
 1469 00fe 01       		.byte	0x1
 1470 00ff 03       		.uleb128 0x3
 1471 0100 0E       		.uleb128 0xe
 1472 0101 3A       		.uleb128 0x3a
 1473 0102 0B       		.uleb128 0xb
 1474 0103 3B       		.uleb128 0x3b
 1475 0104 05       		.uleb128 0x5
 1476 0105 27       		.uleb128 0x27
 1477 0106 0C       		.uleb128 0xc
 1478 0107 11       		.uleb128 0x11
 1479 0108 01       		.uleb128 0x1
 1480 0109 12       		.uleb128 0x12
 1481 010a 01       		.uleb128 0x1
 1482 010b 40       		.uleb128 0x40
 1483 010c 06       		.uleb128 0x6
ARM GAS  /tmp/cc1T14q7.s 			page 59


 1484 010d 01       		.uleb128 0x1
 1485 010e 13       		.uleb128 0x13
 1486 010f 00       		.byte	0
 1487 0110 00       		.byte	0
 1488 0111 16       		.uleb128 0x16
 1489 0112 05       		.uleb128 0x5
 1490 0113 00       		.byte	0
 1491 0114 03       		.uleb128 0x3
 1492 0115 0E       		.uleb128 0xe
 1493 0116 3A       		.uleb128 0x3a
 1494 0117 0B       		.uleb128 0xb
 1495 0118 3B       		.uleb128 0x3b
 1496 0119 05       		.uleb128 0x5
 1497 011a 49       		.uleb128 0x49
 1498 011b 13       		.uleb128 0x13
 1499 011c 02       		.uleb128 0x2
 1500 011d 0A       		.uleb128 0xa
 1501 011e 00       		.byte	0
 1502 011f 00       		.byte	0
 1503 0120 17       		.uleb128 0x17
 1504 0121 2E       		.uleb128 0x2e
 1505 0122 01       		.byte	0x1
 1506 0123 03       		.uleb128 0x3
 1507 0124 0E       		.uleb128 0xe
 1508 0125 3A       		.uleb128 0x3a
 1509 0126 0B       		.uleb128 0xb
 1510 0127 3B       		.uleb128 0x3b
 1511 0128 05       		.uleb128 0x5
 1512 0129 27       		.uleb128 0x27
 1513 012a 0C       		.uleb128 0xc
 1514 012b 49       		.uleb128 0x49
 1515 012c 13       		.uleb128 0x13
 1516 012d 11       		.uleb128 0x11
 1517 012e 01       		.uleb128 0x1
 1518 012f 12       		.uleb128 0x12
 1519 0130 01       		.uleb128 0x1
 1520 0131 40       		.uleb128 0x40
 1521 0132 06       		.uleb128 0x6
 1522 0133 01       		.uleb128 0x1
 1523 0134 13       		.uleb128 0x13
 1524 0135 00       		.byte	0
 1525 0136 00       		.byte	0
 1526 0137 18       		.uleb128 0x18
 1527 0138 2E       		.uleb128 0x2e
 1528 0139 00       		.byte	0
 1529 013a 3F       		.uleb128 0x3f
 1530 013b 0C       		.uleb128 0xc
 1531 013c 03       		.uleb128 0x3
 1532 013d 0E       		.uleb128 0xe
 1533 013e 3A       		.uleb128 0x3a
 1534 013f 0B       		.uleb128 0xb
 1535 0140 3B       		.uleb128 0x3b
 1536 0141 0B       		.uleb128 0xb
 1537 0142 27       		.uleb128 0x27
 1538 0143 0C       		.uleb128 0xc
 1539 0144 11       		.uleb128 0x11
 1540 0145 01       		.uleb128 0x1
ARM GAS  /tmp/cc1T14q7.s 			page 60


 1541 0146 12       		.uleb128 0x12
 1542 0147 01       		.uleb128 0x1
 1543 0148 40       		.uleb128 0x40
 1544 0149 06       		.uleb128 0x6
 1545 014a 00       		.byte	0
 1546 014b 00       		.byte	0
 1547 014c 19       		.uleb128 0x19
 1548 014d 2E       		.uleb128 0x2e
 1549 014e 01       		.byte	0x1
 1550 014f 3F       		.uleb128 0x3f
 1551 0150 0C       		.uleb128 0xc
 1552 0151 03       		.uleb128 0x3
 1553 0152 0E       		.uleb128 0xe
 1554 0153 3A       		.uleb128 0x3a
 1555 0154 0B       		.uleb128 0xb
 1556 0155 3B       		.uleb128 0x3b
 1557 0156 0B       		.uleb128 0xb
 1558 0157 27       		.uleb128 0x27
 1559 0158 0C       		.uleb128 0xc
 1560 0159 49       		.uleb128 0x49
 1561 015a 13       		.uleb128 0x13
 1562 015b 11       		.uleb128 0x11
 1563 015c 01       		.uleb128 0x1
 1564 015d 12       		.uleb128 0x12
 1565 015e 01       		.uleb128 0x1
 1566 015f 40       		.uleb128 0x40
 1567 0160 06       		.uleb128 0x6
 1568 0161 01       		.uleb128 0x1
 1569 0162 13       		.uleb128 0x13
 1570 0163 00       		.byte	0
 1571 0164 00       		.byte	0
 1572 0165 1A       		.uleb128 0x1a
 1573 0166 05       		.uleb128 0x5
 1574 0167 00       		.byte	0
 1575 0168 03       		.uleb128 0x3
 1576 0169 0E       		.uleb128 0xe
 1577 016a 3A       		.uleb128 0x3a
 1578 016b 0B       		.uleb128 0xb
 1579 016c 3B       		.uleb128 0x3b
 1580 016d 0B       		.uleb128 0xb
 1581 016e 49       		.uleb128 0x49
 1582 016f 13       		.uleb128 0x13
 1583 0170 02       		.uleb128 0x2
 1584 0171 0A       		.uleb128 0xa
 1585 0172 00       		.byte	0
 1586 0173 00       		.byte	0
 1587 0174 1B       		.uleb128 0x1b
 1588 0175 2E       		.uleb128 0x2e
 1589 0176 00       		.byte	0
 1590 0177 3F       		.uleb128 0x3f
 1591 0178 0C       		.uleb128 0xc
 1592 0179 03       		.uleb128 0x3
 1593 017a 0E       		.uleb128 0xe
 1594 017b 3A       		.uleb128 0x3a
 1595 017c 0B       		.uleb128 0xb
 1596 017d 3B       		.uleb128 0x3b
 1597 017e 0B       		.uleb128 0xb
ARM GAS  /tmp/cc1T14q7.s 			page 61


 1598 017f 27       		.uleb128 0x27
 1599 0180 0C       		.uleb128 0xc
 1600 0181 49       		.uleb128 0x49
 1601 0182 13       		.uleb128 0x13
 1602 0183 11       		.uleb128 0x11
 1603 0184 01       		.uleb128 0x1
 1604 0185 12       		.uleb128 0x12
 1605 0186 01       		.uleb128 0x1
 1606 0187 40       		.uleb128 0x40
 1607 0188 06       		.uleb128 0x6
 1608 0189 00       		.byte	0
 1609 018a 00       		.byte	0
 1610 018b 1C       		.uleb128 0x1c
 1611 018c 2E       		.uleb128 0x2e
 1612 018d 01       		.byte	0x1
 1613 018e 3F       		.uleb128 0x3f
 1614 018f 0C       		.uleb128 0xc
 1615 0190 03       		.uleb128 0x3
 1616 0191 0E       		.uleb128 0xe
 1617 0192 3A       		.uleb128 0x3a
 1618 0193 0B       		.uleb128 0xb
 1619 0194 3B       		.uleb128 0x3b
 1620 0195 0B       		.uleb128 0xb
 1621 0196 27       		.uleb128 0x27
 1622 0197 0C       		.uleb128 0xc
 1623 0198 11       		.uleb128 0x11
 1624 0199 01       		.uleb128 0x1
 1625 019a 12       		.uleb128 0x12
 1626 019b 01       		.uleb128 0x1
 1627 019c 40       		.uleb128 0x40
 1628 019d 06       		.uleb128 0x6
 1629 019e 01       		.uleb128 0x1
 1630 019f 13       		.uleb128 0x13
 1631 01a0 00       		.byte	0
 1632 01a1 00       		.byte	0
 1633 01a2 1D       		.uleb128 0x1d
 1634 01a3 34       		.uleb128 0x34
 1635 01a4 00       		.byte	0
 1636 01a5 03       		.uleb128 0x3
 1637 01a6 0E       		.uleb128 0xe
 1638 01a7 3A       		.uleb128 0x3a
 1639 01a8 0B       		.uleb128 0xb
 1640 01a9 3B       		.uleb128 0x3b
 1641 01aa 0B       		.uleb128 0xb
 1642 01ab 49       		.uleb128 0x49
 1643 01ac 13       		.uleb128 0x13
 1644 01ad 02       		.uleb128 0x2
 1645 01ae 0A       		.uleb128 0xa
 1646 01af 00       		.byte	0
 1647 01b0 00       		.byte	0
 1648 01b1 1E       		.uleb128 0x1e
 1649 01b2 34       		.uleb128 0x34
 1650 01b3 00       		.byte	0
 1651 01b4 03       		.uleb128 0x3
 1652 01b5 0E       		.uleb128 0xe
 1653 01b6 3A       		.uleb128 0x3a
 1654 01b7 0B       		.uleb128 0xb
ARM GAS  /tmp/cc1T14q7.s 			page 62


 1655 01b8 3B       		.uleb128 0x3b
 1656 01b9 05       		.uleb128 0x5
 1657 01ba 49       		.uleb128 0x49
 1658 01bb 13       		.uleb128 0x13
 1659 01bc 3F       		.uleb128 0x3f
 1660 01bd 0C       		.uleb128 0xc
 1661 01be 3C       		.uleb128 0x3c
 1662 01bf 0C       		.uleb128 0xc
 1663 01c0 00       		.byte	0
 1664 01c1 00       		.byte	0
 1665 01c2 00       		.byte	0
 1666              		.section	.debug_loc,"",%progbits
 1667              	.Ldebug_loc0:
 1668              	.LLST0:
 1669 0000 00000000 		.4byte	.LFB5
 1670 0004 02000000 		.4byte	.LCFI0
 1671 0008 0200     		.2byte	0x2
 1672 000a 7D       		.byte	0x7d
 1673 000b 00       		.sleb128 0
 1674 000c 02000000 		.4byte	.LCFI0
 1675 0010 04000000 		.4byte	.LCFI1
 1676 0014 0200     		.2byte	0x2
 1677 0016 7D       		.byte	0x7d
 1678 0017 04       		.sleb128 4
 1679 0018 04000000 		.4byte	.LCFI1
 1680 001c 0C000000 		.4byte	.LFE5
 1681 0020 0200     		.2byte	0x2
 1682 0022 77       		.byte	0x77
 1683 0023 04       		.sleb128 4
 1684 0024 00000000 		.4byte	0
 1685 0028 00000000 		.4byte	0
 1686              	.LLST1:
 1687 002c 00000000 		.4byte	.LFB20
 1688 0030 02000000 		.4byte	.LCFI2
 1689 0034 0200     		.2byte	0x2
 1690 0036 7D       		.byte	0x7d
 1691 0037 00       		.sleb128 0
 1692 0038 02000000 		.4byte	.LCFI2
 1693 003c 04000000 		.4byte	.LCFI3
 1694 0040 0200     		.2byte	0x2
 1695 0042 7D       		.byte	0x7d
 1696 0043 04       		.sleb128 4
 1697 0044 04000000 		.4byte	.LCFI3
 1698 0048 06000000 		.4byte	.LCFI4
 1699 004c 0200     		.2byte	0x2
 1700 004e 7D       		.byte	0x7d
 1701 004f 10       		.sleb128 16
 1702 0050 06000000 		.4byte	.LCFI4
 1703 0054 5C000000 		.4byte	.LFE20
 1704 0058 0200     		.2byte	0x2
 1705 005a 77       		.byte	0x77
 1706 005b 10       		.sleb128 16
 1707 005c 00000000 		.4byte	0
 1708 0060 00000000 		.4byte	0
 1709              	.LLST2:
 1710 0064 00000000 		.4byte	.LFB24
 1711 0068 02000000 		.4byte	.LCFI5
ARM GAS  /tmp/cc1T14q7.s 			page 63


 1712 006c 0200     		.2byte	0x2
 1713 006e 7D       		.byte	0x7d
 1714 006f 00       		.sleb128 0
 1715 0070 02000000 		.4byte	.LCFI5
 1716 0074 04000000 		.4byte	.LCFI6
 1717 0078 0200     		.2byte	0x2
 1718 007a 7D       		.byte	0x7d
 1719 007b 08       		.sleb128 8
 1720 007c 04000000 		.4byte	.LCFI6
 1721 0080 06000000 		.4byte	.LCFI7
 1722 0084 0200     		.2byte	0x2
 1723 0086 7D       		.byte	0x7d
 1724 0087 10       		.sleb128 16
 1725 0088 06000000 		.4byte	.LCFI7
 1726 008c 62000000 		.4byte	.LFE24
 1727 0090 0200     		.2byte	0x2
 1728 0092 77       		.byte	0x77
 1729 0093 10       		.sleb128 16
 1730 0094 00000000 		.4byte	0
 1731 0098 00000000 		.4byte	0
 1732              	.LLST3:
 1733 009c 00000000 		.4byte	.LFB35
 1734 00a0 02000000 		.4byte	.LCFI8
 1735 00a4 0200     		.2byte	0x2
 1736 00a6 7D       		.byte	0x7d
 1737 00a7 00       		.sleb128 0
 1738 00a8 02000000 		.4byte	.LCFI8
 1739 00ac 04000000 		.4byte	.LCFI9
 1740 00b0 0200     		.2byte	0x2
 1741 00b2 7D       		.byte	0x7d
 1742 00b3 08       		.sleb128 8
 1743 00b4 04000000 		.4byte	.LCFI9
 1744 00b8 2E000000 		.4byte	.LFE35
 1745 00bc 0200     		.2byte	0x2
 1746 00be 77       		.byte	0x77
 1747 00bf 08       		.sleb128 8
 1748 00c0 00000000 		.4byte	0
 1749 00c4 00000000 		.4byte	0
 1750              	.LLST4:
 1751 00c8 00000000 		.4byte	.LFB36
 1752 00cc 02000000 		.4byte	.LCFI10
 1753 00d0 0200     		.2byte	0x2
 1754 00d2 7D       		.byte	0x7d
 1755 00d3 00       		.sleb128 0
 1756 00d4 02000000 		.4byte	.LCFI10
 1757 00d8 04000000 		.4byte	.LCFI11
 1758 00dc 0200     		.2byte	0x2
 1759 00de 7D       		.byte	0x7d
 1760 00df 08       		.sleb128 8
 1761 00e0 04000000 		.4byte	.LCFI11
 1762 00e4 06000000 		.4byte	.LCFI12
 1763 00e8 0200     		.2byte	0x2
 1764 00ea 7D       		.byte	0x7d
 1765 00eb 10       		.sleb128 16
 1766 00ec 06000000 		.4byte	.LCFI12
 1767 00f0 3A000000 		.4byte	.LFE36
 1768 00f4 0200     		.2byte	0x2
ARM GAS  /tmp/cc1T14q7.s 			page 64


 1769 00f6 77       		.byte	0x77
 1770 00f7 10       		.sleb128 16
 1771 00f8 00000000 		.4byte	0
 1772 00fc 00000000 		.4byte	0
 1773              	.LLST5:
 1774 0100 00000000 		.4byte	.LFB37
 1775 0104 02000000 		.4byte	.LCFI13
 1776 0108 0200     		.2byte	0x2
 1777 010a 7D       		.byte	0x7d
 1778 010b 00       		.sleb128 0
 1779 010c 02000000 		.4byte	.LCFI13
 1780 0110 04000000 		.4byte	.LCFI14
 1781 0114 0200     		.2byte	0x2
 1782 0116 7D       		.byte	0x7d
 1783 0117 04       		.sleb128 4
 1784 0118 04000000 		.4byte	.LCFI14
 1785 011c 16000000 		.4byte	.LFE37
 1786 0120 0200     		.2byte	0x2
 1787 0122 77       		.byte	0x77
 1788 0123 04       		.sleb128 4
 1789 0124 00000000 		.4byte	0
 1790 0128 00000000 		.4byte	0
 1791              	.LLST6:
 1792 012c 00000000 		.4byte	.LFB38
 1793 0130 02000000 		.4byte	.LCFI15
 1794 0134 0200     		.2byte	0x2
 1795 0136 7D       		.byte	0x7d
 1796 0137 00       		.sleb128 0
 1797 0138 02000000 		.4byte	.LCFI15
 1798 013c 04000000 		.4byte	.LCFI16
 1799 0140 0200     		.2byte	0x2
 1800 0142 7D       		.byte	0x7d
 1801 0143 04       		.sleb128 4
 1802 0144 04000000 		.4byte	.LCFI16
 1803 0148 06000000 		.4byte	.LCFI17
 1804 014c 0200     		.2byte	0x2
 1805 014e 7D       		.byte	0x7d
 1806 014f 18       		.sleb128 24
 1807 0150 06000000 		.4byte	.LCFI17
 1808 0154 36000000 		.4byte	.LFE38
 1809 0158 0200     		.2byte	0x2
 1810 015a 77       		.byte	0x77
 1811 015b 18       		.sleb128 24
 1812 015c 00000000 		.4byte	0
 1813 0160 00000000 		.4byte	0
 1814              	.LLST7:
 1815 0164 00000000 		.4byte	.LFB39
 1816 0168 02000000 		.4byte	.LCFI18
 1817 016c 0200     		.2byte	0x2
 1818 016e 7D       		.byte	0x7d
 1819 016f 00       		.sleb128 0
 1820 0170 02000000 		.4byte	.LCFI18
 1821 0174 04000000 		.4byte	.LCFI19
 1822 0178 0200     		.2byte	0x2
 1823 017a 7D       		.byte	0x7d
 1824 017b 08       		.sleb128 8
 1825 017c 04000000 		.4byte	.LCFI19
ARM GAS  /tmp/cc1T14q7.s 			page 65


 1826 0180 06000000 		.4byte	.LCFI20
 1827 0184 0200     		.2byte	0x2
 1828 0186 7D       		.byte	0x7d
 1829 0187 18       		.sleb128 24
 1830 0188 06000000 		.4byte	.LCFI20
 1831 018c 3C000000 		.4byte	.LFE39
 1832 0190 0200     		.2byte	0x2
 1833 0192 77       		.byte	0x77
 1834 0193 18       		.sleb128 24
 1835 0194 00000000 		.4byte	0
 1836 0198 00000000 		.4byte	0
 1837              		.section	.debug_aranges,"",%progbits
 1838 0000 54000000 		.4byte	0x54
 1839 0004 0200     		.2byte	0x2
 1840 0006 00000000 		.4byte	.Ldebug_info0
 1841 000a 04       		.byte	0x4
 1842 000b 00       		.byte	0
 1843 000c 0000     		.2byte	0
 1844 000e 0000     		.2byte	0
 1845 0010 00000000 		.4byte	.LFB5
 1846 0014 0C000000 		.4byte	.LFE5-.LFB5
 1847 0018 00000000 		.4byte	.LFB20
 1848 001c 5C000000 		.4byte	.LFE20-.LFB20
 1849 0020 00000000 		.4byte	.LFB24
 1850 0024 62000000 		.4byte	.LFE24-.LFB24
 1851 0028 00000000 		.4byte	.LFB35
 1852 002c 2E000000 		.4byte	.LFE35-.LFB35
 1853 0030 00000000 		.4byte	.LFB36
 1854 0034 3A000000 		.4byte	.LFE36-.LFB36
 1855 0038 00000000 		.4byte	.LFB37
 1856 003c 16000000 		.4byte	.LFE37-.LFB37
 1857 0040 00000000 		.4byte	.LFB38
 1858 0044 36000000 		.4byte	.LFE38-.LFB38
 1859 0048 00000000 		.4byte	.LFB39
 1860 004c 3C000000 		.4byte	.LFE39-.LFB39
 1861 0050 00000000 		.4byte	0
 1862 0054 00000000 		.4byte	0
 1863              		.section	.debug_ranges,"",%progbits
 1864              	.Ldebug_ranges0:
 1865 0000 00000000 		.4byte	.LFB5
 1866 0004 0C000000 		.4byte	.LFE5
 1867 0008 00000000 		.4byte	.LFB20
 1868 000c 5C000000 		.4byte	.LFE20
 1869 0010 00000000 		.4byte	.LFB24
 1870 0014 62000000 		.4byte	.LFE24
 1871 0018 00000000 		.4byte	.LFB35
 1872 001c 2E000000 		.4byte	.LFE35
 1873 0020 00000000 		.4byte	.LFB36
 1874 0024 3A000000 		.4byte	.LFE36
 1875 0028 00000000 		.4byte	.LFB37
 1876 002c 16000000 		.4byte	.LFE37
 1877 0030 00000000 		.4byte	.LFB38
 1878 0034 36000000 		.4byte	.LFE38
 1879 0038 00000000 		.4byte	.LFB39
 1880 003c 3C000000 		.4byte	.LFE39
 1881 0040 00000000 		.4byte	0
 1882 0044 00000000 		.4byte	0
ARM GAS  /tmp/cc1T14q7.s 			page 66


 1883              		.section	.debug_line,"",%progbits
 1884              	.Ldebug_line0:
 1885 0000 81010000 		.section	.debug_str,"MS",%progbits,1
 1885      0200C300 
 1885      00000201 
 1885      FB0E0D00 
 1885      01010101 
 1886              	.LASF86:
 1887 0000 7469636B 		.ascii	"ticks\000"
 1887      7300
 1888              	.LASF60:
 1889 0006 49414252 		.ascii	"IABR\000"
 1889      00
 1890              	.LASF18:
 1891 000b 53797354 		.ascii	"SysTick_IRQn\000"
 1891      69636B5F 
 1891      4952516E 
 1891      00
 1892              	.LASF85:
 1893 0018 7072696F 		.ascii	"priority\000"
 1893      72697479 
 1893      00
 1894              	.LASF19:
 1895 0021 53555043 		.ascii	"SUPC_IRQn\000"
 1895      5F495251 
 1895      6E00
 1896              	.LASF73:
 1897 002b 4D4D4641 		.ascii	"MMFAR\000"
 1897      5200
 1898              	.LASF38:
 1899 0031 5353435F 		.ascii	"SSC_IRQn\000"
 1899      4952516E 
 1899      00
 1900              	.LASF2:
 1901 003a 73686F72 		.ascii	"short int\000"
 1901      7420696E 
 1901      7400
 1902              	.LASF92:
 1903 0044 536C6565 		.ascii	"Sleep\000"
 1903      7000
 1904              	.LASF36:
 1905 004a 54574931 		.ascii	"TWI1_IRQn\000"
 1905      5F495251 
 1905      6E00
 1906              	.LASF16:
 1907 0054 44656275 		.ascii	"DebugMonitor_IRQn\000"
 1907      674D6F6E 
 1907      69746F72 
 1907      5F495251 
 1907      6E00
 1908              	.LASF84:
 1909 0066 4952516E 		.ascii	"IRQn\000"
 1909      00
 1910              	.LASF22:
 1911 006b 5254545F 		.ascii	"RTT_IRQn\000"
 1911      4952516E 
 1911      00
ARM GAS  /tmp/cc1T14q7.s 			page 67


 1912              	.LASF48:
 1913 0074 43524343 		.ascii	"CRCCU_IRQn\000"
 1913      555F4952 
 1913      516E00
 1914              	.LASF65:
 1915 007f 43505549 		.ascii	"CPUID\000"
 1915      4400
 1916              	.LASF79:
 1917 0085 4354524C 		.ascii	"CTRL\000"
 1917      00
 1918              	.LASF49:
 1919 008a 4143435F 		.ascii	"ACC_IRQn\000"
 1919      4952516E 
 1919      00
 1920              	.LASF99:
 1921 0093 4E564943 		.ascii	"NVIC_SetPriority\000"
 1921      5F536574 
 1921      5072696F 
 1921      72697479 
 1921      00
 1922              	.LASF35:
 1923 00a4 54574930 		.ascii	"TWI0_IRQn\000"
 1923      5F495251 
 1923      6E00
 1924              	.LASF5:
 1925 00ae 75696E74 		.ascii	"uint8_t\000"
 1925      385F7400 
 1926              	.LASF78:
 1927 00b6 5343425F 		.ascii	"SCB_Type\000"
 1927      54797065 
 1927      00
 1928              	.LASF34:
 1929 00bf 48534D43 		.ascii	"HSMCI_IRQn\000"
 1929      495F4952 
 1929      516E00
 1930              	.LASF63:
 1931 00ca 53544952 		.ascii	"STIR\000"
 1931      00
 1932              	.LASF14:
 1933 00cf 55736167 		.ascii	"UsageFault_IRQn\000"
 1933      65466175 
 1933      6C745F49 
 1933      52516E00 
 1934              	.LASF89:
 1935 00df 64775374 		.ascii	"dwStart\000"
 1935      61727400 
 1936              	.LASF31:
 1937 00e7 50494F43 		.ascii	"PIOC_IRQn\000"
 1937      5F495251 
 1937      6E00
 1938              	.LASF100:
 1939 00f1 53797354 		.ascii	"SysTick_Config\000"
 1939      69636B5F 
 1939      436F6E66 
 1939      696700
 1940              	.LASF0:
 1941 0100 7369676E 		.ascii	"signed char\000"
ARM GAS  /tmp/cc1T14q7.s 			page 68


 1941      65642063 
 1941      68617200 
 1942              	.LASF32:
 1943 010c 55534152 		.ascii	"USART0_IRQn\000"
 1943      54305F49 
 1943      52516E00 
 1944              	.LASF93:
 1945 0118 5F647754 		.ascii	"_dwTickCount\000"
 1945      69636B43 
 1945      6F756E74 
 1945      00
 1946              	.LASF66:
 1947 0125 49435352 		.ascii	"ICSR\000"
 1947      00
 1948              	.LASF55:
 1949 012a 52534552 		.ascii	"RSERVED1\000"
 1949      56454431 
 1949      00
 1950              	.LASF28:
 1951 0133 534D435F 		.ascii	"SMC_IRQn\000"
 1951      4952516E 
 1951      00
 1952              	.LASF8:
 1953 013c 6C6F6E67 		.ascii	"long long int\000"
 1953      206C6F6E 
 1953      6720696E 
 1953      7400
 1954              	.LASF33:
 1955 014a 55534152 		.ascii	"USART1_IRQn\000"
 1955      54315F49 
 1955      52516E00 
 1956              	.LASF81:
 1957 0156 43414C49 		.ascii	"CALIB\000"
 1957      4200
 1958              	.LASF43:
 1959 015c 5443345F 		.ascii	"TC4_IRQn\000"
 1959      4952516E 
 1959      00
 1960              	.LASF74:
 1961 0165 42464152 		.ascii	"BFAR\000"
 1961      00
 1962              	.LASF17:
 1963 016a 50656E64 		.ascii	"PendSV_IRQn\000"
 1963      53565F49 
 1963      52516E00 
 1964              	.LASF4:
 1965 0176 6C6F6E67 		.ascii	"long int\000"
 1965      20696E74 
 1965      00
 1966              	.LASF37:
 1967 017f 5350495F 		.ascii	"SPI_IRQn\000"
 1967      4952516E 
 1967      00
 1968              	.LASF70:
 1969 0188 43465352 		.ascii	"CFSR\000"
 1969      00
 1970              	.LASF27:
ARM GAS  /tmp/cc1T14q7.s 			page 69


 1971 018d 55415254 		.ascii	"UART1_IRQn\000"
 1971      315F4952 
 1971      516E00
 1972              	.LASF45:
 1973 0198 4144435F 		.ascii	"ADC_IRQn\000"
 1973      4952516E 
 1973      00
 1974              	.LASF6:
 1975 01a1 75696E74 		.ascii	"uint32_t\000"
 1975      33325F74 
 1975      00
 1976              	.LASF91:
 1977 01aa 57616974 		.ascii	"Wait\000"
 1977      00
 1978              	.LASF1:
 1979 01af 756E7369 		.ascii	"unsigned char\000"
 1979      676E6564 
 1979      20636861 
 1979      7200
 1980              	.LASF96:
 1981 01bd 626F6172 		.ascii	"board/timetick.c\000"
 1981      642F7469 
 1981      6D657469 
 1981      636B2E63 
 1981      00
 1982              	.LASF51:
 1983 01ce 4952516E 		.ascii	"IRQn_Type\000"
 1983      5F547970 
 1983      6500
 1984              	.LASF64:
 1985 01d8 4E564943 		.ascii	"NVIC_Type\000"
 1985      5F547970 
 1985      6500
 1986              	.LASF20:
 1987 01e2 52535443 		.ascii	"RSTC_IRQn\000"
 1987      5F495251 
 1987      6E00
 1988              	.LASF58:
 1989 01ec 49435052 		.ascii	"ICPR\000"
 1989      00
 1990              	.LASF29:
 1991 01f1 50494F41 		.ascii	"PIOA_IRQn\000"
 1991      5F495251 
 1991      6E00
 1992              	.LASF9:
 1993 01fb 6C6F6E67 		.ascii	"long long unsigned int\000"
 1993      206C6F6E 
 1993      6720756E 
 1993      7369676E 
 1993      65642069 
 1994              	.LASF69:
 1995 0212 53484353 		.ascii	"SHCSR\000"
 1995      5200
 1996              	.LASF50:
 1997 0218 5544505F 		.ascii	"UDP_IRQn\000"
 1997      4952516E 
 1997      00
ARM GAS  /tmp/cc1T14q7.s 			page 70


 1998              	.LASF10:
 1999 0221 756E7369 		.ascii	"unsigned int\000"
 1999      676E6564 
 1999      20696E74 
 1999      00
 2000              	.LASF13:
 2001 022e 42757346 		.ascii	"BusFault_IRQn\000"
 2001      61756C74 
 2001      5F495251 
 2001      6E00
 2002              	.LASF24:
 2003 023c 504D435F 		.ascii	"PMC_IRQn\000"
 2003      4952516E 
 2003      00
 2004              	.LASF54:
 2005 0245 49434552 		.ascii	"ICER\000"
 2005      00
 2006              	.LASF15:
 2007 024a 53564361 		.ascii	"SVCall_IRQn\000"
 2007      6C6C5F49 
 2007      52516E00 
 2008              	.LASF46:
 2009 0256 44414343 		.ascii	"DACC_IRQn\000"
 2009      5F495251 
 2009      6E00
 2010              	.LASF87:
 2011 0260 6E65775F 		.ascii	"new_mck\000"
 2011      6D636B00 
 2012              	.LASF82:
 2013 0268 53797354 		.ascii	"SysTick_Type\000"
 2013      69636B5F 
 2013      54797065 
 2013      00
 2014              	.LASF3:
 2015 0275 73686F72 		.ascii	"short unsigned int\000"
 2015      7420756E 
 2015      7369676E 
 2015      65642069 
 2015      6E7400
 2016              	.LASF30:
 2017 0288 50494F42 		.ascii	"PIOB_IRQn\000"
 2017      5F495251 
 2017      6E00
 2018              	.LASF102:
 2019 0292 54696D65 		.ascii	"TimeTick_Configure\000"
 2019      5469636B 
 2019      5F436F6E 
 2019      66696775 
 2019      726500
 2020              	.LASF83:
 2021 02a5 63686172 		.ascii	"char\000"
 2021      00
 2022              	.LASF67:
 2023 02aa 56544F52 		.ascii	"VTOR\000"
 2023      00
 2024              	.LASF47:
 2025 02af 50574D5F 		.ascii	"PWM_IRQn\000"
ARM GAS  /tmp/cc1T14q7.s 			page 71


 2025      4952516E 
 2025      00
 2026              	.LASF77:
 2027 02b8 49534152 		.ascii	"ISAR\000"
 2027      00
 2028              	.LASF56:
 2029 02bd 49535052 		.ascii	"ISPR\000"
 2029      00
 2030              	.LASF72:
 2031 02c2 44465352 		.ascii	"DFSR\000"
 2031      00
 2032              	.LASF95:
 2033 02c7 474E5520 		.ascii	"GNU C 4.6.1\000"
 2033      4320342E 
 2033      362E3100 
 2034              	.LASF103:
 2035 02d3 47657454 		.ascii	"GetTickCount\000"
 2035      69636B43 
 2035      6F756E74 
 2035      00
 2036              	.LASF23:
 2037 02e0 5744545F 		.ascii	"WDT_IRQn\000"
 2037      4952516E 
 2037      00
 2038              	.LASF40:
 2039 02e9 5443315F 		.ascii	"TC1_IRQn\000"
 2039      4952516E 
 2039      00
 2040              	.LASF71:
 2041 02f2 48465352 		.ascii	"HFSR\000"
 2041      00
 2042              	.LASF25:
 2043 02f7 4546435F 		.ascii	"EFC_IRQn\000"
 2043      4952516E 
 2043      00
 2044              	.LASF52:
 2045 0300 49534552 		.ascii	"ISER\000"
 2045      00
 2046              	.LASF76:
 2047 0305 4D4D4652 		.ascii	"MMFR\000"
 2047      00
 2048              	.LASF53:
 2049 030a 52455345 		.ascii	"RESERVED0\000"
 2049      52564544 
 2049      3000
 2050              	.LASF57:
 2051 0314 52455345 		.ascii	"RESERVED2\000"
 2051      52564544 
 2051      3200
 2052              	.LASF59:
 2053 031e 52455345 		.ascii	"RESERVED3\000"
 2053      52564544 
 2053      3300
 2054              	.LASF61:
 2055 0328 52455345 		.ascii	"RESERVED4\000"
 2055      52564544 
 2055      3400
ARM GAS  /tmp/cc1T14q7.s 			page 72


 2056              	.LASF62:
 2057 0332 52455345 		.ascii	"RESERVED5\000"
 2057      52564544 
 2057      3500
 2058              	.LASF7:
 2059 033c 6C6F6E67 		.ascii	"long unsigned int\000"
 2059      20756E73 
 2059      69676E65 
 2059      6420696E 
 2059      7400
 2060              	.LASF12:
 2061 034e 4D656D6F 		.ascii	"MemoryManagement_IRQn\000"
 2061      72794D61 
 2061      6E616765 
 2061      6D656E74 
 2061      5F495251 
 2062              	.LASF21:
 2063 0364 5254435F 		.ascii	"RTC_IRQn\000"
 2063      4952516E 
 2063      00
 2064              	.LASF11:
 2065 036d 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 2065      61736B61 
 2065      626C6549 
 2065      6E745F49 
 2065      52516E00 
 2066              	.LASF101:
 2067 0381 53797354 		.ascii	"SysTick_Handler\000"
 2067      69636B5F 
 2067      48616E64 
 2067      6C657200 
 2068              	.LASF88:
 2069 0391 64774D73 		.ascii	"dwMs\000"
 2069      00
 2070              	.LASF44:
 2071 0396 5443355F 		.ascii	"TC5_IRQn\000"
 2071      4952516E 
 2071      00
 2072              	.LASF80:
 2073 039f 4C4F4144 		.ascii	"LOAD\000"
 2073      00
 2074              	.LASF41:
 2075 03a4 5443325F 		.ascii	"TC2_IRQn\000"
 2075      4952516E 
 2075      00
 2076              	.LASF39:
 2077 03ad 5443305F 		.ascii	"TC0_IRQn\000"
 2077      4952516E 
 2077      00
 2078              	.LASF98:
 2079 03b6 5F5F5746 		.ascii	"__WFI\000"
 2079      4900
 2080              	.LASF75:
 2081 03bc 41465352 		.ascii	"AFSR\000"
 2081      00
 2082              	.LASF90:
 2083 03c1 64774375 		.ascii	"dwCurrent\000"
ARM GAS  /tmp/cc1T14q7.s 			page 73


 2083      7272656E 
 2083      7400
 2084              	.LASF42:
 2085 03cb 5443335F 		.ascii	"TC3_IRQn\000"
 2085      4952516E 
 2085      00
 2086              	.LASF94:
 2087 03d4 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2087      52784275 
 2087      66666572 
 2087      00
 2088              	.LASF97:
 2089 03e1 2F686F6D 		.ascii	"/home/mo/doc/studium/aktuell/Diplomarbeit/code\000"
 2089      652F6D6F 
 2089      2F646F63 
 2089      2F737475 
 2089      6469756D 
 2090              	.LASF26:
 2091 0410 55415254 		.ascii	"UART0_IRQn\000"
 2091      305F4952 
 2091      516E00
 2092              	.LASF68:
 2093 041b 41495243 		.ascii	"AIRCR\000"
 2093      5200
 2094              		.ident	"GCC: (Sourcery CodeBench Lite 2011.09-69) 4.6.1"
ARM GAS  /tmp/cc1T14q7.s 			page 74


DEFINED SYMBOLS
                            *ABS*:00000000 timetick.c
     /tmp/cc1T14q7.s:19     .text.__WFI:00000000 $t
     /tmp/cc1T14q7.s:23     .text.__WFI:00000000 __WFI
     /tmp/cc1T14q7.s:50     .text.NVIC_SetPriority:00000000 $t
     /tmp/cc1T14q7.s:54     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/cc1T14q7.s:112    .text.SysTick_Config:00000000 $t
     /tmp/cc1T14q7.s:116    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/cc1T14q7.s:176    .bss:00000000 $d
     /tmp/cc1T14q7.s:177    .bss:00000000 _dwTickCount
     /tmp/cc1T14q7.s:180    .text.SysTick_Handler:00000000 $t
     /tmp/cc1T14q7.s:185    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cc1T14q7.s:220    .text.TimeTick_Configure:00000000 $t
     /tmp/cc1T14q7.s:225    .text.TimeTick_Configure:00000000 TimeTick_Configure
     /tmp/cc1T14q7.s:266    .text.GetTickCount:00000000 $t
     /tmp/cc1T14q7.s:271    .text.GetTickCount:00000000 GetTickCount
     /tmp/cc1T14q7.s:298    .text.Wait:00000000 $t
     /tmp/cc1T14q7.s:303    .text.Wait:00000000 Wait
     /tmp/cc1T14q7.s:348    .text.Sleep:00000000 $t
     /tmp/cc1T14q7.s:353    .text.Sleep:00000000 Sleep
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
blinkhandler
