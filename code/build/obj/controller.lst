ARM GAS  /tmp/ccpdRmtM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"controller.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.pid,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  22              		.type	pid, %function
  23              	pid:
  24              	.LFB0:
  25              		.file 1 "controller.c"
   1:controller.c  **** #include <stdio.h>
   2:controller.c  **** #include <assert.h>
   3:controller.c  **** #include "controller.h"
   4:controller.c  **** 
   5:controller.c  **** /*
   6:controller.c  ****  * PID Equations:
   7:controller.c  ****  *
   8:controller.c  ****  * A:  u = Kp*(w-x) + Ki*T*Sum(w-x) + Kd/T * Dif(w-x)
   9:controller.c  ****  * B:  u = Kp*(w-x) + Ki*T*Sum(w-x) + Kd/T * Dif( -x) // More robust: D-term based on x only, i.e. 
  10:controller.c  ****  * C:  u = Kp*( -x) + Ki*T*Sum(w-x) + Kd/T * Dif( -x) // even more robust: P-term based on x too 
  11:controller.c  ****  *
  12:controller.c  ****  * with u: output, w: setpoint, x: process value, T = 1/freq: sampling time
  13:controller.c  ****  *
  14:controller.c  ****  * Type C is not suitable when I-term isn't active (Ki=0).
  15:controller.c  ****  *
  16:controller.c  ****  * Differentiating both sides gives a cumulative equation.
  17:controller.c  ****  * du = -K_dx + Ki*T*(w-x) - Kd/T*ddx          (Type C)
  18:controller.c  ****  *
  19:controller.c  ****  */
  20:controller.c  **** static void pid(struct ctrl *ct)
  21:controller.c  **** {
  26              		.loc 1 21 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              	.LCFI1:
ARM GAS  /tmp/ccpdRmtM.s 			page 2


  37              		.cfi_def_cfa_offset 32
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  22:controller.c  **** 	int pterm, iterm, dterm;
  23:controller.c  **** 	int u = ct->output;
  42              		.loc 1 23 0
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a DB8C     		ldrh	r3, [r3, #38]
  45 000c 1BB2     		sxth	r3, r3
  46 000e FB60     		str	r3, [r7, #12]
  24:controller.c  **** 
  25:controller.c  **** 	// Calculating type B when Ki=0, type C otherwise.
  26:controller.c  **** 	if (ct->Ki == 0) { 
  47              		.loc 1 26 0
  48 0010 7B68     		ldr	r3, [r7, #4]
  49 0012 DB89     		ldrh	r3, [r3, #14]
  50 0014 002B     		cmp	r3, #0
  51 0016 0AD1     		bne	.L2
  27:controller.c  **** 		iterm = 0;
  52              		.loc 1 27 0
  53 0018 4FF00003 		mov	r3, #0
  54 001c 3B61     		str	r3, [r7, #16]
  28:controller.c  **** 		pterm = ct->Kp * ct->_de; // otherwise nothing would regard setpoint change
  55              		.loc 1 28 0
  56 001e 7B68     		ldr	r3, [r7, #4]
  57 0020 9B89     		ldrh	r3, [r3, #12]
  58 0022 7A68     		ldr	r2, [r7, #4]
  59 0024 D269     		ldr	r2, [r2, #28]
  60 0026 02FB03F3 		mul	r3, r2, r3
  61 002a 7B61     		str	r3, [r7, #20]
  62 002c 16E0     		b	.L3
  63              	.L2:
  29:controller.c  **** 	}
  30:controller.c  **** 	else {
  31:controller.c  **** 		iterm = (ct->Ki * ct->_e) / SAMPLING_FREQ;
  64              		.loc 1 31 0
  65 002e 7B68     		ldr	r3, [r7, #4]
  66 0030 DB89     		ldrh	r3, [r3, #14]
  67 0032 7A68     		ldr	r2, [r7, #4]
  68 0034 5269     		ldr	r2, [r2, #20]
  69 0036 02FB03F3 		mul	r3, r2, r3
  70 003a 03F10302 		add	r2, r3, #3
  71 003e 002B     		cmp	r3, #0
  72 0040 B8BF     		it	lt
  73 0042 1346     		movlt	r3, r2
  74 0044 4FEAA303 		asr	r3, r3, #2
  75 0048 3B61     		str	r3, [r7, #16]
  32:controller.c  **** 		pterm = -1 * ct->Kp * ct->_dx;
  76              		.loc 1 32 0
  77 004a 7B68     		ldr	r3, [r7, #4]
  78 004c 9B89     		ldrh	r3, [r3, #12]
  79 004e C3F10003 		rsb	r3, r3, #0
  80 0052 7A68     		ldr	r2, [r7, #4]
  81 0054 9269     		ldr	r2, [r2, #24]
  82 0056 02FB03F3 		mul	r3, r2, r3
ARM GAS  /tmp/ccpdRmtM.s 			page 3


  83 005a 7B61     		str	r3, [r7, #20]
  84              	.L3:
  33:controller.c  **** 	}
  34:controller.c  **** 	dterm = -1 * ct->Kd * ct->_ddx * SAMPLING_FREQ;
  85              		.loc 1 34 0
  86 005c 7B68     		ldr	r3, [r7, #4]
  87 005e 1B8A     		ldrh	r3, [r3, #16]
  88 0060 C3F10003 		rsb	r3, r3, #0
  89 0064 7A68     		ldr	r2, [r7, #4]
  90 0066 126A     		ldr	r2, [r2, #32]
  91 0068 02FB03F3 		mul	r3, r2, r3
  92 006c 4FEA8303 		lsl	r3, r3, #2
  93 0070 BB60     		str	r3, [r7, #8]
  35:controller.c  **** 
  36:controller.c  **** 	u += (pterm + iterm + dterm)/SCALING_FACTOR;
  94              		.loc 1 36 0
  95 0072 7A69     		ldr	r2, [r7, #20]
  96 0074 3B69     		ldr	r3, [r7, #16]
  97 0076 D218     		adds	r2, r2, r3
  98 0078 BB68     		ldr	r3, [r7, #8]
  99 007a D318     		adds	r3, r2, r3
 100 007c 03F17F02 		add	r2, r3, #127
 101 0080 002B     		cmp	r3, #0
 102 0082 B8BF     		it	lt
 103 0084 1346     		movlt	r3, r2
 104 0086 4FEAE313 		asr	r3, r3, #7
 105 008a FA68     		ldr	r2, [r7, #12]
 106 008c D318     		adds	r3, r2, r3
 107 008e FB60     		str	r3, [r7, #12]
  37:controller.c  **** 	ct->output = (short) LIMIT(u, -MAXOUT, MAXOUT);
 108              		.loc 1 37 0
 109 0090 FA68     		ldr	r2, [r7, #12]
 110 0092 6FF48053 		mvn	r3, #4096
 111 0096 9A42     		cmp	r2, r3
 112 0098 0BDB     		blt	.L4
 113              		.loc 1 37 0 is_stmt 0 discriminator 1
 114 009a FA68     		ldr	r2, [r7, #12]
 115 009c 40F6FF73 		movw	r3, #4095
 116 00a0 9A42     		cmp	r2, r3
 117 00a2 02DC     		bgt	.L5
 118              		.loc 1 37 0 discriminator 3
 119 00a4 FB68     		ldr	r3, [r7, #12]
 120 00a6 9BB2     		uxth	r3, r3
 121 00a8 01E0     		b	.L6
 122              	.L5:
 123              		.loc 1 37 0 discriminator 4
 124 00aa 40F6FF73 		movw	r3, #4095
 125              	.L6:
 126              		.loc 1 37 0 discriminator 5
 127 00ae 9BB2     		uxth	r3, r3
 128 00b0 01E0     		b	.L7
 129              	.L4:
 130              		.loc 1 37 0 discriminator 2
 131 00b2 4EF6FF73 		movw	r3, #61439
 132              	.L7:
 133              		.loc 1 37 0 discriminator 6
 134 00b6 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccpdRmtM.s 			page 4


 135 00b8 D384     		strh	r3, [r2, #38]	@ movhi
  38:controller.c  **** }
 136              		.loc 1 38 0 is_stmt 1 discriminator 6
 137 00ba 07F11C07 		add	r7, r7, #28
 138 00be BD46     		mov	sp, r7
 139 00c0 80BC     		pop	{r7}
 140 00c2 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE0:
 143              		.size	pid, .-pid
 144              		.section	.text.update,"ax",%progbits
 145              		.align	2
 146              		.thumb
 147              		.thumb_func
 148              		.type	update, %function
 149              	update:
 150              	.LFB1:
  39:controller.c  **** 
  40:controller.c  **** static void update(ctrlio_t pv, struct ctrl *ctrl)
  41:controller.c  **** {
 151              		.loc 1 41 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 16
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155 0000 80B5     		push	{r7, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 14, -4
 159              		.cfi_offset 7, -8
 160 0002 84B0     		sub	sp, sp, #16
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 24
 163 0004 00AF     		add	r7, sp, #0
 164              	.LCFI5:
 165              		.cfi_def_cfa_register 7
 166 0006 0346     		mov	r3, r0
 167 0008 3960     		str	r1, [r7, #0]
 168 000a FB80     		strh	r3, [r7, #6]	@ movhi
  42:controller.c  **** 	int e, dx;
  43:controller.c  **** 	dx = pv - ctrl->_x;
 169              		.loc 1 43 0
 170 000c FA88     		ldrh	r2, [r7, #6]
 171 000e 3B68     		ldr	r3, [r7, #0]
 172 0010 9B8C     		ldrh	r3, [r3, #36]
 173 0012 D31A     		subs	r3, r2, r3
 174 0014 BB60     		str	r3, [r7, #8]
  44:controller.c  **** 
  45:controller.c  **** 	if (ctrl->mode == RAMP)
 175              		.loc 1 45 0
 176 0016 3B68     		ldr	r3, [r7, #0]
 177 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 178 001a 022B     		cmp	r3, #2
 179 001c 0BD1     		bne	.L9
  46:controller.c  **** 		e = ctrl->rSlope - (dx * SAMPLING_FREQ);
 180              		.loc 1 46 0
 181 001e 3B68     		ldr	r3, [r7, #0]
 182 0020 9968     		ldr	r1, [r3, #8]
ARM GAS  /tmp/ccpdRmtM.s 			page 5


 183 0022 BA68     		ldr	r2, [r7, #8]
 184 0024 1346     		mov	r3, r2
 185 0026 4FEA8373 		lsl	r3, r3, #30
 186 002a 9B1A     		subs	r3, r3, r2
 187 002c 4FEA8303 		lsl	r3, r3, #2
 188 0030 CB18     		adds	r3, r1, r3
 189 0032 FB60     		str	r3, [r7, #12]
 190 0034 05E0     		b	.L10
 191              	.L9:
  47:controller.c  **** 	else
  48:controller.c  **** 		e = ctrl->SP - pv;
 192              		.loc 1 48 0
 193 0036 3B68     		ldr	r3, [r7, #0]
 194 0038 5B88     		ldrh	r3, [r3, #2]
 195 003a 1A46     		mov	r2, r3
 196 003c FB88     		ldrh	r3, [r7, #6]
 197 003e D31A     		subs	r3, r2, r3
 198 0040 FB60     		str	r3, [r7, #12]
 199              	.L10:
  49:controller.c  **** 
  50:controller.c  **** 	ctrl->_ddx = dx - ctrl->_dx;
 200              		.loc 1 50 0
 201 0042 3B68     		ldr	r3, [r7, #0]
 202 0044 9B69     		ldr	r3, [r3, #24]
 203 0046 BA68     		ldr	r2, [r7, #8]
 204 0048 D21A     		subs	r2, r2, r3
 205 004a 3B68     		ldr	r3, [r7, #0]
 206 004c 1A62     		str	r2, [r3, #32]
  51:controller.c  **** 	ctrl->_de = e - ctrl->_e;
 207              		.loc 1 51 0
 208 004e 3B68     		ldr	r3, [r7, #0]
 209 0050 5B69     		ldr	r3, [r3, #20]
 210 0052 FA68     		ldr	r2, [r7, #12]
 211 0054 D21A     		subs	r2, r2, r3
 212 0056 3B68     		ldr	r3, [r7, #0]
 213 0058 DA61     		str	r2, [r3, #28]
  52:controller.c  **** 	ctrl->_dx = dx;
 214              		.loc 1 52 0
 215 005a 3B68     		ldr	r3, [r7, #0]
 216 005c BA68     		ldr	r2, [r7, #8]
 217 005e 9A61     		str	r2, [r3, #24]
  53:controller.c  **** 	ctrl->_e = e;
 218              		.loc 1 53 0
 219 0060 3B68     		ldr	r3, [r7, #0]
 220 0062 FA68     		ldr	r2, [r7, #12]
 221 0064 5A61     		str	r2, [r3, #20]
  54:controller.c  **** 	ctrl->_x = pv;
 222              		.loc 1 54 0
 223 0066 3B68     		ldr	r3, [r7, #0]
 224 0068 FA88     		ldrh	r2, [r7, #6]	@ movhi
 225 006a 9A84     		strh	r2, [r3, #36]	@ movhi
  55:controller.c  **** 
  56:controller.c  **** 	if (ctrl->tristate != 0 && ctrl->tristate->input != 0) 
 226              		.loc 1 56 0
 227 006c 3B68     		ldr	r3, [r7, #0]
 228 006e 9B6A     		ldr	r3, [r3, #40]
 229 0070 002B     		cmp	r3, #0
ARM GAS  /tmp/ccpdRmtM.s 			page 6


 230 0072 09D0     		beq	.L8
 231              		.loc 1 56 0 is_stmt 0 discriminator 1
 232 0074 3B68     		ldr	r3, [r7, #0]
 233 0076 9B6A     		ldr	r3, [r3, #40]
 234 0078 1B68     		ldr	r3, [r3, #0]
 235 007a 002B     		cmp	r3, #0
 236 007c 04D0     		beq	.L8
  57:controller.c  **** 		tristate(ctrl->tristate);
 237              		.loc 1 57 0 is_stmt 1
 238 007e 3B68     		ldr	r3, [r7, #0]
 239 0080 9B6A     		ldr	r3, [r3, #40]
 240 0082 1846     		mov	r0, r3
 241 0084 FFF7FEFF 		bl	tristate
 242              	.L8:
  58:controller.c  **** }
 243              		.loc 1 58 0
 244 0088 07F11007 		add	r7, r7, #16
 245 008c BD46     		mov	sp, r7
 246 008e 80BD     		pop	{r7, pc}
 247              		.cfi_endproc
 248              	.LFE1:
 249              		.size	update, .-update
 250              		.section	.text.mode,"ax",%progbits
 251              		.align	2
 252              		.global	mode
 253              		.thumb
 254              		.thumb_func
 255              		.type	mode, %function
 256              	mode:
 257              	.LFB2:
  59:controller.c  **** 
  60:controller.c  **** // React on mode transition
  61:controller.c  **** void mode(uint8_t new, struct ctrl *ctrl)
  62:controller.c  **** {
 258              		.loc 1 62 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 8
 261              		@ frame_needed = 1, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263 0000 80B4     		push	{r7}
 264              	.LCFI6:
 265              		.cfi_def_cfa_offset 4
 266              		.cfi_offset 7, -4
 267 0002 83B0     		sub	sp, sp, #12
 268              	.LCFI7:
 269              		.cfi_def_cfa_offset 16
 270 0004 00AF     		add	r7, sp, #0
 271              	.LCFI8:
 272              		.cfi_def_cfa_register 7
 273 0006 0346     		mov	r3, r0
 274 0008 3960     		str	r1, [r7, #0]
 275 000a FB71     		strb	r3, [r7, #7]
  63:controller.c  **** 	switch (new) {
 276              		.loc 1 63 0
 277 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 278 000e 012B     		cmp	r3, #1
 279 0010 4ED0     		beq	.L15
ARM GAS  /tmp/ccpdRmtM.s 			page 7


 280 0012 022B     		cmp	r3, #2
 281 0014 32D0     		beq	.L16
 282 0016 002B     		cmp	r3, #0
 283 0018 4ED1     		bne	.L21
 284              	.L14:
  64:controller.c  **** 		case OFF:
  65:controller.c  **** 			ctrl->mode = new;
 285              		.loc 1 65 0
 286 001a 3B68     		ldr	r3, [r7, #0]
 287 001c FA79     		ldrb	r2, [r7, #7]
 288 001e 1A70     		strb	r2, [r3, #0]
  66:controller.c  **** 			ctrl->SP = 0;
 289              		.loc 1 66 0
 290 0020 3B68     		ldr	r3, [r7, #0]
 291 0022 4FF00002 		mov	r2, #0
 292 0026 5A80     		strh	r2, [r3, #2]	@ movhi
  67:controller.c  **** 			ctrl->rSP = 0;
 293              		.loc 1 67 0
 294 0028 3B68     		ldr	r3, [r7, #0]
 295 002a 4FF00002 		mov	r2, #0
 296 002e 9A80     		strh	r2, [r3, #4]	@ movhi
  68:controller.c  **** 			ctrl->rSlope = 0;
 297              		.loc 1 68 0
 298 0030 3B68     		ldr	r3, [r7, #0]
 299 0032 4FF00002 		mov	r2, #0
 300 0036 9A60     		str	r2, [r3, #8]
  69:controller.c  **** 			ctrl->output = 0;
 301              		.loc 1 69 0
 302 0038 3B68     		ldr	r3, [r7, #0]
 303 003a 4FF00002 		mov	r2, #0
 304 003e DA84     		strh	r2, [r3, #38]	@ movhi
  70:controller.c  **** 
  71:controller.c  **** 			ctrl->_e = 0;
 305              		.loc 1 71 0
 306 0040 3B68     		ldr	r3, [r7, #0]
 307 0042 4FF00002 		mov	r2, #0
 308 0046 5A61     		str	r2, [r3, #20]
  72:controller.c  **** 			ctrl->_x = 0;
 309              		.loc 1 72 0
 310 0048 3B68     		ldr	r3, [r7, #0]
 311 004a 4FF00002 		mov	r2, #0
 312 004e 9A84     		strh	r2, [r3, #36]	@ movhi
  73:controller.c  **** 			ctrl->_de = 0;
 313              		.loc 1 73 0
 314 0050 3B68     		ldr	r3, [r7, #0]
 315 0052 4FF00002 		mov	r2, #0
 316 0056 DA61     		str	r2, [r3, #28]
  74:controller.c  **** 			ctrl->_dx = 0;
 317              		.loc 1 74 0
 318 0058 3B68     		ldr	r3, [r7, #0]
 319 005a 4FF00002 		mov	r2, #0
 320 005e 9A61     		str	r2, [r3, #24]
  75:controller.c  **** 			ctrl->_ddx = 0;
 321              		.loc 1 75 0
 322 0060 3B68     		ldr	r3, [r7, #0]
 323 0062 4FF00002 		mov	r2, #0
 324 0066 1A62     		str	r2, [r3, #32]
ARM GAS  /tmp/ccpdRmtM.s 			page 8


  76:controller.c  **** 
  77:controller.c  **** 			if (ctrl->tristate != 0)
 325              		.loc 1 77 0
 326 0068 3B68     		ldr	r3, [r7, #0]
 327 006a 9B6A     		ldr	r3, [r3, #40]
 328 006c 002B     		cmp	r3, #0
 329 006e 28D0     		beq	.L22
  78:controller.c  **** 				ctrl->tristate->output = 0;
 330              		.loc 1 78 0
 331 0070 3B68     		ldr	r3, [r7, #0]
 332 0072 9B6A     		ldr	r3, [r3, #40]
 333 0074 4FF00002 		mov	r2, #0
 334 0078 5A60     		str	r2, [r3, #4]
  79:controller.c  **** 			break;
 335              		.loc 1 79 0
 336 007a 22E0     		b	.L22
 337              	.L16:
  80:controller.c  **** 
  81:controller.c  **** 		case RAMP:
  82:controller.c  **** 			if (   (ctrl->_x > ctrl->rSP && ctrl->rSlope > 0) \
 338              		.loc 1 82 0
 339 007c 3B68     		ldr	r3, [r7, #0]
 340 007e 9A8C     		ldrh	r2, [r3, #36]
 341 0080 3B68     		ldr	r3, [r7, #0]
 342 0082 9B88     		ldrh	r3, [r3, #4]
 343 0084 9A42     		cmp	r2, r3
 344 0086 03D9     		bls	.L19
 345              		.loc 1 82 0 is_stmt 0 discriminator 1
 346 0088 3B68     		ldr	r3, [r7, #0]
 347 008a 9B68     		ldr	r3, [r3, #8]
 348 008c 002B     		cmp	r3, #0
 349 008e 09DC     		bgt	.L20
 350              	.L19:
  83:controller.c  **** 				|| (ctrl->_x < ctrl->rSP && ctrl->rSlope < 0))
 351              		.loc 1 83 0 is_stmt 1
 352 0090 3B68     		ldr	r3, [r7, #0]
 353 0092 9A8C     		ldrh	r2, [r3, #36]
 354 0094 3B68     		ldr	r3, [r7, #0]
 355 0096 9B88     		ldrh	r3, [r3, #4]
 356 0098 9A42     		cmp	r2, r3
 357 009a 09D2     		bcs	.L15
 358              		.loc 1 83 0 is_stmt 0 discriminator 1
 359 009c 3B68     		ldr	r3, [r7, #0]
 360 009e 9B68     		ldr	r3, [r3, #8]
 361 00a0 002B     		cmp	r3, #0
 362 00a2 05DA     		bge	.L15
 363              	.L20:
  84:controller.c  **** 				ctrl->rSlope = -ctrl->rSlope; // adjust direction
 364              		.loc 1 84 0 is_stmt 1
 365 00a4 3B68     		ldr	r3, [r7, #0]
 366 00a6 9B68     		ldr	r3, [r3, #8]
 367 00a8 C3F10002 		rsb	r2, r3, #0
 368 00ac 3B68     		ldr	r3, [r7, #0]
 369 00ae 9A60     		str	r2, [r3, #8]
 370              	.L15:
  85:controller.c  **** 		case NORMAL:
  86:controller.c  **** 			ctrl->mode = new;
ARM GAS  /tmp/ccpdRmtM.s 			page 9


 371              		.loc 1 86 0
 372 00b0 3B68     		ldr	r3, [r7, #0]
 373 00b2 FA79     		ldrb	r2, [r7, #7]
 374 00b4 1A70     		strb	r2, [r3, #0]
  87:controller.c  **** 			break;
 375              		.loc 1 87 0
 376 00b6 05E0     		b	.L12
 377              	.L21:
  88:controller.c  **** 
  89:controller.c  **** 		default:
  90:controller.c  **** 			ctrl->mode = STOP;
 378              		.loc 1 90 0
 379 00b8 3B68     		ldr	r3, [r7, #0]
 380 00ba 4FF00302 		mov	r2, #3
 381 00be 1A70     		strb	r2, [r3, #0]
 382 00c0 00E0     		b	.L12
 383              	.L22:
  79:controller.c  **** 			break;
 384              		.loc 1 79 0
 385 00c2 00BF     		nop
 386              	.L12:
  91:controller.c  **** 	}
  92:controller.c  **** }
 387              		.loc 1 92 0
 388 00c4 07F10C07 		add	r7, r7, #12
 389 00c8 BD46     		mov	sp, r7
 390 00ca 80BC     		pop	{r7}
 391 00cc 7047     		bx	lr
 392              		.cfi_endproc
 393              	.LFE2:
 394              		.size	mode, .-mode
 395 00ce 00BF     		.section	.text.control,"ax",%progbits
 396              		.align	2
 397              		.global	control
 398              		.thumb
 399              		.thumb_func
 400              		.type	control, %function
 401              	control:
 402              	.LFB3:
  93:controller.c  **** 
  94:controller.c  **** // Periodically call
  95:controller.c  **** void control(ctrlio_t pv, struct ctrl *loop)
  96:controller.c  **** {
 403              		.loc 1 96 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 8
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407 0000 80B5     		push	{r7, lr}
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 14, -4
 411              		.cfi_offset 7, -8
 412 0002 82B0     		sub	sp, sp, #8
 413              	.LCFI10:
 414              		.cfi_def_cfa_offset 16
 415 0004 00AF     		add	r7, sp, #0
 416              	.LCFI11:
ARM GAS  /tmp/ccpdRmtM.s 			page 10


 417              		.cfi_def_cfa_register 7
 418 0006 0346     		mov	r3, r0
 419 0008 3960     		str	r1, [r7, #0]
 420 000a FB80     		strh	r3, [r7, #6]	@ movhi
  97:controller.c  **** 	if (loop->mode > OFF) {
 421              		.loc 1 97 0
 422 000c 3B68     		ldr	r3, [r7, #0]
 423 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 424 0010 002B     		cmp	r3, #0
 425 0012 35D0     		beq	.L24
  98:controller.c  **** 		update(pv, loop);
 426              		.loc 1 98 0
 427 0014 FB88     		ldrh	r3, [r7, #6]
 428 0016 1846     		mov	r0, r3
 429 0018 3968     		ldr	r1, [r7, #0]
 430 001a FFF7FEFF 		bl	update
  99:controller.c  **** 
 100:controller.c  **** 		if (loop->mode == NORMAL)
 431              		.loc 1 100 0
 432 001e 3B68     		ldr	r3, [r7, #0]
 433 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 434 0022 012B     		cmp	r3, #1
 435 0024 03D1     		bne	.L25
 101:controller.c  **** 			pid(loop);
 436              		.loc 1 101 0
 437 0026 3868     		ldr	r0, [r7, #0]
 438 0028 FFF7FEFF 		bl	pid
 439 002c 31E0     		b	.L23
 440              	.L25:
 102:controller.c  **** 		else if (loop->mode == RAMP) {
 441              		.loc 1 102 0
 442 002e 3B68     		ldr	r3, [r7, #0]
 443 0030 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 444 0032 022B     		cmp	r3, #2
 445 0034 2DD1     		bne	.L23
 103:controller.c  **** 			pid(loop);
 446              		.loc 1 103 0
 447 0036 3868     		ldr	r0, [r7, #0]
 448 0038 FFF7FEFF 		bl	pid
 104:controller.c  **** 			if (   (loop->_x >= loop->rSP && loop->rSlope > 0) \
 449              		.loc 1 104 0
 450 003c 3B68     		ldr	r3, [r7, #0]
 451 003e 9A8C     		ldrh	r2, [r3, #36]
 452 0040 3B68     		ldr	r3, [r7, #0]
 453 0042 9B88     		ldrh	r3, [r3, #4]
 454 0044 9A42     		cmp	r2, r3
 455 0046 03D3     		bcc	.L27
 456              		.loc 1 104 0 is_stmt 0 discriminator 1
 457 0048 3B68     		ldr	r3, [r7, #0]
 458 004a 9B68     		ldr	r3, [r3, #8]
 459 004c 002B     		cmp	r3, #0
 460 004e 0DDC     		bgt	.L28
 461              	.L27:
 105:controller.c  **** 				|| (loop->_x <= loop->rSP && loop->rSlope < 0) \
 462              		.loc 1 105 0 is_stmt 1
 463 0050 3B68     		ldr	r3, [r7, #0]
 464 0052 9A8C     		ldrh	r2, [r3, #36]
ARM GAS  /tmp/ccpdRmtM.s 			page 11


 465 0054 3B68     		ldr	r3, [r7, #0]
 466 0056 9B88     		ldrh	r3, [r3, #4]
 467 0058 9A42     		cmp	r2, r3
 468 005a 03D8     		bhi	.L29
 469              		.loc 1 105 0 is_stmt 0 discriminator 1
 470 005c 3B68     		ldr	r3, [r7, #0]
 471 005e 9B68     		ldr	r3, [r3, #8]
 472 0060 002B     		cmp	r3, #0
 473 0062 03DB     		blt	.L28
 474              	.L29:
 106:controller.c  **** 				|| (loop->rSlope == 0)) {
 475              		.loc 1 106 0 is_stmt 1
 476 0064 3B68     		ldr	r3, [r7, #0]
 477 0066 9B68     		ldr	r3, [r3, #8]
 478 0068 002B     		cmp	r3, #0
 479 006a 12D1     		bne	.L23
 480              	.L28:
 107:controller.c  **** 				loop->SP = loop->rSP;
 481              		.loc 1 107 0
 482 006c 3B68     		ldr	r3, [r7, #0]
 483 006e 9A88     		ldrh	r2, [r3, #4]
 484 0070 3B68     		ldr	r3, [r7, #0]
 485 0072 5A80     		strh	r2, [r3, #2]	@ movhi
 108:controller.c  **** 				mode(NORMAL, loop);
 486              		.loc 1 108 0
 487 0074 4FF00100 		mov	r0, #1
 488 0078 3968     		ldr	r1, [r7, #0]
 489 007a FFF7FEFF 		bl	mode
 490 007e 08E0     		b	.L23
 491              	.L24:
 109:controller.c  **** 			}
 110:controller.c  **** 		}
 111:controller.c  **** 	}
 112:controller.c  **** 	else if (loop->mode > STOP) {
 492              		.loc 1 112 0
 493 0080 3B68     		ldr	r3, [r7, #0]
 494 0082 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 495 0084 032B     		cmp	r3, #3
 496 0086 04D9     		bls	.L23
 113:controller.c  **** 		mode(OFF, loop);
 497              		.loc 1 113 0
 498 0088 4FF00000 		mov	r0, #0
 499 008c 3968     		ldr	r1, [r7, #0]
 500 008e FFF7FEFF 		bl	mode
 501              	.L23:
 114:controller.c  **** 	}
 115:controller.c  **** }
 502              		.loc 1 115 0
 503 0092 07F10807 		add	r7, r7, #8
 504 0096 BD46     		mov	sp, r7
 505 0098 80BD     		pop	{r7, pc}
 506              		.cfi_endproc
 507              	.LFE3:
 508              		.size	control, .-control
 509 009a 00BF     		.section	.rodata
 510              		.align	2
 511              	.LC0:
ARM GAS  /tmp/ccpdRmtM.s 			page 12


 512 0000 636F6E74 		.ascii	"controller.c\000"
 512      726F6C6C 
 512      65722E63 
 512      00
 513 000d 000000   		.align	2
 514              	.LC1:
 515 0010 7020213D 		.ascii	"p != 0\000"
 515      203000
 516 0017 00       		.align	2
 517              	.LC2:
 518 0018 702D3E69 		.ascii	"p->input != 0\000"
 518      6E707574 
 518      20213D20 
 518      3000
 519              		.section	.text.tristate,"ax",%progbits
 520              		.align	2
 521              		.global	tristate
 522              		.thumb
 523              		.thumb_func
 524              		.type	tristate, %function
 525              	tristate:
 526              	.LFB4:
 116:controller.c  **** 
 117:controller.c  **** /*
 118:controller.c  ****  * Call tris() with pointer to parameters.
 119:controller.c  ****  * (Useful in the way that parameter struct can
 120:controller.c  ****  * be part of the configuration).
 121:controller.c  ****  */
 122:controller.c  **** int tristate(struct trip *p)
 123:controller.c  **** {
 527              		.loc 1 123 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 8
 530              		@ frame_needed = 1, uses_anonymous_args = 0
 531 0000 80B5     		push	{r7, lr}
 532              	.LCFI12:
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 14, -4
 535              		.cfi_offset 7, -8
 536 0002 82B0     		sub	sp, sp, #8
 537              	.LCFI13:
 538              		.cfi_def_cfa_offset 16
 539 0004 00AF     		add	r7, sp, #0
 540              	.LCFI14:
 541              		.cfi_def_cfa_register 7
 542 0006 7860     		str	r0, [r7, #4]
 124:controller.c  **** 	assert(p != 0);
 543              		.loc 1 124 0
 544 0008 7B68     		ldr	r3, [r7, #4]
 545 000a 002B     		cmp	r3, #0
 546 000c 0FD1     		bne	.L31
 547              		.loc 1 124 0 is_stmt 0 discriminator 1
 548 000e 40F20000 		movw	r0, #:lower16:.LC0
 549 0012 C0F20000 		movt	r0, #:upper16:.LC0
 550 0016 4FF07C01 		mov	r1, #124
 551 001a 40F20002 		movw	r2, #:lower16:__FUNCTION__.4943
 552 001e C0F20002 		movt	r2, #:upper16:__FUNCTION__.4943
ARM GAS  /tmp/ccpdRmtM.s 			page 13


 553 0022 40F20003 		movw	r3, #:lower16:.LC1
 554 0026 C0F20003 		movt	r3, #:upper16:.LC1
 555 002a FFF7FEFF 		bl	__assert_func
 556              	.L31:
 125:controller.c  **** 	assert(p->input != 0);
 557              		.loc 1 125 0 is_stmt 1
 558 002e 7B68     		ldr	r3, [r7, #4]
 559 0030 1B68     		ldr	r3, [r3, #0]
 560 0032 002B     		cmp	r3, #0
 561 0034 0FD1     		bne	.L32
 562              		.loc 1 125 0 is_stmt 0 discriminator 1
 563 0036 40F20000 		movw	r0, #:lower16:.LC0
 564 003a C0F20000 		movt	r0, #:upper16:.LC0
 565 003e 4FF07D01 		mov	r1, #125
 566 0042 40F20002 		movw	r2, #:lower16:__FUNCTION__.4943
 567 0046 C0F20002 		movt	r2, #:upper16:__FUNCTION__.4943
 568 004a 40F20003 		movw	r3, #:lower16:.LC2
 569 004e C0F20003 		movt	r3, #:upper16:.LC2
 570 0052 FFF7FEFF 		bl	__assert_func
 571              	.L32:
 126:controller.c  **** 	return tris(*p->input, &p->output, p->on, p->off);
 572              		.loc 1 126 0 is_stmt 1
 573 0056 7B68     		ldr	r3, [r7, #4]
 574 0058 1B68     		ldr	r3, [r3, #0]
 575 005a 1868     		ldr	r0, [r3, #0]
 576 005c 7B68     		ldr	r3, [r7, #4]
 577 005e 03F10401 		add	r1, r3, #4
 578 0062 7B68     		ldr	r3, [r7, #4]
 579 0064 9A68     		ldr	r2, [r3, #8]
 580 0066 7B68     		ldr	r3, [r7, #4]
 581 0068 DB68     		ldr	r3, [r3, #12]
 582 006a FFF7FEFF 		bl	tris
 583 006e 0346     		mov	r3, r0
 127:controller.c  **** }
 584              		.loc 1 127 0
 585 0070 1846     		mov	r0, r3
 586 0072 07F10807 		add	r7, r7, #8
 587 0076 BD46     		mov	sp, r7
 588 0078 80BD     		pop	{r7, pc}
 589              		.cfi_endproc
 590              	.LFE4:
 591              		.size	tristate, .-tristate
 592 007a 00BF     		.section	.text.tris,"ax",%progbits
 593              		.align	2
 594              		.global	tris
 595              		.thumb
 596              		.thumb_func
 597              		.type	tris, %function
 598              	tris:
 599              	.LFB5:
 128:controller.c  **** 
 129:controller.c  **** /* Get tristate output for a three-point controller
 130:controller.c  ****  * 
 131:controller.c  ****  * The result is returned and written to '*output'
 132:controller.c  ****  * which must hold the previous value and be initialized
 133:controller.c  ****  * with zero.
 134:controller.c  ****  */
ARM GAS  /tmp/ccpdRmtM.s 			page 14


 135:controller.c  **** int tris(int in, int *output, int on, int off)
 136:controller.c  **** {
 600              		.loc 1 136 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 16
 603              		@ frame_needed = 1, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 605 0000 80B4     		push	{r7}
 606              	.LCFI15:
 607              		.cfi_def_cfa_offset 4
 608              		.cfi_offset 7, -4
 609 0002 85B0     		sub	sp, sp, #20
 610              	.LCFI16:
 611              		.cfi_def_cfa_offset 24
 612 0004 00AF     		add	r7, sp, #0
 613              	.LCFI17:
 614              		.cfi_def_cfa_register 7
 615 0006 F860     		str	r0, [r7, #12]
 616 0008 B960     		str	r1, [r7, #8]
 617 000a 7A60     		str	r2, [r7, #4]
 618 000c 3B60     		str	r3, [r7, #0]
 137:controller.c  **** 	if (*output < -1 || *output > 1)
 619              		.loc 1 137 0
 620 000e BB68     		ldr	r3, [r7, #8]
 621 0010 1B68     		ldr	r3, [r3, #0]
 622 0012 B3F1FF3F 		cmp	r3, #-1
 623 0016 03DB     		blt	.L34
 624              		.loc 1 137 0 is_stmt 0 discriminator 1
 625 0018 BB68     		ldr	r3, [r7, #8]
 626 001a 1B68     		ldr	r3, [r3, #0]
 627 001c 012B     		cmp	r3, #1
 628 001e 03DD     		ble	.L35
 629              	.L34:
 138:controller.c  **** 		*output = 0;
 630              		.loc 1 138 0 is_stmt 1
 631 0020 BB68     		ldr	r3, [r7, #8]
 632 0022 4FF00002 		mov	r2, #0
 633 0026 1A60     		str	r2, [r3, #0]
 634              	.L35:
 139:controller.c  **** 
 140:controller.c  **** 	if (*output < 0) {
 635              		.loc 1 140 0
 636 0028 BB68     		ldr	r3, [r7, #8]
 637 002a 1B68     		ldr	r3, [r3, #0]
 638 002c 002B     		cmp	r3, #0
 639 002e 0ADA     		bge	.L36
 141:controller.c  **** 		if (in >= -off) 
 640              		.loc 1 141 0
 641 0030 3B68     		ldr	r3, [r7, #0]
 642 0032 C3F10002 		rsb	r2, r3, #0
 643 0036 FB68     		ldr	r3, [r7, #12]
 644 0038 9A42     		cmp	r2, r3
 645 003a 24DC     		bgt	.L37
 142:controller.c  **** 			*output = 0;
 646              		.loc 1 142 0
 647 003c BB68     		ldr	r3, [r7, #8]
 648 003e 4FF00002 		mov	r2, #0
ARM GAS  /tmp/ccpdRmtM.s 			page 15


 649 0042 1A60     		str	r2, [r3, #0]
 650 0044 1FE0     		b	.L37
 651              	.L36:
 143:controller.c  **** 	}
 144:controller.c  **** 	else if (*output > 0) {
 652              		.loc 1 144 0
 653 0046 BB68     		ldr	r3, [r7, #8]
 654 0048 1B68     		ldr	r3, [r3, #0]
 655 004a 002B     		cmp	r3, #0
 656 004c 08DD     		ble	.L38
 145:controller.c  **** 		if (in <= off) 
 657              		.loc 1 145 0
 658 004e FA68     		ldr	r2, [r7, #12]
 659 0050 3B68     		ldr	r3, [r7, #0]
 660 0052 9A42     		cmp	r2, r3
 661 0054 17DC     		bgt	.L37
 146:controller.c  **** 			*output = 0;
 662              		.loc 1 146 0
 663 0056 BB68     		ldr	r3, [r7, #8]
 664 0058 4FF00002 		mov	r2, #0
 665 005c 1A60     		str	r2, [r3, #0]
 666 005e 12E0     		b	.L37
 667              	.L38:
 147:controller.c  **** 	}
 148:controller.c  **** 	else {
 149:controller.c  **** 		if (in > on) 
 668              		.loc 1 149 0
 669 0060 FA68     		ldr	r2, [r7, #12]
 670 0062 7B68     		ldr	r3, [r7, #4]
 671 0064 9A42     		cmp	r2, r3
 672 0066 04DD     		ble	.L39
 150:controller.c  **** 			*output = 1;
 673              		.loc 1 150 0
 674 0068 BB68     		ldr	r3, [r7, #8]
 675 006a 4FF00102 		mov	r2, #1
 676 006e 1A60     		str	r2, [r3, #0]
 677 0070 09E0     		b	.L37
 678              	.L39:
 151:controller.c  **** 		else if (in < -on) 
 679              		.loc 1 151 0
 680 0072 7B68     		ldr	r3, [r7, #4]
 681 0074 C3F10002 		rsb	r2, r3, #0
 682 0078 FB68     		ldr	r3, [r7, #12]
 683 007a 9A42     		cmp	r2, r3
 684 007c 03DD     		ble	.L37
 152:controller.c  **** 			*output = -1;
 685              		.loc 1 152 0
 686 007e BB68     		ldr	r3, [r7, #8]
 687 0080 4FF0FF32 		mov	r2, #-1
 688 0084 1A60     		str	r2, [r3, #0]
 689              	.L37:
 153:controller.c  **** 	}
 154:controller.c  **** 	return *output;
 690              		.loc 1 154 0
 691 0086 BB68     		ldr	r3, [r7, #8]
 692 0088 1B68     		ldr	r3, [r3, #0]
 155:controller.c  **** }
ARM GAS  /tmp/ccpdRmtM.s 			page 16


 693              		.loc 1 155 0
 694 008a 1846     		mov	r0, r3
 695 008c 07F11407 		add	r7, r7, #20
 696 0090 BD46     		mov	sp, r7
 697 0092 80BC     		pop	{r7}
 698 0094 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE5:
 701              		.size	tris, .-tris
 702 0096 00BF     		.section	.rodata
 703 0026 0000     		.align	2
 704              		.type	__FUNCTION__.4943, %object
 705              		.size	__FUNCTION__.4943, 9
 706              	__FUNCTION__.4943:
 707 0028 74726973 		.ascii	"tristate\000"
 707      74617465 
 707      00
 708 0031 000000   		.text
 709              	.Letext0:
 710              		.file 2 "/usr/local/Sourcery/bin/../lib/gcc/arm-none-eabi/4.6.1/../../../../arm-none-eabi/include/
 711              		.file 3 "controller.h"
 712              		.section	.debug_info,"",%progbits
 713              	.Ldebug_info0:
 714 0000 94030000 		.4byte	0x394
 715 0004 0200     		.2byte	0x2
 716 0006 00000000 		.4byte	.Ldebug_abbrev0
 717 000a 04       		.byte	0x4
 718 000b 01       		.uleb128 0x1
 719 000c 99000000 		.4byte	.LASF32
 720 0010 01       		.byte	0x1
 721 0011 48000000 		.4byte	.LASF33
 722 0015 00000000 		.4byte	.LASF34
 723 0019 00000000 		.4byte	0
 724 001d 00000000 		.4byte	0
 725 0021 00000000 		.4byte	.Ldebug_ranges0+0
 726 0025 00000000 		.4byte	.Ldebug_line0
 727 0029 02       		.uleb128 0x2
 728 002a 04       		.byte	0x4
 729 002b 07       		.byte	0x7
 730 002c C5000000 		.4byte	.LASF0
 731 0030 02       		.uleb128 0x2
 732 0031 01       		.byte	0x1
 733 0032 06       		.byte	0x6
 734 0033 59010000 		.4byte	.LASF1
 735 0037 02       		.uleb128 0x2
 736 0038 01       		.byte	0x1
 737 0039 08       		.byte	0x8
 738 003a A5000000 		.4byte	.LASF2
 739 003e 02       		.uleb128 0x2
 740 003f 02       		.byte	0x2
 741 0040 05       		.byte	0x5
 742 0041 2A010000 		.4byte	.LASF3
 743 0045 02       		.uleb128 0x2
 744 0046 02       		.byte	0x2
 745 0047 07       		.byte	0x7
 746 0048 7E000000 		.4byte	.LASF4
 747 004c 03       		.uleb128 0x3
ARM GAS  /tmp/ccpdRmtM.s 			page 17


 748 004d 04       		.byte	0x4
 749 004e 05       		.byte	0x5
 750 004f 696E7400 		.ascii	"int\000"
 751 0053 02       		.uleb128 0x2
 752 0054 08       		.byte	0x8
 753 0055 05       		.byte	0x5
 754 0056 0D010000 		.4byte	.LASF5
 755 005a 02       		.uleb128 0x2
 756 005b 08       		.byte	0x8
 757 005c 07       		.byte	0x7
 758 005d D2000000 		.4byte	.LASF6
 759 0061 02       		.uleb128 0x2
 760 0062 04       		.byte	0x4
 761 0063 05       		.byte	0x5
 762 0064 4A010000 		.4byte	.LASF7
 763 0068 02       		.uleb128 0x2
 764 0069 04       		.byte	0x4
 765 006a 07       		.byte	0x7
 766 006b 6C000000 		.4byte	.LASF8
 767 006f 02       		.uleb128 0x2
 768 0070 01       		.byte	0x1
 769 0071 08       		.byte	0x8
 770 0072 1B010000 		.4byte	.LASF9
 771 0076 04       		.uleb128 0x4
 772 0077 E9000000 		.4byte	.LASF10
 773 007b 02       		.byte	0x2
 774 007c 2A       		.byte	0x2a
 775 007d 37000000 		.4byte	0x37
 776 0081 04       		.uleb128 0x4
 777 0082 3B010000 		.4byte	.LASF11
 778 0086 02       		.byte	0x2
 779 0087 36       		.byte	0x36
 780 0088 45000000 		.4byte	0x45
 781 008c 04       		.uleb128 0x4
 782 008d 55000000 		.4byte	.LASF12
 783 0091 03       		.byte	0x3
 784 0092 10       		.byte	0x10
 785 0093 81000000 		.4byte	0x81
 786 0097 05       		.uleb128 0x5
 787 0098 01       		.byte	0x1
 788 0099 03       		.byte	0x3
 789 009a 12       		.byte	0x12
 790 009b B8000000 		.4byte	0xb8
 791 009f 06       		.uleb128 0x6
 792 00a0 4F464600 		.ascii	"OFF\000"
 793 00a4 00       		.sleb128 0
 794 00a5 07       		.uleb128 0x7
 795 00a6 34000000 		.4byte	.LASF13
 796 00aa 01       		.sleb128 1
 797 00ab 07       		.uleb128 0x7
 798 00ac 2F000000 		.4byte	.LASF14
 799 00b0 02       		.sleb128 2
 800 00b1 07       		.uleb128 0x7
 801 00b2 B3000000 		.4byte	.LASF15
 802 00b6 03       		.sleb128 3
 803 00b7 00       		.byte	0
 804 00b8 04       		.uleb128 0x4
ARM GAS  /tmp/ccpdRmtM.s 			page 18


 805 00b9 FD000000 		.4byte	.LASF16
 806 00bd 03       		.byte	0x3
 807 00be 12       		.byte	0x12
 808 00bf 97000000 		.4byte	0x97
 809 00c3 08       		.uleb128 0x8
 810 00c4 08010000 		.4byte	.LASF22
 811 00c8 2C       		.byte	0x2c
 812 00c9 03       		.byte	0x3
 813 00ca 15       		.byte	0x15
 814 00cb 8E010000 		.4byte	0x18e
 815 00cf 09       		.uleb128 0x9
 816 00d0 F1000000 		.4byte	.LASF17
 817 00d4 03       		.byte	0x3
 818 00d5 16       		.byte	0x16
 819 00d6 B8000000 		.4byte	0xb8
 820 00da 02       		.byte	0x2
 821 00db 23       		.byte	0x23
 822 00dc 00       		.uleb128 0
 823 00dd 0A       		.uleb128 0xa
 824 00de 535000   		.ascii	"SP\000"
 825 00e1 03       		.byte	0x3
 826 00e2 17       		.byte	0x17
 827 00e3 8C000000 		.4byte	0x8c
 828 00e7 02       		.byte	0x2
 829 00e8 23       		.byte	0x23
 830 00e9 02       		.uleb128 0x2
 831 00ea 0A       		.uleb128 0xa
 832 00eb 72535000 		.ascii	"rSP\000"
 833 00ef 03       		.byte	0x3
 834 00f0 18       		.byte	0x18
 835 00f1 8C000000 		.4byte	0x8c
 836 00f5 02       		.byte	0x2
 837 00f6 23       		.byte	0x23
 838 00f7 04       		.uleb128 0x4
 839 00f8 09       		.uleb128 0x9
 840 00f9 F6000000 		.4byte	.LASF18
 841 00fd 03       		.byte	0x3
 842 00fe 19       		.byte	0x19
 843 00ff 4C000000 		.4byte	0x4c
 844 0103 02       		.byte	0x2
 845 0104 23       		.byte	0x23
 846 0105 08       		.uleb128 0x8
 847 0106 0A       		.uleb128 0xa
 848 0107 4B7000   		.ascii	"Kp\000"
 849 010a 03       		.byte	0x3
 850 010b 1B       		.byte	0x1b
 851 010c 8C000000 		.4byte	0x8c
 852 0110 02       		.byte	0x2
 853 0111 23       		.byte	0x23
 854 0112 0C       		.uleb128 0xc
 855 0113 0A       		.uleb128 0xa
 856 0114 4B6900   		.ascii	"Ki\000"
 857 0117 03       		.byte	0x3
 858 0118 1C       		.byte	0x1c
 859 0119 8C000000 		.4byte	0x8c
 860 011d 02       		.byte	0x2
 861 011e 23       		.byte	0x23
ARM GAS  /tmp/ccpdRmtM.s 			page 19


 862 011f 0E       		.uleb128 0xe
 863 0120 0A       		.uleb128 0xa
 864 0121 4B6400   		.ascii	"Kd\000"
 865 0124 03       		.byte	0x3
 866 0125 1D       		.byte	0x1d
 867 0126 8C000000 		.4byte	0x8c
 868 012a 02       		.byte	0x2
 869 012b 23       		.byte	0x23
 870 012c 10       		.uleb128 0x10
 871 012d 0A       		.uleb128 0xa
 872 012e 5F6500   		.ascii	"_e\000"
 873 0131 03       		.byte	0x3
 874 0132 1F       		.byte	0x1f
 875 0133 4C000000 		.4byte	0x4c
 876 0137 02       		.byte	0x2
 877 0138 23       		.byte	0x23
 878 0139 14       		.uleb128 0x14
 879 013a 0A       		.uleb128 0xa
 880 013b 5F647800 		.ascii	"_dx\000"
 881 013f 03       		.byte	0x3
 882 0140 20       		.byte	0x20
 883 0141 4C000000 		.4byte	0x4c
 884 0145 02       		.byte	0x2
 885 0146 23       		.byte	0x23
 886 0147 18       		.uleb128 0x18
 887 0148 0A       		.uleb128 0xa
 888 0149 5F646500 		.ascii	"_de\000"
 889 014d 03       		.byte	0x3
 890 014e 21       		.byte	0x21
 891 014f 4C000000 		.4byte	0x4c
 892 0153 02       		.byte	0x2
 893 0154 23       		.byte	0x23
 894 0155 1C       		.uleb128 0x1c
 895 0156 09       		.uleb128 0x9
 896 0157 6B010000 		.4byte	.LASF19
 897 015b 03       		.byte	0x3
 898 015c 22       		.byte	0x22
 899 015d 4C000000 		.4byte	0x4c
 900 0161 02       		.byte	0x2
 901 0162 23       		.byte	0x23
 902 0163 20       		.uleb128 0x20
 903 0164 0A       		.uleb128 0xa
 904 0165 5F7800   		.ascii	"_x\000"
 905 0168 03       		.byte	0x3
 906 0169 23       		.byte	0x23
 907 016a 8C000000 		.4byte	0x8c
 908 016e 02       		.byte	0x2
 909 016f 23       		.byte	0x23
 910 0170 24       		.uleb128 0x24
 911 0171 09       		.uleb128 0x9
 912 0172 34010000 		.4byte	.LASF20
 913 0176 03       		.byte	0x3
 914 0177 25       		.byte	0x25
 915 0178 3E000000 		.4byte	0x3e
 916 017c 02       		.byte	0x2
 917 017d 23       		.byte	0x23
 918 017e 26       		.uleb128 0x26
ARM GAS  /tmp/ccpdRmtM.s 			page 20


 919 017f 09       		.uleb128 0x9
 920 0180 5E000000 		.4byte	.LASF21
 921 0184 03       		.byte	0x3
 922 0185 27       		.byte	0x27
 923 0186 D2010000 		.4byte	0x1d2
 924 018a 02       		.byte	0x2
 925 018b 23       		.byte	0x23
 926 018c 28       		.uleb128 0x28
 927 018d 00       		.byte	0
 928 018e 08       		.uleb128 0x8
 929 018f 20010000 		.4byte	.LASF23
 930 0193 10       		.byte	0x10
 931 0194 03       		.byte	0x3
 932 0195 2B       		.byte	0x2b
 933 0196 D2010000 		.4byte	0x1d2
 934 019a 09       		.uleb128 0x9
 935 019b 53010000 		.4byte	.LASF24
 936 019f 03       		.byte	0x3
 937 01a0 2C       		.byte	0x2c
 938 01a1 D8010000 		.4byte	0x1d8
 939 01a5 02       		.byte	0x2
 940 01a6 23       		.byte	0x23
 941 01a7 00       		.uleb128 0
 942 01a8 09       		.uleb128 0x9
 943 01a9 34010000 		.4byte	.LASF20
 944 01ad 03       		.byte	0x3
 945 01ae 2D       		.byte	0x2d
 946 01af 4C000000 		.4byte	0x4c
 947 01b3 02       		.byte	0x2
 948 01b4 23       		.byte	0x23
 949 01b5 04       		.uleb128 0x4
 950 01b6 0A       		.uleb128 0xa
 951 01b7 6F6E00   		.ascii	"on\000"
 952 01ba 03       		.byte	0x3
 953 01bb 2E       		.byte	0x2e
 954 01bc 4C000000 		.4byte	0x4c
 955 01c0 02       		.byte	0x2
 956 01c1 23       		.byte	0x23
 957 01c2 08       		.uleb128 0x8
 958 01c3 0A       		.uleb128 0xa
 959 01c4 6F666600 		.ascii	"off\000"
 960 01c8 03       		.byte	0x3
 961 01c9 2F       		.byte	0x2f
 962 01ca 4C000000 		.4byte	0x4c
 963 01ce 02       		.byte	0x2
 964 01cf 23       		.byte	0x23
 965 01d0 0C       		.uleb128 0xc
 966 01d1 00       		.byte	0
 967 01d2 0B       		.uleb128 0xb
 968 01d3 04       		.byte	0x4
 969 01d4 8E010000 		.4byte	0x18e
 970 01d8 0B       		.uleb128 0xb
 971 01d9 04       		.byte	0x4
 972 01da 4C000000 		.4byte	0x4c
 973 01de 0C       		.uleb128 0xc
 974 01df 70696400 		.ascii	"pid\000"
 975 01e3 01       		.byte	0x1
ARM GAS  /tmp/ccpdRmtM.s 			page 21


 976 01e4 14       		.byte	0x14
 977 01e5 01       		.byte	0x1
 978 01e6 00000000 		.4byte	.LFB0
 979 01ea C4000000 		.4byte	.LFE0
 980 01ee 00000000 		.4byte	.LLST0
 981 01f2 3A020000 		.4byte	0x23a
 982 01f6 0D       		.uleb128 0xd
 983 01f7 637400   		.ascii	"ct\000"
 984 01fa 01       		.byte	0x1
 985 01fb 14       		.byte	0x14
 986 01fc 3A020000 		.4byte	0x23a
 987 0200 02       		.byte	0x2
 988 0201 91       		.byte	0x91
 989 0202 64       		.sleb128 -28
 990 0203 0E       		.uleb128 0xe
 991 0204 44010000 		.4byte	.LASF25
 992 0208 01       		.byte	0x1
 993 0209 16       		.byte	0x16
 994 020a 4C000000 		.4byte	0x4c
 995 020e 02       		.byte	0x2
 996 020f 91       		.byte	0x91
 997 0210 74       		.sleb128 -12
 998 0211 0E       		.uleb128 0xe
 999 0212 3B000000 		.4byte	.LASF26
 1000 0216 01       		.byte	0x1
 1001 0217 16       		.byte	0x16
 1002 0218 4C000000 		.4byte	0x4c
 1003 021c 02       		.byte	0x2
 1004 021d 91       		.byte	0x91
 1005 021e 70       		.sleb128 -16
 1006 021f 0E       		.uleb128 0xe
 1007 0220 65010000 		.4byte	.LASF27
 1008 0224 01       		.byte	0x1
 1009 0225 16       		.byte	0x16
 1010 0226 4C000000 		.4byte	0x4c
 1011 022a 02       		.byte	0x2
 1012 022b 91       		.byte	0x91
 1013 022c 68       		.sleb128 -24
 1014 022d 0F       		.uleb128 0xf
 1015 022e 7500     		.ascii	"u\000"
 1016 0230 01       		.byte	0x1
 1017 0231 17       		.byte	0x17
 1018 0232 4C000000 		.4byte	0x4c
 1019 0236 02       		.byte	0x2
 1020 0237 91       		.byte	0x91
 1021 0238 6C       		.sleb128 -20
 1022 0239 00       		.byte	0
 1023 023a 0B       		.uleb128 0xb
 1024 023b 04       		.byte	0x4
 1025 023c C3000000 		.4byte	0xc3
 1026 0240 10       		.uleb128 0x10
 1027 0241 41000000 		.4byte	.LASF28
 1028 0245 01       		.byte	0x1
 1029 0246 28       		.byte	0x28
 1030 0247 01       		.byte	0x1
 1031 0248 00000000 		.4byte	.LFB1
 1032 024c 90000000 		.4byte	.LFE1
ARM GAS  /tmp/ccpdRmtM.s 			page 22


 1033 0250 38000000 		.4byte	.LLST1
 1034 0254 8D020000 		.4byte	0x28d
 1035 0258 0D       		.uleb128 0xd
 1036 0259 707600   		.ascii	"pv\000"
 1037 025c 01       		.byte	0x1
 1038 025d 28       		.byte	0x28
 1039 025e 8C000000 		.4byte	0x8c
 1040 0262 02       		.byte	0x2
 1041 0263 91       		.byte	0x91
 1042 0264 6E       		.sleb128 -18
 1043 0265 11       		.uleb128 0x11
 1044 0266 08010000 		.4byte	.LASF22
 1045 026a 01       		.byte	0x1
 1046 026b 28       		.byte	0x28
 1047 026c 3A020000 		.4byte	0x23a
 1048 0270 02       		.byte	0x2
 1049 0271 91       		.byte	0x91
 1050 0272 68       		.sleb128 -24
 1051 0273 0F       		.uleb128 0xf
 1052 0274 6500     		.ascii	"e\000"
 1053 0276 01       		.byte	0x1
 1054 0277 2A       		.byte	0x2a
 1055 0278 4C000000 		.4byte	0x4c
 1056 027c 02       		.byte	0x2
 1057 027d 91       		.byte	0x91
 1058 027e 74       		.sleb128 -12
 1059 027f 0F       		.uleb128 0xf
 1060 0280 647800   		.ascii	"dx\000"
 1061 0283 01       		.byte	0x1
 1062 0284 2A       		.byte	0x2a
 1063 0285 4C000000 		.4byte	0x4c
 1064 0289 02       		.byte	0x2
 1065 028a 91       		.byte	0x91
 1066 028b 70       		.sleb128 -16
 1067 028c 00       		.byte	0
 1068 028d 12       		.uleb128 0x12
 1069 028e 01       		.byte	0x1
 1070 028f F1000000 		.4byte	.LASF17
 1071 0293 01       		.byte	0x1
 1072 0294 3D       		.byte	0x3d
 1073 0295 01       		.byte	0x1
 1074 0296 00000000 		.4byte	.LFB2
 1075 029a CE000000 		.4byte	.LFE2
 1076 029e 70000000 		.4byte	.LLST2
 1077 02a2 C3020000 		.4byte	0x2c3
 1078 02a6 0D       		.uleb128 0xd
 1079 02a7 6E657700 		.ascii	"new\000"
 1080 02ab 01       		.byte	0x1
 1081 02ac 3D       		.byte	0x3d
 1082 02ad 76000000 		.4byte	0x76
 1083 02b1 02       		.byte	0x2
 1084 02b2 91       		.byte	0x91
 1085 02b3 77       		.sleb128 -9
 1086 02b4 11       		.uleb128 0x11
 1087 02b5 08010000 		.4byte	.LASF22
 1088 02b9 01       		.byte	0x1
 1089 02ba 3D       		.byte	0x3d
ARM GAS  /tmp/ccpdRmtM.s 			page 23


 1090 02bb 3A020000 		.4byte	0x23a
 1091 02bf 02       		.byte	0x2
 1092 02c0 91       		.byte	0x91
 1093 02c1 70       		.sleb128 -16
 1094 02c2 00       		.byte	0
 1095 02c3 12       		.uleb128 0x12
 1096 02c4 01       		.byte	0x1
 1097 02c5 91000000 		.4byte	.LASF29
 1098 02c9 01       		.byte	0x1
 1099 02ca 5F       		.byte	0x5f
 1100 02cb 01       		.byte	0x1
 1101 02cc 00000000 		.4byte	.LFB3
 1102 02d0 9A000000 		.4byte	.LFE3
 1103 02d4 A8000000 		.4byte	.LLST3
 1104 02d8 F8020000 		.4byte	0x2f8
 1105 02dc 0D       		.uleb128 0xd
 1106 02dd 707600   		.ascii	"pv\000"
 1107 02e0 01       		.byte	0x1
 1108 02e1 5F       		.byte	0x5f
 1109 02e2 8C000000 		.4byte	0x8c
 1110 02e6 02       		.byte	0x2
 1111 02e7 91       		.byte	0x91
 1112 02e8 76       		.sleb128 -10
 1113 02e9 11       		.uleb128 0x11
 1114 02ea 67000000 		.4byte	.LASF30
 1115 02ee 01       		.byte	0x1
 1116 02ef 5F       		.byte	0x5f
 1117 02f0 3A020000 		.4byte	0x23a
 1118 02f4 02       		.byte	0x2
 1119 02f5 91       		.byte	0x91
 1120 02f6 70       		.sleb128 -16
 1121 02f7 00       		.byte	0
 1122 02f8 13       		.uleb128 0x13
 1123 02f9 01       		.byte	0x1
 1124 02fa 5E000000 		.4byte	.LASF21
 1125 02fe 01       		.byte	0x1
 1126 02ff 7A       		.byte	0x7a
 1127 0300 01       		.byte	0x1
 1128 0301 4C000000 		.4byte	0x4c
 1129 0305 00000000 		.4byte	.LFB4
 1130 0309 7A000000 		.4byte	.LFE4
 1131 030d E0000000 		.4byte	.LLST4
 1132 0311 32030000 		.4byte	0x332
 1133 0315 0D       		.uleb128 0xd
 1134 0316 7000     		.ascii	"p\000"
 1135 0318 01       		.byte	0x1
 1136 0319 7A       		.byte	0x7a
 1137 031a D2010000 		.4byte	0x1d2
 1138 031e 02       		.byte	0x2
 1139 031f 91       		.byte	0x91
 1140 0320 74       		.sleb128 -12
 1141 0321 14       		.uleb128 0x14
 1142 0322 B8000000 		.4byte	.LASF35
 1143 0326 42030000 		.4byte	0x342
 1144 032a 01       		.byte	0x1
 1145 032b 05       		.byte	0x5
 1146 032c 03       		.byte	0x3
ARM GAS  /tmp/ccpdRmtM.s 			page 24


 1147 032d 28000000 		.4byte	__FUNCTION__.4943
 1148 0331 00       		.byte	0
 1149 0332 15       		.uleb128 0x15
 1150 0333 6F000000 		.4byte	0x6f
 1151 0337 42030000 		.4byte	0x342
 1152 033b 16       		.uleb128 0x16
 1153 033c 29000000 		.4byte	0x29
 1154 0340 08       		.byte	0x8
 1155 0341 00       		.byte	0
 1156 0342 17       		.uleb128 0x17
 1157 0343 32030000 		.4byte	0x332
 1158 0347 18       		.uleb128 0x18
 1159 0348 01       		.byte	0x1
 1160 0349 25010000 		.4byte	.LASF31
 1161 034d 01       		.byte	0x1
 1162 034e 87       		.byte	0x87
 1163 034f 01       		.byte	0x1
 1164 0350 4C000000 		.4byte	0x4c
 1165 0354 00000000 		.4byte	.LFB5
 1166 0358 96000000 		.4byte	.LFE5
 1167 035c 18010000 		.4byte	.LLST5
 1168 0360 0D       		.uleb128 0xd
 1169 0361 696E00   		.ascii	"in\000"
 1170 0364 01       		.byte	0x1
 1171 0365 87       		.byte	0x87
 1172 0366 4C000000 		.4byte	0x4c
 1173 036a 02       		.byte	0x2
 1174 036b 91       		.byte	0x91
 1175 036c 74       		.sleb128 -12
 1176 036d 11       		.uleb128 0x11
 1177 036e 34010000 		.4byte	.LASF20
 1178 0372 01       		.byte	0x1
 1179 0373 87       		.byte	0x87
 1180 0374 D8010000 		.4byte	0x1d8
 1181 0378 02       		.byte	0x2
 1182 0379 91       		.byte	0x91
 1183 037a 70       		.sleb128 -16
 1184 037b 0D       		.uleb128 0xd
 1185 037c 6F6E00   		.ascii	"on\000"
 1186 037f 01       		.byte	0x1
 1187 0380 87       		.byte	0x87
 1188 0381 4C000000 		.4byte	0x4c
 1189 0385 02       		.byte	0x2
 1190 0386 91       		.byte	0x91
 1191 0387 6C       		.sleb128 -20
 1192 0388 0D       		.uleb128 0xd
 1193 0389 6F666600 		.ascii	"off\000"
 1194 038d 01       		.byte	0x1
 1195 038e 87       		.byte	0x87
 1196 038f 4C000000 		.4byte	0x4c
 1197 0393 02       		.byte	0x2
 1198 0394 91       		.byte	0x91
 1199 0395 68       		.sleb128 -24
 1200 0396 00       		.byte	0
 1201 0397 00       		.byte	0
 1202              		.section	.debug_abbrev,"",%progbits
 1203              	.Ldebug_abbrev0:
ARM GAS  /tmp/ccpdRmtM.s 			page 25


 1204 0000 01       		.uleb128 0x1
 1205 0001 11       		.uleb128 0x11
 1206 0002 01       		.byte	0x1
 1207 0003 25       		.uleb128 0x25
 1208 0004 0E       		.uleb128 0xe
 1209 0005 13       		.uleb128 0x13
 1210 0006 0B       		.uleb128 0xb
 1211 0007 03       		.uleb128 0x3
 1212 0008 0E       		.uleb128 0xe
 1213 0009 1B       		.uleb128 0x1b
 1214 000a 0E       		.uleb128 0xe
 1215 000b 11       		.uleb128 0x11
 1216 000c 01       		.uleb128 0x1
 1217 000d 52       		.uleb128 0x52
 1218 000e 01       		.uleb128 0x1
 1219 000f 55       		.uleb128 0x55
 1220 0010 06       		.uleb128 0x6
 1221 0011 10       		.uleb128 0x10
 1222 0012 06       		.uleb128 0x6
 1223 0013 00       		.byte	0
 1224 0014 00       		.byte	0
 1225 0015 02       		.uleb128 0x2
 1226 0016 24       		.uleb128 0x24
 1227 0017 00       		.byte	0
 1228 0018 0B       		.uleb128 0xb
 1229 0019 0B       		.uleb128 0xb
 1230 001a 3E       		.uleb128 0x3e
 1231 001b 0B       		.uleb128 0xb
 1232 001c 03       		.uleb128 0x3
 1233 001d 0E       		.uleb128 0xe
 1234 001e 00       		.byte	0
 1235 001f 00       		.byte	0
 1236 0020 03       		.uleb128 0x3
 1237 0021 24       		.uleb128 0x24
 1238 0022 00       		.byte	0
 1239 0023 0B       		.uleb128 0xb
 1240 0024 0B       		.uleb128 0xb
 1241 0025 3E       		.uleb128 0x3e
 1242 0026 0B       		.uleb128 0xb
 1243 0027 03       		.uleb128 0x3
 1244 0028 08       		.uleb128 0x8
 1245 0029 00       		.byte	0
 1246 002a 00       		.byte	0
 1247 002b 04       		.uleb128 0x4
 1248 002c 16       		.uleb128 0x16
 1249 002d 00       		.byte	0
 1250 002e 03       		.uleb128 0x3
 1251 002f 0E       		.uleb128 0xe
 1252 0030 3A       		.uleb128 0x3a
 1253 0031 0B       		.uleb128 0xb
 1254 0032 3B       		.uleb128 0x3b
 1255 0033 0B       		.uleb128 0xb
 1256 0034 49       		.uleb128 0x49
 1257 0035 13       		.uleb128 0x13
 1258 0036 00       		.byte	0
 1259 0037 00       		.byte	0
 1260 0038 05       		.uleb128 0x5
ARM GAS  /tmp/ccpdRmtM.s 			page 26


 1261 0039 04       		.uleb128 0x4
 1262 003a 01       		.byte	0x1
 1263 003b 0B       		.uleb128 0xb
 1264 003c 0B       		.uleb128 0xb
 1265 003d 3A       		.uleb128 0x3a
 1266 003e 0B       		.uleb128 0xb
 1267 003f 3B       		.uleb128 0x3b
 1268 0040 0B       		.uleb128 0xb
 1269 0041 01       		.uleb128 0x1
 1270 0042 13       		.uleb128 0x13
 1271 0043 00       		.byte	0
 1272 0044 00       		.byte	0
 1273 0045 06       		.uleb128 0x6
 1274 0046 28       		.uleb128 0x28
 1275 0047 00       		.byte	0
 1276 0048 03       		.uleb128 0x3
 1277 0049 08       		.uleb128 0x8
 1278 004a 1C       		.uleb128 0x1c
 1279 004b 0D       		.uleb128 0xd
 1280 004c 00       		.byte	0
 1281 004d 00       		.byte	0
 1282 004e 07       		.uleb128 0x7
 1283 004f 28       		.uleb128 0x28
 1284 0050 00       		.byte	0
 1285 0051 03       		.uleb128 0x3
 1286 0052 0E       		.uleb128 0xe
 1287 0053 1C       		.uleb128 0x1c
 1288 0054 0D       		.uleb128 0xd
 1289 0055 00       		.byte	0
 1290 0056 00       		.byte	0
 1291 0057 08       		.uleb128 0x8
 1292 0058 13       		.uleb128 0x13
 1293 0059 01       		.byte	0x1
 1294 005a 03       		.uleb128 0x3
 1295 005b 0E       		.uleb128 0xe
 1296 005c 0B       		.uleb128 0xb
 1297 005d 0B       		.uleb128 0xb
 1298 005e 3A       		.uleb128 0x3a
 1299 005f 0B       		.uleb128 0xb
 1300 0060 3B       		.uleb128 0x3b
 1301 0061 0B       		.uleb128 0xb
 1302 0062 01       		.uleb128 0x1
 1303 0063 13       		.uleb128 0x13
 1304 0064 00       		.byte	0
 1305 0065 00       		.byte	0
 1306 0066 09       		.uleb128 0x9
 1307 0067 0D       		.uleb128 0xd
 1308 0068 00       		.byte	0
 1309 0069 03       		.uleb128 0x3
 1310 006a 0E       		.uleb128 0xe
 1311 006b 3A       		.uleb128 0x3a
 1312 006c 0B       		.uleb128 0xb
 1313 006d 3B       		.uleb128 0x3b
 1314 006e 0B       		.uleb128 0xb
 1315 006f 49       		.uleb128 0x49
 1316 0070 13       		.uleb128 0x13
 1317 0071 38       		.uleb128 0x38
ARM GAS  /tmp/ccpdRmtM.s 			page 27


 1318 0072 0A       		.uleb128 0xa
 1319 0073 00       		.byte	0
 1320 0074 00       		.byte	0
 1321 0075 0A       		.uleb128 0xa
 1322 0076 0D       		.uleb128 0xd
 1323 0077 00       		.byte	0
 1324 0078 03       		.uleb128 0x3
 1325 0079 08       		.uleb128 0x8
 1326 007a 3A       		.uleb128 0x3a
 1327 007b 0B       		.uleb128 0xb
 1328 007c 3B       		.uleb128 0x3b
 1329 007d 0B       		.uleb128 0xb
 1330 007e 49       		.uleb128 0x49
 1331 007f 13       		.uleb128 0x13
 1332 0080 38       		.uleb128 0x38
 1333 0081 0A       		.uleb128 0xa
 1334 0082 00       		.byte	0
 1335 0083 00       		.byte	0
 1336 0084 0B       		.uleb128 0xb
 1337 0085 0F       		.uleb128 0xf
 1338 0086 00       		.byte	0
 1339 0087 0B       		.uleb128 0xb
 1340 0088 0B       		.uleb128 0xb
 1341 0089 49       		.uleb128 0x49
 1342 008a 13       		.uleb128 0x13
 1343 008b 00       		.byte	0
 1344 008c 00       		.byte	0
 1345 008d 0C       		.uleb128 0xc
 1346 008e 2E       		.uleb128 0x2e
 1347 008f 01       		.byte	0x1
 1348 0090 03       		.uleb128 0x3
 1349 0091 08       		.uleb128 0x8
 1350 0092 3A       		.uleb128 0x3a
 1351 0093 0B       		.uleb128 0xb
 1352 0094 3B       		.uleb128 0x3b
 1353 0095 0B       		.uleb128 0xb
 1354 0096 27       		.uleb128 0x27
 1355 0097 0C       		.uleb128 0xc
 1356 0098 11       		.uleb128 0x11
 1357 0099 01       		.uleb128 0x1
 1358 009a 12       		.uleb128 0x12
 1359 009b 01       		.uleb128 0x1
 1360 009c 40       		.uleb128 0x40
 1361 009d 06       		.uleb128 0x6
 1362 009e 01       		.uleb128 0x1
 1363 009f 13       		.uleb128 0x13
 1364 00a0 00       		.byte	0
 1365 00a1 00       		.byte	0
 1366 00a2 0D       		.uleb128 0xd
 1367 00a3 05       		.uleb128 0x5
 1368 00a4 00       		.byte	0
 1369 00a5 03       		.uleb128 0x3
 1370 00a6 08       		.uleb128 0x8
 1371 00a7 3A       		.uleb128 0x3a
 1372 00a8 0B       		.uleb128 0xb
 1373 00a9 3B       		.uleb128 0x3b
 1374 00aa 0B       		.uleb128 0xb
ARM GAS  /tmp/ccpdRmtM.s 			page 28


 1375 00ab 49       		.uleb128 0x49
 1376 00ac 13       		.uleb128 0x13
 1377 00ad 02       		.uleb128 0x2
 1378 00ae 0A       		.uleb128 0xa
 1379 00af 00       		.byte	0
 1380 00b0 00       		.byte	0
 1381 00b1 0E       		.uleb128 0xe
 1382 00b2 34       		.uleb128 0x34
 1383 00b3 00       		.byte	0
 1384 00b4 03       		.uleb128 0x3
 1385 00b5 0E       		.uleb128 0xe
 1386 00b6 3A       		.uleb128 0x3a
 1387 00b7 0B       		.uleb128 0xb
 1388 00b8 3B       		.uleb128 0x3b
 1389 00b9 0B       		.uleb128 0xb
 1390 00ba 49       		.uleb128 0x49
 1391 00bb 13       		.uleb128 0x13
 1392 00bc 02       		.uleb128 0x2
 1393 00bd 0A       		.uleb128 0xa
 1394 00be 00       		.byte	0
 1395 00bf 00       		.byte	0
 1396 00c0 0F       		.uleb128 0xf
 1397 00c1 34       		.uleb128 0x34
 1398 00c2 00       		.byte	0
 1399 00c3 03       		.uleb128 0x3
 1400 00c4 08       		.uleb128 0x8
 1401 00c5 3A       		.uleb128 0x3a
 1402 00c6 0B       		.uleb128 0xb
 1403 00c7 3B       		.uleb128 0x3b
 1404 00c8 0B       		.uleb128 0xb
 1405 00c9 49       		.uleb128 0x49
 1406 00ca 13       		.uleb128 0x13
 1407 00cb 02       		.uleb128 0x2
 1408 00cc 0A       		.uleb128 0xa
 1409 00cd 00       		.byte	0
 1410 00ce 00       		.byte	0
 1411 00cf 10       		.uleb128 0x10
 1412 00d0 2E       		.uleb128 0x2e
 1413 00d1 01       		.byte	0x1
 1414 00d2 03       		.uleb128 0x3
 1415 00d3 0E       		.uleb128 0xe
 1416 00d4 3A       		.uleb128 0x3a
 1417 00d5 0B       		.uleb128 0xb
 1418 00d6 3B       		.uleb128 0x3b
 1419 00d7 0B       		.uleb128 0xb
 1420 00d8 27       		.uleb128 0x27
 1421 00d9 0C       		.uleb128 0xc
 1422 00da 11       		.uleb128 0x11
 1423 00db 01       		.uleb128 0x1
 1424 00dc 12       		.uleb128 0x12
 1425 00dd 01       		.uleb128 0x1
 1426 00de 40       		.uleb128 0x40
 1427 00df 06       		.uleb128 0x6
 1428 00e0 01       		.uleb128 0x1
 1429 00e1 13       		.uleb128 0x13
 1430 00e2 00       		.byte	0
 1431 00e3 00       		.byte	0
ARM GAS  /tmp/ccpdRmtM.s 			page 29


 1432 00e4 11       		.uleb128 0x11
 1433 00e5 05       		.uleb128 0x5
 1434 00e6 00       		.byte	0
 1435 00e7 03       		.uleb128 0x3
 1436 00e8 0E       		.uleb128 0xe
 1437 00e9 3A       		.uleb128 0x3a
 1438 00ea 0B       		.uleb128 0xb
 1439 00eb 3B       		.uleb128 0x3b
 1440 00ec 0B       		.uleb128 0xb
 1441 00ed 49       		.uleb128 0x49
 1442 00ee 13       		.uleb128 0x13
 1443 00ef 02       		.uleb128 0x2
 1444 00f0 0A       		.uleb128 0xa
 1445 00f1 00       		.byte	0
 1446 00f2 00       		.byte	0
 1447 00f3 12       		.uleb128 0x12
 1448 00f4 2E       		.uleb128 0x2e
 1449 00f5 01       		.byte	0x1
 1450 00f6 3F       		.uleb128 0x3f
 1451 00f7 0C       		.uleb128 0xc
 1452 00f8 03       		.uleb128 0x3
 1453 00f9 0E       		.uleb128 0xe
 1454 00fa 3A       		.uleb128 0x3a
 1455 00fb 0B       		.uleb128 0xb
 1456 00fc 3B       		.uleb128 0x3b
 1457 00fd 0B       		.uleb128 0xb
 1458 00fe 27       		.uleb128 0x27
 1459 00ff 0C       		.uleb128 0xc
 1460 0100 11       		.uleb128 0x11
 1461 0101 01       		.uleb128 0x1
 1462 0102 12       		.uleb128 0x12
 1463 0103 01       		.uleb128 0x1
 1464 0104 40       		.uleb128 0x40
 1465 0105 06       		.uleb128 0x6
 1466 0106 01       		.uleb128 0x1
 1467 0107 13       		.uleb128 0x13
 1468 0108 00       		.byte	0
 1469 0109 00       		.byte	0
 1470 010a 13       		.uleb128 0x13
 1471 010b 2E       		.uleb128 0x2e
 1472 010c 01       		.byte	0x1
 1473 010d 3F       		.uleb128 0x3f
 1474 010e 0C       		.uleb128 0xc
 1475 010f 03       		.uleb128 0x3
 1476 0110 0E       		.uleb128 0xe
 1477 0111 3A       		.uleb128 0x3a
 1478 0112 0B       		.uleb128 0xb
 1479 0113 3B       		.uleb128 0x3b
 1480 0114 0B       		.uleb128 0xb
 1481 0115 27       		.uleb128 0x27
 1482 0116 0C       		.uleb128 0xc
 1483 0117 49       		.uleb128 0x49
 1484 0118 13       		.uleb128 0x13
 1485 0119 11       		.uleb128 0x11
 1486 011a 01       		.uleb128 0x1
 1487 011b 12       		.uleb128 0x12
 1488 011c 01       		.uleb128 0x1
ARM GAS  /tmp/ccpdRmtM.s 			page 30


 1489 011d 40       		.uleb128 0x40
 1490 011e 06       		.uleb128 0x6
 1491 011f 01       		.uleb128 0x1
 1492 0120 13       		.uleb128 0x13
 1493 0121 00       		.byte	0
 1494 0122 00       		.byte	0
 1495 0123 14       		.uleb128 0x14
 1496 0124 34       		.uleb128 0x34
 1497 0125 00       		.byte	0
 1498 0126 03       		.uleb128 0x3
 1499 0127 0E       		.uleb128 0xe
 1500 0128 49       		.uleb128 0x49
 1501 0129 13       		.uleb128 0x13
 1502 012a 34       		.uleb128 0x34
 1503 012b 0C       		.uleb128 0xc
 1504 012c 02       		.uleb128 0x2
 1505 012d 0A       		.uleb128 0xa
 1506 012e 00       		.byte	0
 1507 012f 00       		.byte	0
 1508 0130 15       		.uleb128 0x15
 1509 0131 01       		.uleb128 0x1
 1510 0132 01       		.byte	0x1
 1511 0133 49       		.uleb128 0x49
 1512 0134 13       		.uleb128 0x13
 1513 0135 01       		.uleb128 0x1
 1514 0136 13       		.uleb128 0x13
 1515 0137 00       		.byte	0
 1516 0138 00       		.byte	0
 1517 0139 16       		.uleb128 0x16
 1518 013a 21       		.uleb128 0x21
 1519 013b 00       		.byte	0
 1520 013c 49       		.uleb128 0x49
 1521 013d 13       		.uleb128 0x13
 1522 013e 2F       		.uleb128 0x2f
 1523 013f 0B       		.uleb128 0xb
 1524 0140 00       		.byte	0
 1525 0141 00       		.byte	0
 1526 0142 17       		.uleb128 0x17
 1527 0143 26       		.uleb128 0x26
 1528 0144 00       		.byte	0
 1529 0145 49       		.uleb128 0x49
 1530 0146 13       		.uleb128 0x13
 1531 0147 00       		.byte	0
 1532 0148 00       		.byte	0
 1533 0149 18       		.uleb128 0x18
 1534 014a 2E       		.uleb128 0x2e
 1535 014b 01       		.byte	0x1
 1536 014c 3F       		.uleb128 0x3f
 1537 014d 0C       		.uleb128 0xc
 1538 014e 03       		.uleb128 0x3
 1539 014f 0E       		.uleb128 0xe
 1540 0150 3A       		.uleb128 0x3a
 1541 0151 0B       		.uleb128 0xb
 1542 0152 3B       		.uleb128 0x3b
 1543 0153 0B       		.uleb128 0xb
 1544 0154 27       		.uleb128 0x27
 1545 0155 0C       		.uleb128 0xc
ARM GAS  /tmp/ccpdRmtM.s 			page 31


 1546 0156 49       		.uleb128 0x49
 1547 0157 13       		.uleb128 0x13
 1548 0158 11       		.uleb128 0x11
 1549 0159 01       		.uleb128 0x1
 1550 015a 12       		.uleb128 0x12
 1551 015b 01       		.uleb128 0x1
 1552 015c 40       		.uleb128 0x40
 1553 015d 06       		.uleb128 0x6
 1554 015e 00       		.byte	0
 1555 015f 00       		.byte	0
 1556 0160 00       		.byte	0
 1557              		.section	.debug_loc,"",%progbits
 1558              	.Ldebug_loc0:
 1559              	.LLST0:
 1560 0000 00000000 		.4byte	.LFB0
 1561 0004 02000000 		.4byte	.LCFI0
 1562 0008 0200     		.2byte	0x2
 1563 000a 7D       		.byte	0x7d
 1564 000b 00       		.sleb128 0
 1565 000c 02000000 		.4byte	.LCFI0
 1566 0010 04000000 		.4byte	.LCFI1
 1567 0014 0200     		.2byte	0x2
 1568 0016 7D       		.byte	0x7d
 1569 0017 04       		.sleb128 4
 1570 0018 04000000 		.4byte	.LCFI1
 1571 001c 06000000 		.4byte	.LCFI2
 1572 0020 0200     		.2byte	0x2
 1573 0022 7D       		.byte	0x7d
 1574 0023 20       		.sleb128 32
 1575 0024 06000000 		.4byte	.LCFI2
 1576 0028 C4000000 		.4byte	.LFE0
 1577 002c 0200     		.2byte	0x2
 1578 002e 77       		.byte	0x77
 1579 002f 20       		.sleb128 32
 1580 0030 00000000 		.4byte	0
 1581 0034 00000000 		.4byte	0
 1582              	.LLST1:
 1583 0038 00000000 		.4byte	.LFB1
 1584 003c 02000000 		.4byte	.LCFI3
 1585 0040 0200     		.2byte	0x2
 1586 0042 7D       		.byte	0x7d
 1587 0043 00       		.sleb128 0
 1588 0044 02000000 		.4byte	.LCFI3
 1589 0048 04000000 		.4byte	.LCFI4
 1590 004c 0200     		.2byte	0x2
 1591 004e 7D       		.byte	0x7d
 1592 004f 08       		.sleb128 8
 1593 0050 04000000 		.4byte	.LCFI4
 1594 0054 06000000 		.4byte	.LCFI5
 1595 0058 0200     		.2byte	0x2
 1596 005a 7D       		.byte	0x7d
 1597 005b 18       		.sleb128 24
 1598 005c 06000000 		.4byte	.LCFI5
 1599 0060 90000000 		.4byte	.LFE1
 1600 0064 0200     		.2byte	0x2
 1601 0066 77       		.byte	0x77
 1602 0067 18       		.sleb128 24
ARM GAS  /tmp/ccpdRmtM.s 			page 32


 1603 0068 00000000 		.4byte	0
 1604 006c 00000000 		.4byte	0
 1605              	.LLST2:
 1606 0070 00000000 		.4byte	.LFB2
 1607 0074 02000000 		.4byte	.LCFI6
 1608 0078 0200     		.2byte	0x2
 1609 007a 7D       		.byte	0x7d
 1610 007b 00       		.sleb128 0
 1611 007c 02000000 		.4byte	.LCFI6
 1612 0080 04000000 		.4byte	.LCFI7
 1613 0084 0200     		.2byte	0x2
 1614 0086 7D       		.byte	0x7d
 1615 0087 04       		.sleb128 4
 1616 0088 04000000 		.4byte	.LCFI7
 1617 008c 06000000 		.4byte	.LCFI8
 1618 0090 0200     		.2byte	0x2
 1619 0092 7D       		.byte	0x7d
 1620 0093 10       		.sleb128 16
 1621 0094 06000000 		.4byte	.LCFI8
 1622 0098 CE000000 		.4byte	.LFE2
 1623 009c 0200     		.2byte	0x2
 1624 009e 77       		.byte	0x77
 1625 009f 10       		.sleb128 16
 1626 00a0 00000000 		.4byte	0
 1627 00a4 00000000 		.4byte	0
 1628              	.LLST3:
 1629 00a8 00000000 		.4byte	.LFB3
 1630 00ac 02000000 		.4byte	.LCFI9
 1631 00b0 0200     		.2byte	0x2
 1632 00b2 7D       		.byte	0x7d
 1633 00b3 00       		.sleb128 0
 1634 00b4 02000000 		.4byte	.LCFI9
 1635 00b8 04000000 		.4byte	.LCFI10
 1636 00bc 0200     		.2byte	0x2
 1637 00be 7D       		.byte	0x7d
 1638 00bf 08       		.sleb128 8
 1639 00c0 04000000 		.4byte	.LCFI10
 1640 00c4 06000000 		.4byte	.LCFI11
 1641 00c8 0200     		.2byte	0x2
 1642 00ca 7D       		.byte	0x7d
 1643 00cb 10       		.sleb128 16
 1644 00cc 06000000 		.4byte	.LCFI11
 1645 00d0 9A000000 		.4byte	.LFE3
 1646 00d4 0200     		.2byte	0x2
 1647 00d6 77       		.byte	0x77
 1648 00d7 10       		.sleb128 16
 1649 00d8 00000000 		.4byte	0
 1650 00dc 00000000 		.4byte	0
 1651              	.LLST4:
 1652 00e0 00000000 		.4byte	.LFB4
 1653 00e4 02000000 		.4byte	.LCFI12
 1654 00e8 0200     		.2byte	0x2
 1655 00ea 7D       		.byte	0x7d
 1656 00eb 00       		.sleb128 0
 1657 00ec 02000000 		.4byte	.LCFI12
 1658 00f0 04000000 		.4byte	.LCFI13
 1659 00f4 0200     		.2byte	0x2
ARM GAS  /tmp/ccpdRmtM.s 			page 33


 1660 00f6 7D       		.byte	0x7d
 1661 00f7 08       		.sleb128 8
 1662 00f8 04000000 		.4byte	.LCFI13
 1663 00fc 06000000 		.4byte	.LCFI14
 1664 0100 0200     		.2byte	0x2
 1665 0102 7D       		.byte	0x7d
 1666 0103 10       		.sleb128 16
 1667 0104 06000000 		.4byte	.LCFI14
 1668 0108 7A000000 		.4byte	.LFE4
 1669 010c 0200     		.2byte	0x2
 1670 010e 77       		.byte	0x77
 1671 010f 10       		.sleb128 16
 1672 0110 00000000 		.4byte	0
 1673 0114 00000000 		.4byte	0
 1674              	.LLST5:
 1675 0118 00000000 		.4byte	.LFB5
 1676 011c 02000000 		.4byte	.LCFI15
 1677 0120 0200     		.2byte	0x2
 1678 0122 7D       		.byte	0x7d
 1679 0123 00       		.sleb128 0
 1680 0124 02000000 		.4byte	.LCFI15
 1681 0128 04000000 		.4byte	.LCFI16
 1682 012c 0200     		.2byte	0x2
 1683 012e 7D       		.byte	0x7d
 1684 012f 04       		.sleb128 4
 1685 0130 04000000 		.4byte	.LCFI16
 1686 0134 06000000 		.4byte	.LCFI17
 1687 0138 0200     		.2byte	0x2
 1688 013a 7D       		.byte	0x7d
 1689 013b 18       		.sleb128 24
 1690 013c 06000000 		.4byte	.LCFI17
 1691 0140 96000000 		.4byte	.LFE5
 1692 0144 0200     		.2byte	0x2
 1693 0146 77       		.byte	0x77
 1694 0147 18       		.sleb128 24
 1695 0148 00000000 		.4byte	0
 1696 014c 00000000 		.4byte	0
 1697              		.section	.debug_aranges,"",%progbits
 1698 0000 44000000 		.4byte	0x44
 1699 0004 0200     		.2byte	0x2
 1700 0006 00000000 		.4byte	.Ldebug_info0
 1701 000a 04       		.byte	0x4
 1702 000b 00       		.byte	0
 1703 000c 0000     		.2byte	0
 1704 000e 0000     		.2byte	0
 1705 0010 00000000 		.4byte	.LFB0
 1706 0014 C4000000 		.4byte	.LFE0-.LFB0
 1707 0018 00000000 		.4byte	.LFB1
 1708 001c 90000000 		.4byte	.LFE1-.LFB1
 1709 0020 00000000 		.4byte	.LFB2
 1710 0024 CE000000 		.4byte	.LFE2-.LFB2
 1711 0028 00000000 		.4byte	.LFB3
 1712 002c 9A000000 		.4byte	.LFE3-.LFB3
 1713 0030 00000000 		.4byte	.LFB4
 1714 0034 7A000000 		.4byte	.LFE4-.LFB4
 1715 0038 00000000 		.4byte	.LFB5
 1716 003c 96000000 		.4byte	.LFE5-.LFB5
ARM GAS  /tmp/ccpdRmtM.s 			page 34


 1717 0040 00000000 		.4byte	0
 1718 0044 00000000 		.4byte	0
 1719              		.section	.debug_ranges,"",%progbits
 1720              	.Ldebug_ranges0:
 1721 0000 00000000 		.4byte	.LFB0
 1722 0004 C4000000 		.4byte	.LFE0
 1723 0008 00000000 		.4byte	.LFB1
 1724 000c 90000000 		.4byte	.LFE1
 1725 0010 00000000 		.4byte	.LFB2
 1726 0014 CE000000 		.4byte	.LFE2
 1727 0018 00000000 		.4byte	.LFB3
 1728 001c 9A000000 		.4byte	.LFE3
 1729 0020 00000000 		.4byte	.LFB4
 1730 0024 7A000000 		.4byte	.LFE4
 1731 0028 00000000 		.4byte	.LFB5
 1732 002c 96000000 		.4byte	.LFE5
 1733 0030 00000000 		.4byte	0
 1734 0034 00000000 		.4byte	0
 1735              		.section	.debug_line,"",%progbits
 1736              	.Ldebug_line0:
 1737 0000 A7010000 		.section	.debug_str,"MS",%progbits,1
 1737      02009800 
 1737      00000201 
 1737      FB0E0D00 
 1737      01010101 
 1738              	.LASF34:
 1739 0000 2F686F6D 		.ascii	"/home/mo/doc/studium/aktuell/Diplomarbeit/code\000"
 1739      652F6D6F 
 1739      2F646F63 
 1739      2F737475 
 1739      6469756D 
 1740              	.LASF14:
 1741 002f 52414D50 		.ascii	"RAMP\000"
 1741      00
 1742              	.LASF13:
 1743 0034 4E4F524D 		.ascii	"NORMAL\000"
 1743      414C00
 1744              	.LASF26:
 1745 003b 69746572 		.ascii	"iterm\000"
 1745      6D00
 1746              	.LASF28:
 1747 0041 75706461 		.ascii	"update\000"
 1747      746500
 1748              	.LASF33:
 1749 0048 636F6E74 		.ascii	"controller.c\000"
 1749      726F6C6C 
 1749      65722E63 
 1749      00
 1750              	.LASF12:
 1751 0055 6374726C 		.ascii	"ctrlio_t\000"
 1751      696F5F74 
 1751      00
 1752              	.LASF21:
 1753 005e 74726973 		.ascii	"tristate\000"
 1753      74617465 
 1753      00
 1754              	.LASF30:
ARM GAS  /tmp/ccpdRmtM.s 			page 35


 1755 0067 6C6F6F70 		.ascii	"loop\000"
 1755      00
 1756              	.LASF8:
 1757 006c 6C6F6E67 		.ascii	"long unsigned int\000"
 1757      20756E73 
 1757      69676E65 
 1757      6420696E 
 1757      7400
 1758              	.LASF4:
 1759 007e 73686F72 		.ascii	"short unsigned int\000"
 1759      7420756E 
 1759      7369676E 
 1759      65642069 
 1759      6E7400
 1760              	.LASF29:
 1761 0091 636F6E74 		.ascii	"control\000"
 1761      726F6C00 
 1762              	.LASF32:
 1763 0099 474E5520 		.ascii	"GNU C 4.6.1\000"
 1763      4320342E 
 1763      362E3100 
 1764              	.LASF2:
 1765 00a5 756E7369 		.ascii	"unsigned char\000"
 1765      676E6564 
 1765      20636861 
 1765      7200
 1766              	.LASF15:
 1767 00b3 53544F50 		.ascii	"STOP\000"
 1767      00
 1768              	.LASF35:
 1769 00b8 5F5F4655 		.ascii	"__FUNCTION__\000"
 1769      4E435449 
 1769      4F4E5F5F 
 1769      00
 1770              	.LASF0:
 1771 00c5 756E7369 		.ascii	"unsigned int\000"
 1771      676E6564 
 1771      20696E74 
 1771      00
 1772              	.LASF6:
 1773 00d2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1773      206C6F6E 
 1773      6720756E 
 1773      7369676E 
 1773      65642069 
 1774              	.LASF10:
 1775 00e9 75696E74 		.ascii	"uint8_t\000"
 1775      385F7400 
 1776              	.LASF17:
 1777 00f1 6D6F6465 		.ascii	"mode\000"
 1777      00
 1778              	.LASF18:
 1779 00f6 72536C6F 		.ascii	"rSlope\000"
 1779      706500
 1780              	.LASF16:
 1781 00fd 6374726C 		.ascii	"ctrlmode_t\000"
 1781      6D6F6465 
ARM GAS  /tmp/ccpdRmtM.s 			page 36


 1781      5F7400
 1782              	.LASF22:
 1783 0108 6374726C 		.ascii	"ctrl\000"
 1783      00
 1784              	.LASF5:
 1785 010d 6C6F6E67 		.ascii	"long long int\000"
 1785      206C6F6E 
 1785      6720696E 
 1785      7400
 1786              	.LASF9:
 1787 011b 63686172 		.ascii	"char\000"
 1787      00
 1788              	.LASF23:
 1789 0120 74726970 		.ascii	"trip\000"
 1789      00
 1790              	.LASF31:
 1791 0125 74726973 		.ascii	"tris\000"
 1791      00
 1792              	.LASF3:
 1793 012a 73686F72 		.ascii	"short int\000"
 1793      7420696E 
 1793      7400
 1794              	.LASF20:
 1795 0134 6F757470 		.ascii	"output\000"
 1795      757400
 1796              	.LASF11:
 1797 013b 75696E74 		.ascii	"uint16_t\000"
 1797      31365F74 
 1797      00
 1798              	.LASF25:
 1799 0144 70746572 		.ascii	"pterm\000"
 1799      6D00
 1800              	.LASF7:
 1801 014a 6C6F6E67 		.ascii	"long int\000"
 1801      20696E74 
 1801      00
 1802              	.LASF24:
 1803 0153 696E7075 		.ascii	"input\000"
 1803      7400
 1804              	.LASF1:
 1805 0159 7369676E 		.ascii	"signed char\000"
 1805      65642063 
 1805      68617200 
 1806              	.LASF27:
 1807 0165 64746572 		.ascii	"dterm\000"
 1807      6D00
 1808              	.LASF19:
 1809 016b 5F646478 		.ascii	"_ddx\000"
 1809      00
 1810              		.ident	"GCC: (Sourcery CodeBench Lite 2011.09-69) 4.6.1"
ARM GAS  /tmp/ccpdRmtM.s 			page 37


DEFINED SYMBOLS
                            *ABS*:00000000 controller.c
     /tmp/ccpdRmtM.s:19     .text.pid:00000000 $t
     /tmp/ccpdRmtM.s:23     .text.pid:00000000 pid
     /tmp/ccpdRmtM.s:145    .text.update:00000000 $t
     /tmp/ccpdRmtM.s:149    .text.update:00000000 update
     /tmp/ccpdRmtM.s:525    .text.tristate:00000000 tristate
     /tmp/ccpdRmtM.s:251    .text.mode:00000000 $t
     /tmp/ccpdRmtM.s:256    .text.mode:00000000 mode
     /tmp/ccpdRmtM.s:396    .text.control:00000000 $t
     /tmp/ccpdRmtM.s:401    .text.control:00000000 control
     /tmp/ccpdRmtM.s:510    .rodata:00000000 $d
     /tmp/ccpdRmtM.s:511    .rodata:00000000 .LC0
     /tmp/ccpdRmtM.s:514    .rodata:00000010 .LC1
     /tmp/ccpdRmtM.s:517    .rodata:00000018 .LC2
     /tmp/ccpdRmtM.s:520    .text.tristate:00000000 $t
     /tmp/ccpdRmtM.s:706    .rodata:00000028 __FUNCTION__.4943
     /tmp/ccpdRmtM.s:598    .text.tris:00000000 tris
     /tmp/ccpdRmtM.s:593    .text.tris:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__assert_func
